<h1 id="nav_point_149">&#31532; 10 &#31456;&#12288;&#20445;&#25252; Web &#23433;&#20840;</h1><blockquote>
<p><strong>&#26412;&#31456;&#20869;&#23481;</strong></p>
<ul>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">Spring Security &#30340;&#22522;&#26412;&#24773;&#20917;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#22522;&#26412;&#30340;&#35748;&#35777;&#19982;&#25480;&#26435;&#31649;&#29702;&#26041;&#27861;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#20960;&#31181;&#24120;&#35265; Web &#25915;&#20987;&#30340;&#24212;&#23545;&#25514;&#26045;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#31616;&#21333;&#30340; REST API &#23458;&#25143;&#31471;&#35748;&#35777;&#26041;&#27861;</li>
</ul>
</blockquote><p>&#23433;&#20840;&#26159;&#24320;&#21457;&#32773;&#27704;&#36828;&#32469;&#19981;&#24320;&#30340;&#35805;&#39064;&#65292;&#23588;&#20854;&#26159;&#29616;&#22312;&#22823;&#23478;&#30340;&#23433;&#20840;&#24847;&#35782;&#22312;&#19981;&#26029;&#22320;&#25552;&#39640;&#65292;&#36234;&#26469;&#36234;&#37325;&#35270;&#23545;&#20449;&#24687;&#23433;&#20840;&#30340;&#20445;&#25252;&#65307;&#19982;&#27492;&#21516;&#26102;&#65292;&#40657;&#20135;&#25110;&#32773;&#28784;&#20135;&#20063;&#23545;&#29992;&#25143;&#21644;&#31995;&#32479;&#34382;&#35270;&#30472;&#30472;&#65292;&#36825;&#23601;&#23545;&#31995;&#32479;&#24320;&#21457;&#32773;&#25552;&#20986;&#20102;&#26356;&#39640;&#30340;&#35201;&#27714;&#12290;&#20320;&#24456;&#38590;&#24819;&#35937;&#27809;&#26377;&#19968;&#28857;&#20799;&#23433;&#20840;&#38450;&#25252;&#12289;&#22312;&#32593;&#19978;&#8220;&#35064;&#22868;&#8221;&#30340;&#31995;&#32479;&#12290;&#38500;&#20102;&#22522;&#30784;&#30340;&#31995;&#32479;&#23433;&#20840;&#25514;&#26045;&#65292;&#22312;&#31995;&#32479;&#24320;&#21457;&#36807;&#31243;&#20013;&#65292;&#24320;&#21457;&#32773;&#20063;&#35201;&#21152;&#20837;&#26356;&#22810;&#23433;&#20840;&#26041;&#38754;&#30340;&#32771;&#37327;&#12290;&#26412;&#31456;&#23601;&#35753;&#25105;&#20204;&#26469;&#32842;&#32842;&#22914;&#20309;&#22312; Spring &#24320;&#21457;&#30340; Web &#39033;&#30446;&#20013;&#22686;&#21152;&#19968;&#20123;&#23433;&#20840;&#25514;&#26045;&#12290;</p><h2 id="nav_point_150">10.1&#12288;&#35748;&#35782; Spring Security</h2><p>Spring Security &#26159; Spring &#23478;&#26063;&#20013;&#19987;&#38376;&#29992;&#26469;&#25552;&#20379;&#35748;&#35777;&#65288;authentication&#65289;&#19982;&#25480;&#26435;&#65288;authorization&#65289;&#30340;&#19968;&#27454;&#26694;&#26550;&#65292;&#21516;&#26102;&#36824;&#23545;&#19968;&#20123;&#24120;&#35265;&#30340;&#25915;&#20987;&#22330;&#26223;&#25552;&#20379;&#20102;&#23545;&#24212;&#30340;&#38450;&#24481;&#25514;&#26045;&#12290;&#23545;&#20110;&#22522;&#20110; Spring Framework &#24320;&#21457;&#30340;&#31995;&#32479;&#32780;&#35328;&#65292;Spring Security &#31639;&#24471;&#19978;&#26159;&#23433;&#20840;&#21152;&#22266;&#30340;&#39318;&#36873;&#26694;&#26550;&#65292;&#21487;&#20197;&#24110;&#21161;&#25105;&#20204;&#26356;&#26041;&#20415;&#22320;&#25171;&#36896;&#19968;&#20010;&#30456;&#23545;&#23433;&#20840;&#30340; Web &#31995;&#32479;&#12290;</p><p>&#22238;&#39038; Spring Security &#30340;&#21382;&#21490;&#65292;&#26368;&#26089;&#21487;&#20197;&#36861;&#28335;&#21040; 2003 &#24180;&#65292;&#24444;&#26102;&#30340; Spring Framework &#20063;&#25165;&#21018;&#21018;&#36215;&#27493;&#19981;&#20037;&#12290;&#34429;&#28982; Spring &#22242;&#38431;&#35748;&#20026;&#23433;&#20840;&#26159;&#20010;&#38750;&#24120;&#20540;&#24471;&#25237;&#20837;&#30340;&#39046;&#22495;&#65292;&#20294;&#23454;&#22312;&#26159;&#26080;&#26247;&#39038;&#21450;&#36825;&#22359;&#12290;Ben Alex &#24320;&#21457;&#20102;&#19968;&#20010;&#21517;&#20026;&#8220;The Acegi Security System for Spring&#8221;&#30340;&#39033;&#30446; <span class="&#27880;&#37322;&#32534;&#21495;">1</span>&#65292;&#21518;&#26469;&#35813;&#39033;&#30446;&#34987;&#32435;&#20837; Spring &#39033;&#30446;&#38598;&#65292;&#24182;&#20110; 2006 &#24180; 5 &#26376;&#21457;&#24067;&#20102;&#27491;&#24335;&#30340; 1.0.0 &#29256;&#26412;&#65292;&#22312;&#32463;&#21382;&#20102;&#22823;&#37327;&#30340;&#25913;&#36827;&#21518;&#65292;&#20110; 2007 &#24180;&#24213;&#27491;&#24335;&#25913;&#21517;&#20026; Spring Security&#12290;&#29616;&#22312;&#30340; Spring Security &#39033;&#30446;&#38750;&#24120;&#27963;&#36291;&#65292;&#24050;&#32463;&#19982; Spring Framework &#19968;&#26679;&#65292;&#25104;&#20026; Java Web &#24320;&#21457;&#36807;&#31243;&#20013;&#23433;&#20840;&#30456;&#20851;&#39046;&#22495;&#30340;&#20107;&#23454;&#26631;&#20934;&#20102;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">1</span>&#20043;&#25152;&#20197;&#36215;&#21517;&#20026; Acegi&#65292;&#26159;&#20026;&#20102;&#36991;&#20813;&#19982;&#20854;&#20182;&#39033;&#30446;&#37325;&#21517;&#65292;&#20174; 26 &#20010;&#23383;&#27597;&#34920;&#20013;&#36873;&#20986;&#20102;&#31532; 1 &#20010;&#12289;&#31532; 3 &#20010;&#12289;&#31532; 5 &#20010;&#12289;&#31532; 7 &#20010;&#21644;&#31532; 9 &#20010;&#23383;&#27597;&#12290;</p><p>Spring Security &#20027;&#35201;&#25552;&#20379;&#20102;&#22914;&#19979;&#19968;&#20123;&#29305;&#24615;&#12290;</p><ul>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><strong>&#36523;&#20221;&#35748;&#35777;</strong>&#65292;&#35777;&#26126;&#20320;&#26159;&#35841;&#12290;Spring Security &#25903;&#25345;&#22810;&#31181;&#19981;&#21516;&#31867;&#22411;&#30340;&#35748;&#35777;&#65292;&#20363;&#22914;&#22522;&#20110;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#30340;&#35748;&#35777;&#65292;&#22522;&#20110; JAAS&#65288;Java Authentication and Authorization Service&#65289;&#30340;&#35748;&#35777;&#65292;&#20197;&#21450; CAS &#31561;&#12290;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><strong>&#25805;&#20316;&#25480;&#26435;</strong>&#65292;&#35268;&#23450;&#20320;&#33021;&#20570;&#20160;&#20040;&#12290;Spring Security &#25552;&#20379;&#20102;&#30456;&#23545;&#23436;&#21892;&#30340; RBAC&#65288;Role-Based Access Control&#65292;&#22522;&#20110;&#35282;&#33394;&#30340;&#35775;&#38382;&#25511;&#21046;&#65289;&#26435;&#38480;&#65292;&#36890;&#36807;&#34920;&#36798;&#24335;&#23601;&#33021;&#26041;&#20415;&#22320;&#23436;&#25104;&#30456;&#20851;&#37197;&#32622;&#65292;&#23558;&#31890;&#24230;&#25511;&#21046;&#21040;&#26041;&#27861;&#32423;&#21035;&#12290;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><strong>&#24120;&#35265;&#25915;&#20987;&#38450;&#24481;</strong>&#65292;&#22312;&#38450;&#28779;&#22681;&#20043;&#22806;&#65292;&#20877;&#32473;&#24212;&#29992;&#31359;&#22871;&#8220;&#38112;&#30002;&#8221;&#12290;Spring Security &#33021;&#25552;&#20379;&#30340;&#38450;&#25252;&#31181;&#31867;&#26377;&#38480;&#65292;&#20027;&#35201;&#26159;&#38024;&#23545; CSRF &#21644; HTTP &#35831;&#27714;&#21152;&#22266;&#30340;&#12290;</li>
</ul><h3 id="nav_point_151">10.1.1&#12288;&#27169;&#22359;&#20171;&#32461;</h3><p>&#20174; Spring Security 3.0 &#24320;&#22987;&#65292;Spring Security &#34987;&#20998;&#25104;&#20102;&#22810;&#20010;&#27169;&#22359;&#65292;&#25918;&#22312;&#19981;&#21516;&#30340; Jar &#20013;&#65292;&#25105;&#20204;&#21487;&#20197;&#25353;&#38656;&#24341;&#20837;&#30456;&#20851;&#30340;&#20381;&#36182;&#12290;&#23601;&#36825;&#19968;&#28857;&#32780;&#35328;&#65292;&#23427;&#19982; Spring Framework &#30340;&#39118;&#26684;&#26159;&#39640;&#24230;&#19968;&#33268;&#30340;&#12290;&#34920; 10-1 &#21015;&#20030;&#20102;&#19968;&#20123;&#20027;&#35201;&#30340;&#27169;&#22359;&#12290;</p><p><strong>&#34920; 10-1&#12288;Spring Security &#30340;&#19968;&#20123;&#20027;&#35201;&#27169;&#22359;</strong></p><table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">Jar &#21253;</p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#35828;&#26126;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">spring-security-core.jar</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#26680;&#24515;&#27169;&#22359;&#65292;&#21253;&#21547;&#20102;&#20027;&#35201;&#30340;&#35748;&#35777;&#19982;&#25480;&#26435;&#25903;&#25345;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">spring-security-web.jar</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25552;&#20379; Web &#30456;&#20851;&#30340;&#23433;&#20840;&#25903;&#25345;&#65292;&#22823;&#37096;&#20998;&#24773;&#20917;&#19979;&#37117;&#20250;&#29992;&#21040;&#23427;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">spring-security-config.jar</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25552;&#20379; XML &#19982; Java &#37197;&#32622;&#26041;&#24335;&#65292;&#21487;&#20197;&#36741;&#21161;&#36827;&#34892;&#21508;&#31181;&#37197;&#32622;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">spring-security-ldap.jar</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25552;&#20379; LDAP&#65288;Lightweight Directory Access Protocol&#65289;&#30456;&#20851;&#25903;&#25345;&#65292;&#24456;&#22810;&#20844;&#21496;&#37117;&#37319;&#29992; LDAP &#36827;&#34892;&#29992;&#25143;&#31649;&#29702;&#65292;&#22240;&#27492; LDAP &#30340;&#25903;&#25345;&#24456;&#23454;&#29992;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">spring-security-oauth2-*.jar</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25552;&#20379;&#20102; OAuth 2.0 &#30456;&#20851;&#30340;&#25903;&#25345;&#12290;&#38500;&#20102;&#26680;&#24515;&#30456;&#20851;&#20869;&#23481;&#65292;&#36824;&#26377;&#23458;&#25143;&#31471;&#30340;&#25903;&#25345;&#21644;&#31616;&#21333;&#30340;&#36164;&#28304;&#26381;&#21153;&#22120;&#23454;&#29616;</p></td>
</tr>
</tbody>
</table><p>&#21040;&#20102; Spring Security 5.<em>x</em> &#30340;&#26102;&#20195;&#65292;&#38500;&#20102;&#21516;&#27493;&#30340; Servlet &#24212;&#29992;&#65292;Spring Security &#36824;&#24320;&#22987;&#25903;&#25345; Spring WebFlux &#36825;&#26679;&#30340;&#21709;&#24212;&#24335;&#24212;&#29992;&#31243;&#24207;&#12290;&#19981;&#36807;&#22312;&#26412;&#31456;&#20013;&#65292;&#25105;&#20204;&#36824;&#26159;&#26356;&#22810;&#22320;&#32858;&#28966;&#20110; Servlet &#24212;&#29992;&#12290;</p><h3 id="nav_point_152">10.1.2&#12288;&#24037;&#20316;&#21407;&#29702;</h3><p>Spring Security &#38024;&#23545; Web &#24212;&#29992;&#20570;&#20102;&#23433;&#20840;&#21152;&#22266;&#65292;&#26412;&#36136;&#19978;&#26159;&#22312;&#24212;&#29992;&#30340; Servlet<span class="&#27880;&#37322;&#32534;&#21495;">2</span> &#25191;&#34892;&#21069;&#21518;&#20570;&#20102;&#19968;&#20123;&#25318;&#25130;&#12290;&#25105;&#20204;&#21487;&#20197;&#25226;&#23427;&#29702;&#35299;&#20026;&#31867;&#20284; AOP &#30340;&#26041;&#24335;&#65292;&#21482;&#19981;&#36807;&#36825;&#20010;&#25318;&#25130;&#26159;&#20381;&#25176;&#20110; Servlet &#30340; <code>Filter</code> &#36807;&#28388;&#22120;&#25509;&#21475;&#26469;&#23454;&#29616;&#30340;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">2</span>&#22312; Spring MVC &#30340;&#39033;&#30446;&#37324;&#23601;&#26159; <code>DispatcherServlet</code>&#12290;</p><p>&#26082;&#28982;&#26159;&#21644; Spring Framework &#25645;&#37197;&#20351;&#29992;&#30340;&#65292;&#25105;&#20204;&#33258;&#28982;&#24076;&#26395;&#23558;&#23613;&#21487;&#33021;&#22810;&#30340;&#19996;&#35199;&#20132;&#30001; Spring &#23481;&#22120;&#26469;&#25176;&#31649;&#65292;&#22240;&#27492; Spring Security &#25552;&#20379;&#20102;&#19968;&#20010; <code>DelegatingFilterProxy</code>&#12290;&#23427;&#26159;&#19968;&#20010;&#26631;&#20934;&#30340; Servlet &#36807;&#28388;&#22120;&#65292;&#27880;&#20876;&#21040; Servlet &#30340;&#23481;&#22120;&#20013;&#65292;&#20294;&#25152;&#26377;&#30340;&#25805;&#20316;&#37117;&#30001; Spring &#23481;&#22120;&#20013;&#37027;&#20123;&#23454;&#29616;&#20102; <code>Filter</code> &#30340; Bean &#26469;&#23436;&#25104;&#12290;&#25105;&#20204;&#21487;&#20197;&#35748;&#20026; <code>DelegatingFilterProxy</code> &#20805;&#24403;&#20102; Servlet &#23481;&#22120;&#19982; Spring &#23481;&#22120;&#20043;&#38388;&#30340;&#26725;&#26753;&#12290;</p><p>&#36890;&#24120;&#24773;&#20917;&#19979;&#65292;&#31995;&#32479;&#20013;&#29992;&#21040;&#30340;&#36807;&#28388;&#22120;&#19981;&#27490;&#19968;&#20010;&#65292;&#20165; Spring Security &#23601;&#25552;&#20379;&#20102;&#22823;&#37327;&#19981;&#21516;&#20316;&#29992;&#30340; Servlet &#36807;&#28388;&#22120;&#12290;&#22914;&#26524;&#27599;&#20010;&#37117;&#38656;&#35201;&#25105;&#20204;&#20570;&#29305;&#21035;&#30340;&#37197;&#32622;&#65292;&#37027;&#24037;&#20316;&#37327;&#26080;&#30097;&#26159;&#24040;&#22823;&#30340;&#12290;&#22240;&#27492;&#65292;&#25105;&#20204;&#30452;&#25509;&#22312; <code>DelegatingFilterProxy</code> &#37324;&#37197;&#32622;&#19968;&#20010; <code>FilterChainProxy</code>&#65292;&#30001;&#23427;&#26469;&#35843;&#29992; <code>SecurityFilterChain</code>&#65288;&#40664;&#35748;&#23454;&#29616;&#26159; <code>DefaultSecurityFilterChain</code>&#65289;&#65292;&#21518;&#32773;&#20250;&#31649;&#29702;&#25152;&#28041;&#21450;&#30340; <code>Filter</code> Bean&#12290;&#38024;&#23545;&#24403;&#21069;&#35831;&#27714;&#35813;&#23545;&#24212;&#21738;&#20123;&#36807;&#28388;&#22120;&#65292;&#37117;&#30001; <code>SecurityFilterChain</code> &#26469;&#20915;&#23450;&#12290;Spring Security &#38024;&#23545;&#19981;&#21516;&#23433;&#20840;&#38656;&#27714;&#25552;&#20379;&#20102;&#22823;&#37327;&#36807;&#28388;&#22120;&#65292;&#20855;&#20307;&#21487;&#35265;&#34920; 10-2&#12290;</p><p><strong>&#34920; 10-2&#12288;Spring Security &#25552;&#20379;&#30340;&#37096;&#20998; <code>Filter</code> &#23454;&#29616;</strong></p><table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;"><code>Filter</code></p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#20316;&#29992;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>CorsFilter</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#22788;&#29702; CORS&#65288;Cross-Origin Resource Sharing&#65292;&#36328;&#22495;&#36164;&#28304;&#20849;&#20139;&#65289;&#30340; <code>Filter</code> &#23454;&#29616;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>CsrfFilter</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#22788;&#29702; CSRF&#65288;Cross-Site Request Forgery&#65292;&#36328;&#31449;&#35831;&#27714;&#20266;&#36896;&#65289;&#30340; <code>Filter</code> &#23454;&#29616;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>UsernamePasswordAuthenticationFilter</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#22788;&#29702;&#29992;&#25143;&#21517;&#19982;&#23494;&#30721;&#35748;&#35777;&#30340; <code>Filter</code> &#23454;&#29616;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>AnonymousAuthenticationFilter</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#22788;&#29702;&#21311;&#21517;&#35831;&#27714;&#30340; <code>Filter</code> &#23454;&#29616;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>RememberMeAuthenticationFilter</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#23454;&#29616;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;&#30340; <code>Filter</code> &#23454;&#29616;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>BasicAuthenticationFilter</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#22788;&#29702; HTTP Basic &#35748;&#35777;&#30340; <code>Filter</code> &#23454;&#29616;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>ExceptionTranslationFilter</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#32763;&#35793;&#24322;&#24120;&#20449;&#24687;&#30340; <code>Filter</code> &#23454;&#29616;</p></td>
</tr>
</tbody>
</table><p>&#22914;&#26524;&#29992;&#19968;&#24352;&#22270;&#26469;&#27010;&#25324; Spring Security &#30340;&#22788;&#29702;&#27969;&#31243;&#65292;&#23427;&#24212;&#35813;&#22914;&#22270; 10-1 &#25152;&#31034;&#12290;&#23458;&#25143;&#31471;&#21457;&#36215;&#35831;&#27714;&#65292;&#36827;&#20837; Servlet &#23481;&#22120;&#21518;&#20250;&#20132;&#30001;&#19968;&#31995;&#21015; Servlet &#36807;&#28388;&#22120;&#36827;&#34892;&#22788;&#29702;&#65292;&#26368;&#21518;&#20877;&#36208;&#21040; <code>DispatcherServlet</code>&#65292;&#22788;&#29702;&#21518;&#30340;&#32467;&#26524;&#20877;&#21453;&#21521;&#32463;&#36807;&#36807;&#28388;&#22120;&#12290;&#20854;&#20013;&#30340; <code>DelegatingFilterProxy</code> &#22312;&#22788;&#29702;&#26102;&#20250;&#25226;&#35831;&#27714;&#36716;&#32473;&#22312; Spring &#19978;&#19979;&#25991;&#20013;&#30340; <code>FilterChainProxy</code>&#65292;&#21518;&#32773;&#20877;&#23558;&#35831;&#27714;&#36716;&#32473; <code>SecurityFilterChain</code>&#12290;&#39038;&#21517;&#24605;&#20041;&#65292;&#36807;&#28388;&#22120;&#38142;&#19981;&#26159;&#19968;&#20010;&#36807;&#28388;&#22120;&#65292;&#32780;&#26159;&#19968;&#36830;&#20018;&#30340;&#36807;&#28388;&#22120;&#65292;&#36825;&#20123;&#36807;&#28388;&#22120;&#37117;&#26159;&#22312; Spring &#19978;&#19979;&#25991;&#20013;&#31649;&#29702;&#30340;&#12290;</p><p class="&#22270;"><img alt="{%}" src="file:///[PrimaryStorage]local_pic/XueTouSpring_CongRuMenDaoXiangMuShiZhan/image00779.jpeg"/></p><p class="p-img-title"><strong>&#22270; 10-1&#12288;Spring Security &#30340;&#35831;&#27714;&#22788;&#29702;&#27969;&#31243;</strong></p><h2 id="nav_point_153">10.2&#12288;&#36523;&#20221;&#35748;&#35777;</h2><p>&#22312;&#23545; Spring Security &#26377;&#20102;&#19968;&#20010;&#22823;&#27010;&#30340;&#20102;&#35299;&#21518;&#65292;&#23601;&#35813;&#23558;&#20854;&#25237;&#20837;&#23454;&#36341;&#20102;&#65292;&#25105;&#20204;&#20027;&#35201;&#35299;&#20915;&#20004;&#20010;&#38382;&#39064;&#8212;&#8212;&#25105;&#26159;&#35841;&#20197;&#21450;&#25105;&#33021;&#24178;&#20160;&#20040;&#65292;&#20998;&#21035;&#23545;&#24212;&#36523;&#20221;&#35748;&#35777;&#19982;&#35775;&#38382;&#25480;&#26435;&#20004;&#22823;&#21151;&#33021;&#12290;&#25509;&#19979;&#26469;&#65292;&#23601;&#35753;&#25105;&#20204;&#20174;&#36523;&#20221;&#35748;&#35777;&#24320;&#22987;&#65292;&#26469;&#30475;&#30475; Spring Security &#26159;&#24590;&#20040;&#24110;&#21161;&#25105;&#20204;&#30340;&#21543;&#12290;</p><h3 id="nav_point_154">10.2.1&#12288;Spring Security &#30340;&#36523;&#20221;&#35748;&#35777;&#26426;&#21046;</h3><p>&#22312; Spring Security &#20013;&#65292;&#26377;&#19968;&#20010;&#23433;&#20840;&#19978;&#19979;&#25991;&#30340;&#27010;&#24565;&#65292;&#29992; <code>SecurityContext</code> &#25509;&#21475;&#26469;&#34920;&#31034;&#65292;<code>SecurityContextHolder</code> &#36127;&#36131;&#25552;&#20379;&#26041;&#27861;&#21019;&#24314;&#24182;&#32500;&#25252;&#24403;&#21069;&#30340; <code>SecurityContext</code>&#12290;&#19978;&#19979;&#25991;&#20013;&#21253;&#21547;&#20102;&#24403;&#21069;&#29992;&#25143;&#30340;&#36523;&#20221;&#20449;&#24687;&#65292;&#29992; <code>Authentication</code> &#25509;&#21475;&#26469;&#34920;&#31034;&#65292;&#23427;&#21448;&#30001;&#19979;&#38754;&#30340;&#19977;&#37096;&#20998;&#20449;&#24687;&#32452;&#25104;&#12290;</p><ul>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><strong>&#29992;&#25143;&#20027;&#20307;&#20449;&#24687;</strong>&#65292;<code>Authentication</code> &#30452;&#25509;&#32487;&#25215;&#20102; <code>Principal</code> &#25509;&#21475;&#65292;&#21487;&#20197;&#26681;&#25454;&#35268;&#33539;&#36820;&#22238;&#29992;&#25143;&#20449;&#24687;&#65292;<code>getPrincipal()</code> &#26041;&#27861;&#36820;&#22238;&#20219;&#24847;&#30340; <code>Object</code>&#65292;&#36890;&#24120;&#36825;&#37324;&#20250;&#20351;&#29992; <code>UserDetails</code>&#12290;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><strong>&#35777;&#26126;&#20449;&#24687;</strong>&#65292;&#22312;&#29992;&#25143;&#21517;&#19982;&#23494;&#30721;&#20570;&#35748;&#35777;&#30340;&#22330;&#26223;&#19979;&#65292;&#35777;&#26126;&#20449;&#24687;&#36890;&#24120;&#23601;&#26159;&#23494;&#30721;&#65292;&#22312;&#36523;&#20221;&#35748;&#35777;&#36890;&#36807;&#21518;&#20250;&#28165;&#38500;&#35813;&#20449;&#24687;&#65292;&#36991;&#20813;&#20449;&#24687;&#27844;&#38706;&#12290;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><strong>&#26435;&#38480;&#20449;&#24687;</strong>&#65292;&#30001; <code>GrantedAuthority</code> &#25509;&#21475;&#26469;&#34920;&#31034;&#65292;&#25551;&#36848;&#20102;&#24403;&#21069;&#29992;&#25143;&#26159;&#20160;&#20040;&#35282;&#33394;&#30340;&#65292;&#33021;&#20570;&#20160;&#20040;&#12290;</li>
</ul><p><code>Authentication</code> &#37324;&#20960;&#20046;&#24050;&#32463;&#21253;&#21547;&#20102;&#25105;&#20204;&#38656;&#35201;&#30340;&#25152;&#26377;&#20449;&#24687;&#65292;&#22240;&#27492;&#65292;&#25972;&#20010;&#36807;&#31243;&#20013;&#26368;&#37325;&#35201;&#30340;&#21160;&#20316;&#23601;&#26159;&#22914;&#20309;&#21462;&#24471;&#24403;&#21069;&#29992;&#25143;&#30340; <code>Authentication</code>&#65292;&#24182;&#23558;&#20854;&#35774;&#32622;&#21040; <code>SecurityContext</code> &#37324;&#12290;<code>AuthenticationManager</code> &#25509;&#21475;&#23450;&#20041;&#20102; Spring Security &#24212;&#35813;&#22914;&#20309;&#36827;&#34892;&#36523;&#20221;&#35748;&#35777;&#65292;<code>ProviderManager</code> &#21017;&#26159;&#20854;&#26368;&#24120;&#29992;&#30340;&#23454;&#29616;&#65292;&#20854;&#20013;&#20250;&#26377;&#24456;&#22810; <code>AuthenticationProvider</code> &#26469;&#36827;&#34892;&#20855;&#20307;&#30340;&#36523;&#20221;&#39564;&#35777;&#21028;&#26029;&#65292;&#20363;&#22914;&#22522;&#20110;&#25968;&#25454;&#24211;&#20570;&#21028;&#26029;&#23601;&#29992; <code>DaoAuthenticationProvider</code>&#12290;&#36523;&#20221;&#35748;&#35777;&#26426;&#21046;&#20013;&#19968;&#20123;&#20027;&#35201;&#25509;&#21475;&#19982;&#31867;&#30340;&#20851;&#31995;&#22914;&#22270; 10-2 &#25152;&#31034;&#12290;</p><p class="&#22270;"><img alt="{%}" src="file:///[PrimaryStorage]local_pic/XueTouSpring_CongRuMenDaoXiangMuShiZhan/image00780.jpeg"/></p><p class="p-img-title"><strong>&#22270; 10-2&#12288;&#36523;&#20221;&#35748;&#35777;&#26426;&#21046;&#20013;&#19968;&#20123;&#20027;&#35201;&#25509;&#21475;&#19982;&#31867;&#30340;&#20851;&#31995;</strong></p><h3 id="nav_point_155">10.2.2&#12288;&#22522;&#20110;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#30340;&#36523;&#20221;&#35748;&#35777;</h3><p>&#22312; Spring Boot &#39033;&#30446;&#20013;&#65292;&#21487;&#20197;&#24341;&#20837; spring-boot-starter-security &#24555;&#36895;&#23454;&#29616;&#31616;&#21333;&#30340;&#36523;&#20221;&#35748;&#35777;&#21151;&#33021;&#65292;&#19982;&#27492;&#21516;&#26102;&#65292;&#26694;&#26550;&#20063;&#32473;&#25105;&#20204;&#30041;&#36275;&#20102;&#37197;&#32622;&#39033;&#21644;&#25193;&#23637;&#28857;&#65292;&#33021;&#28385;&#36275;&#22823;&#37096;&#20998;&#30340;&#23433;&#20840;&#35748;&#35777;&#38656;&#27714;&#12290;</p><ol>
<li><p><strong>&#36890;&#36807; Spring Boot &#30340;&#33258;&#21160;&#37197;&#32622;&#23454;&#29616;&#36523;&#20221;&#35748;&#35777;</strong></p>
<p>Spring Boot &#25552;&#20379;&#30340;&#33258;&#21160;&#37197;&#32622;&#21253;&#21547; HTTP &#34920;&#21333;&#35748;&#35777;&#19982; HTTP Basic &#35748;&#35777;&#65292;&#22312; pom.xml &#20013;&#28155;&#21152;&#22914;&#19979;&#20381;&#36182;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
&lt;/dependency&gt;</code></pre>
<p>&#21551;&#21160;&#31243;&#24207;&#21518;&#65292;&#22312;&#36755;&#20986;&#30340;&#26085;&#24535;&#20013;&#33021;&#30475;&#21040;&#31867;&#20284;&#19979;&#38754;&#36825;&#26679;&#30340;&#19968;&#27573;&#36755;&#20986;&#65292;&#36825;&#26159; Spring Boot &#30340;&#33258;&#21160;&#37197;&#32622;&#31867; <code>SecurityProperties.User</code> &#20013;&#29992; UUID &#29983;&#25104;&#30340;&#19968;&#27573;&#23494;&#30721;&#65292;&#23545;&#24212;&#30340;&#29992;&#25143;&#21517;&#40664;&#35748;&#26159; <code>user</code>&#65292;&#29992; UUID &#20570;&#23494;&#30721;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>Using generated security password: 40e5d02a-de50-46d6-97a6-970252c35d57</code></pre>
<p>&#22312;&#27983;&#35272;&#22120;&#20013;&#65292;&#22914;&#26524;&#35775;&#38382; http://localhost:8080/order &#39029;&#38754;&#65292;&#20250;&#34987; <code>302 Found</code> &#37325;&#23450;&#21521;&#21040; Spring Security &#25552;&#20379;&#30340;&#40664;&#35748;&#30331;&#24405;&#39029;&#38754;&#65307;&#22914;&#26524;&#29992; curl<span class="&#27880;&#37322;&#32534;&#21495;">3</span> &#21629;&#20196;&#65292;&#21017;&#20250;&#30475;&#21040; <code>401 Unauthorized</code> &#36820;&#22238;&#30721;&#65306;<span class="&#27880;&#37322;&#32534;&#21495;">4</span></p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&#9656; curl -v http://localhost:8080/order

&lt; HTTP/1.1 401
&lt; Set-Cookie: JSESSIONID=3BB3C245CC937AF15B48DB2D1C07DE6F; Path=/; HttpOnly
&lt; WWW-Authenticate: Basic realm="Realm"
&lt; X-Content-Type-Options: nosniff
&lt; X-XSS-Protection: 1; mode=block
&lt; Cache-Control: no-cache, no-store, max-age=0, must-revalidate
&lt; Pragma: no-cache
&lt; Expires: 0
&lt; X-Frame-Options: DENY
&lt; Content-Type: application/json
&lt; Transfer-Encoding: chunked
&lt; Date: Sun, 10 Jan 2021 13:48:50 GMT
&lt;
* Connection #0 to host localhost left intact
{"timestamp":"2021-01-10T13:48:50.763+00:00","status":401,"error":"Unauthorized","message":"","path":
"/order"}* Closing connection 0</code></pre>
<p>&#21487;&#20197;&#22312;&#30331;&#24405;&#39029;&#38754;&#20013;&#36755;&#20837;&#29992;&#25143;&#21517;&#36827;&#34892;&#30331;&#24405;&#65292;&#22914;&#26524;&#26159; curl &#21629;&#20196;&#21017;&#29992;&#19979;&#38754;&#30340;&#21629;&#20196;&#25552;&#20379; HTTP Basic &#35748;&#35777;&#25152;&#38656;&#30340;&#20449;&#24687;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&#9656; curl -v -u user:40e5d02a-de50-46d6-97a6-970252c35d57 http://localhost:8080/order</code></pre>
<p>&#22914;&#26524;&#27599;&#27425;&#37117;&#24517;&#39035;&#20351;&#29992;&#40664;&#35748;&#30340;&#29992;&#25143;&#21517;&#21644;&#33258;&#21160;&#29983;&#25104;&#30340;&#23494;&#30721;&#65292;&#37027;&#26410;&#20813;&#20063;&#22826;&#19981;&#26041;&#20415;&#20102;&#12290;&#26082;&#28982;&#26159; <code>SecurityProperties</code> &#37324;&#30340;&#23646;&#24615;&#65292;&#37027;&#24517;&#28982;&#21487;&#20197;&#36890;&#36807;&#37197;&#32622;&#26469;&#36827;&#34892;&#35774;&#32622;&#12290;&#21487;&#20197;&#22312; <code>application.properties</code> &#20013;&#37197;&#32622;&#19979;&#38754;&#30340;&#23646;&#24615;&#65292;&#23558;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#21464;&#25104;&#25105;&#20204;&#25351;&#23450;&#30340;&#20869;&#23481;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>spring.security.user.name=binarytea
spring.security.user.password=showmethemoney</code></pre>
<blockquote>
<p><strong>&#33590;&#27463;&#26102;&#38388;&#65306;&#20351;&#29992; Spring Security &#21152;&#23494;&#20445;&#23384;&#23494;&#30721;</strong></p>
<p>&#25105;&#20204;&#22312;&#39033;&#30446;&#20013;&#24341;&#20837; Spring Security&#65292;&#23601;&#26159;&#20026;&#20102;&#22686;&#24378;&#39033;&#30446;&#30340;&#23433;&#20840;&#24615;&#65292;&#23545;&#23494;&#30721;&#30340;&#20445;&#25252;&#20063;&#26159;&#23433;&#20840;&#24037;&#20316;&#30340;&#19968;&#37096;&#20998;&#12290;&#30001;&#20110;&#23494;&#30721;&#27844;&#38706;&#32780;&#36896;&#25104;&#30340;&#23433;&#20840;&#38382;&#39064;&#25968;&#19981;&#32988;&#25968;&#65292;&#22240;&#32780;&#19981;&#24314;&#35758;&#30452;&#25509;&#29992;&#26126;&#25991;&#26041;&#24335;&#26469;&#20445;&#23384;&#23494;&#30721;&#12290;&#22909;&#22312; Spring Security &#25552;&#20379;&#20102; <code>PasswordEncoder</code> &#25509;&#21475;&#65292;&#25105;&#20204;&#21487;&#20197;&#29992;&#20854; <code>encode()</code> &#26041;&#27861;&#23545;&#26126;&#25991;&#36827;&#34892;&#32534;&#30721;&#65292;&#29992; <code>matches()</code> &#26041;&#27861;&#27604;&#36739;&#26126;&#25991;&#21644;&#32534;&#30721;&#21518;&#30340;&#20869;&#23481;&#12290;&#22312;&#21019;&#24314; Spring Security &#30340; <code>User</code> &#23545;&#35937;&#26102;&#65292;&#20063;&#33021;&#25351;&#23450;&#35201;&#20351;&#29992;&#30340; <code>PasswordEncoder</code>&#65292;&#30452;&#25509;&#22312;&#35774;&#32622;&#23494;&#30721;&#26102;&#33258;&#21160;&#36827;&#34892;&#23494;&#30721;&#32534;&#30721;&#12290;</p>
<p>&#22312; 5.0 &#29256;&#26412;&#21069;&#65292;&#40664;&#35748;&#30340;&#23454;&#29616;&#26159; <code>NoOpPasswordEncoder</code>&#65292;&#23545;&#24212;&#30340;&#23383;&#31526;&#20018;&#21069;&#32512;&#26159; <code>{noop}</code>&#12290;&#36890;&#36807; <code>PasswordEncoderFactories.createDelegatingPasswordEncoder()</code> &#21487;&#20197;&#21019;&#24314;&#19968;&#20010;&#21253;&#21547;&#22823;&#37327;&#31639;&#27861;&#30340; <code>DelegatingPasswordEncoder</code> &#23454;&#20363;&#65292;&#20855;&#20307;&#35265;&#34920; 10-3&#12290;</p>
<p><strong>&#34920; 10-3&#12288;&#40664;&#35748;&#21019;&#24314;&#30340; <code>DelegatingPasswordEncoder</code> &#25152;&#20195;&#29702;&#30340; <code>PasswordEncoder</code></strong></p>
<table border="1" class="table table-bordered table-striped table-condensed" width="90%"><tr><th>&#21069;&#32512;</th><th>&#23545;&#24212;&#30340; <code>PasswordEncoder</code> &#23454;&#29616;</th></tr><tr><td><code>{noop}</code></td><td><code>NoOpPasswordEncoder</code></td></tr><tr><td><code>{bcrypt}</code></td><td><code>BCryptPasswordEncoder</code></td></tr><tr><td><code>{pbkdf2}</code></td><td><code>Pbkdf2PasswordEncoder</code></td></tr><tr><td><code>{scrypt}</code></td><td><code>SCryptPasswordEncoder</code></td></tr><tr><td><code>{SHA-1}</code></td><td><code>MessageDigestPasswordEncoder</code></td></tr><tr><td><code>{SHA-256}</code></td><td><code>MessageDigestPasswordEncoder</code></td></tr><tr><td><code>{sha256}</code></td><td><code>StandardPasswordEncoder</code></td></tr><tr><td><code>{MD4}</code></td><td><code>MessageDigestPasswordEncoder</code></td></tr><tr><td><code>{MD5}</code></td><td><code>MessageDigestPasswordEncoder</code></td></tr><tr><td><code>{ldap}</code></td><td><code>LdapShaPasswordEncoder</code></td></tr><tr><td><code>{argon2}</code></td><td><code>Argon2PasswordEncoder</code></td></tr></table>
<p>&#22914;&#26524;&#25105;&#20204;&#24076;&#26395;&#37197;&#32622;&#24050;&#32534;&#30721;&#30340;&#23494;&#30721;&#65292;&#21487;&#20197;&#36890;&#36807;&#20195;&#30721;&#20107;&#20808;&#21152;&#23494;&#65292;&#20063;&#21487;&#20197;&#31616;&#21333;&#19968;&#20123;&#65292;&#20351;&#29992; Spring Boot &#30340; CLI &#21629;&#20196;&#34892;&#24037;&#20855; <span class="&#27880;&#37322;&#32534;&#21495;">5</span>&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&#9656; spring encodepassword plaintext
{bcrypt}$2a$10$GUextEAokHFRL7vWGk6sqOE8RKyiXD1tnPLJxpqlvBfur4BXzvOSG</code></pre>
<p>&#20063;&#21487;&#20197;&#29992; <code>-a</code> &#25351;&#23450;&#31639;&#27861;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&#9656; spring encodepassword -a pbkdf2 plaintext
a40a2a9e11f7a85db0c2c3b508d096138fb38c4ae8fb7e6452f821fdd309496d9c4810b6e984614c</code></pre>
</blockquote>
<p>&#160;</p>
</li>
<li><p><strong>&#33258;&#23450;&#20041;&#36523;&#20221;&#35748;&#35777;&#32454;&#33410;</strong></p>
<p>&#36890;&#36807;&#21069;&#38754;&#30340;&#33258;&#21160;&#37197;&#32622;&#65292;&#25105;&#20204;&#24050;&#32463;&#23454;&#29616;&#20102;&#22522;&#26412;&#30340;&#36523;&#20221;&#35748;&#35777;&#38656;&#27714;&#65292;&#22312;&#35775;&#38382;&#22823;&#37096;&#20998;&#39029;&#38754;&#21644;&#25509;&#21475;&#21069;&#65288;&#38500;&#20102;&#30331;&#24405;&#21644;&#36864;&#20986;&#39029;&#65289;&#65292;&#37117;&#24517;&#39035;&#20808;&#30331;&#24405;&#12290;&#20294;&#33258;&#21160;&#37197;&#32622;&#19981;&#26159;&#19975;&#33021;&#30340;&#65292;&#24635;&#20250;&#26377;&#20123;&#22320;&#26041;&#38656;&#35201;&#25105;&#20204;&#20570;&#20010;&#24615;&#21270;&#23450;&#21046;&#65292;&#20363;&#22914;&#65292;&#25105;&#20204;&#24076;&#26395;&#26377;&#20123; URL &#33021;&#31105;&#29992;&#24378;&#21046;&#30331;&#24405;&#12290;</p>
<p>&#21487;&#20197;&#22312;&#20195;&#30721;&#20013;&#32534;&#20889;&#19968;&#20010;&#32487;&#25215;&#20102; <code>WebSecurityConfigurerAdapter</code> &#31867;&#30340;&#37197;&#32622;&#31867;&#65292;&#21516;&#26102;&#22312;&#19978;&#38754;&#22686;&#21152; <code>@EnableWebSecurity</code> &#27880;&#35299;&#12290;&#20195;&#30721;&#31034;&#20363; 10-1 &#23601;&#23558; /menu &#36335;&#24452;&#24443;&#24213;&#25918;&#24320;&#20102;&#65292;&#20801;&#35768;&#25152;&#26377;&#20154;&#26469;&#35775;&#38382;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">6</span></p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-1</strong>&#12288;&#20010;&#24615;&#21270;&#30340;&#36523;&#20221;&#35748;&#35777;&#37197;&#32622;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers("/menu").permitAll()
            .anyRequest().authenticated().and()
            .formLogin().and() // &#20351;&#29992;&#34920;&#21333;&#30331;&#24405;
            .httpBasic(); // &#20351;&#29992;HTTP Basic&#35748;&#35777;
    }
}</code></pre>
<p>&#22914;&#26524;&#21482;&#24076;&#26395;&#25552;&#20379; HTTP Basic &#30340;&#26041;&#24335;&#65292;&#21487;&#20197;&#23558;&#19978;&#38754;&#20195;&#30721;&#20013;&#30340; <code>formLogin()</code> &#35843;&#29992;&#21435;&#25481;&#12290;&#20854;&#23454;&#65292;&#22312;&#36935;&#21040;&#26410;&#30331;&#24405;&#30340;&#24773;&#20917;&#26102;&#65292;&#31350;&#31455;&#37319;&#29992;&#20309;&#31181;&#26041;&#24335;&#24212;&#23545;&#65292;&#25552;&#20379;&#20160;&#20040;&#20837;&#21475;&#65292;&#26159;&#30001; <code>AuthenticationEntryPoint</code> &#25509;&#21475;&#26469;&#20915;&#23450;&#30340;&#12290;&#20363;&#22914;&#65292;<code>LoginUrlAuthenticationEntryPoint</code> &#23601;&#20250;&#23558;&#27983;&#35272;&#22120;&#37325;&#23450;&#21521;&#21040;&#30331;&#24405;&#39029; URL&#65307;&#32780; <code>BasicAuthenticationEntryPoint</code> &#21017;&#20250;&#36820;&#22238; <code>401 Unauthorized</code> &#21709;&#24212;&#30721;&#65292;&#28155;&#21152; <code>WWW-Authenticate</code> &#22836;&#65292;&#20351;&#29992; HTTP Basic &#35748;&#35777;&#26041;&#24335;&#12290;</p>
<p>&#22312;&#20351;&#29992;&#30331;&#24405;&#34920;&#21333;&#35748;&#35777;&#26102;&#65292;&#25105;&#20204;&#20043;&#21069;&#30475;&#21040;&#30340; <code>/login</code> &#39029;&#38754;&#26159; Spring Security &#25552;&#20379;&#30340;&#40664;&#35748;&#30331;&#24405;&#39029;&#65292;&#36825;&#20010;&#39029;&#38754;&#26159;&#36890;&#36807; <code>DefaultLoginPageGeneratingFilter</code> &#26469;&#29983;&#25104;&#30340;&#12290;&#22914;&#26524;&#26597;&#30475;&#23427;&#30340;&#28304;&#30721;&#65292;&#20320;&#20250;&#21457;&#29616;&#36825;&#20010;&#39029;&#38754;&#22522;&#26412;&#23601;&#26159;&#38752;&#23383;&#31526;&#20018;&#25340;&#25509;&#20986;&#26469;&#30340;&#12290;&#19981;&#36807;&#65292;&#23601;&#31639;&#36825;&#20040;&#19968;&#20010;&#39029;&#38754;&#65292;Spring Security &#20063;&#32473;&#25105;&#20204;&#30041;&#36275;&#20102;&#37197;&#32622;&#39033;&#65292;&#19968;&#20123;&#24120;&#29992;&#30340;&#37197;&#32622;&#22914;&#34920; 10-4 &#25152;&#31034;&#12290;</p>
<p><strong>&#34920; 10-4&#12288;<code>formLogin()</code> &#25552;&#20379;&#30340;&#19968;&#20123;&#24120;&#29992;&#37197;&#32622;</strong></p>
<table border="1" class="table table-bordered table-striped table-condensed" width="90%"><tr><th>&#37197;&#32622;&#26041;&#27861;</th><th>&#20316;&#29992;</th></tr><tr><td><code>usernameParameter()</code></td><td>&#37197;&#32622;&#34920;&#21333;&#20013;&#30340;&#29992;&#25143;&#21517;&#23383;&#27573;</td></tr><tr><td><code>passwordParameter()</code></td><td>&#37197;&#32622;&#34920;&#21333;&#20013;&#30340;&#23494;&#30721;&#23383;&#27573;</td></tr><tr><td><code>defaultSuccessUrl()</code></td><td>&#30331;&#24405;&#25104;&#21151;&#21518;&#36339;&#36716;&#30340; URL</td></tr><tr><td><code>failureUrl()</code></td><td>&#30331;&#24405;&#22833;&#36133;&#21518;&#36339;&#36716;&#30340; URL</td></tr><tr><td><code>loginProcessingUrl()</code></td><td>&#25552;&#20132;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#21040;&#27492;&#22788;&#25351;&#23450;&#30340; URL &#36827;&#34892;&#36523;&#20221;&#35748;&#35777;</td></tr><tr><td><code>loginPage()</code></td><td>&#25351;&#23450;&#33258;&#24049;&#30340;&#30331;&#24405;&#39029;&#65292;&#22914;&#26524;&#35774;&#32622;&#20102;&#36825;&#20010;&#37197;&#32622;&#65292;&#23601;&#19981;&#20250;&#20877;&#26377;&#40664;&#35748;&#30340;&#30331;&#24405;&#39029;&#20102;</td></tr></table>
<p>&#20195;&#30721;&#31034;&#20363; 10-2 &#26159;&#33258;&#23450;&#20041;&#30331;&#24405;&#39029;&#38754;&#37197;&#32622;&#30340;&#19968;&#20010;&#28436;&#31034;&#65292;&#35774;&#32622;&#20102;&#30331;&#24405;&#25104;&#21151;&#19982;&#22833;&#36133;&#30340; URL&#65292;&#23450;&#21046;&#20102;&#34920;&#21333;&#20013;&#30340;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#23383;&#27573;&#65292;&#36824;&#20462;&#25913;&#20102;&#22788;&#29702;&#30331;&#24405;&#35831;&#27714;&#30340; URL&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">7</span> &#22312;&#35774;&#32622;&#25918;&#34892; URL &#26102;&#65292;&#36825;&#37324;&#20998;&#21035;&#28436;&#31034;&#20102;&#20351;&#29992; ANT &#21305;&#37197;&#22120;&#21644; MVC &#21305;&#37197;&#22120;&#30340;&#26041;&#27861;&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-2</strong>&#12288;&#33258;&#23450;&#20041;&#30331;&#24405;&#34920;&#21333;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
        .antMatchers("/").permitAll()
        .mvcMatchers("/actuator/*").permitAll()
        .anyRequest().authenticated().and()
        .formLogin() // &#20351;&#29992;&#34920;&#21333;&#30331;&#24405;
        .defaultSuccessUrl("/order")
        .failureUrl("/login")
        .loginProcessingUrl("/doLogin")
        .usernameParameter("user")
        .passwordParameter("pwd").and()
        .httpBasic(); // &#20351;&#29992;HTTP Basic&#35748;&#35777;
}</code></pre>
<p>Spring Security &#30340;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#30331;&#24405;&#65292;&#40664;&#35748;&#26159;&#30001; <code>UsernamePasswordAuthenticationFilter</code> &#26469;&#23454;&#29616;&#30340;&#65292;&#20854;&#20013;&#26368;&#20027;&#35201;&#30340;&#24037;&#20316;&#23601;&#26159;&#21462;&#24471;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#65292;&#28982;&#21518;&#36890;&#36807; <code>AuthenticationManager</code> &#26469;&#23454;&#26045;&#20855;&#20307;&#30340;&#36523;&#20221;&#35748;&#35777;&#21160;&#20316;&#65292;<code>UsernamePasswordAuthenticationFilter</code> &#20013;&#22823;&#27010;&#30340;&#22788;&#29702;&#36923;&#36753;&#22914;&#19979;&#25152;&#31034;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException {
    // 1.POST&#26657;&#39564;
    // 2.&#33719;&#24471;&#29992;&#25143;&#21517;&#19982;&#23494;&#30721;&#25805;&#20316;
    // 3.&#29983;&#25104;AuthenticationToken
    UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(username, password);
    setDetails(request, authRequest);
    // 4.&#36890;&#36807;AuthenticationManager&#36827;&#34892;&#35748;&#35777;
    return this.getAuthenticationManager().authenticate(authRequest);
}</code></pre>
<p>&#22914;&#26524;&#35748;&#35777;&#25104;&#21151;&#65292;&#38656;&#35201;&#8220;&#35760;&#20303;&#25105;&#8221;<span class="&#27880;&#37322;&#32534;&#21495;">8</span> &#30340;&#23601;&#20570;&#23545;&#24212;&#35760;&#20303;&#30340;&#21160;&#20316;&#65292;&#38543;&#21518;&#20351;&#29992; <code>AuthenticationEventPublisher</code> &#21457;&#36865;&#35748;&#35777;&#25104;&#21151;&#30340;&#20107;&#20214;&#65292;&#20877;&#35843;&#29992; <code>AuthenticationSuccessHandler</code> &#20570;&#30331;&#24405;&#25104;&#21151;&#21518;&#30340;&#22788;&#29702;&#12290;&#22914;&#26524;&#30331;&#24405;&#22833;&#36133;&#65292;&#28165;&#38500;&#20043;&#21069;&#20445;&#30041;&#30340;&#30331;&#24405;&#20449;&#24687;&#65292;&#35843;&#29992; <code>AuthenticationFailureHandler</code> &#20570;&#30331;&#24405;&#22833;&#36133;&#21518;&#30340;&#22788;&#29702;&#12290;</p>
<p>&#22312;&#20102;&#35299;&#20102;&#23450;&#21046;&#36523;&#20221;&#35748;&#35777;&#32454;&#33410;&#30340;&#26041;&#27861;&#20043;&#21518;&#65292;&#35753;&#25105;&#20204;&#26469;&#30475;&#30475;&#22914;&#20309;&#23558;&#20854;&#36816;&#29992;&#21040;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#20013;&#65292;&#20026;&#31995;&#32479;&#25552;&#20379;&#26356;&#22810;&#30340;&#38450;&#25252;&#33021;&#21147;&#12290;</p>
<blockquote>
<p><strong>&#38656;&#27714;&#25551;&#36848;</strong>&#12288;&#20026;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#25552;&#20379;&#19968;&#20010;&#30331;&#24405;&#30028;&#38754;&#12290;&#22902;&#33590;&#24215;&#30340;&#26681;&#39029;&#38754;&#65288;<code>/</code>&#65289;&#35841;&#37117;&#21487;&#20197;&#35775;&#38382;&#65292;&#20294;&#22914;&#26524;&#39038;&#23458;&#21040;&#24215;&#24076;&#26395;&#28857;&#21333;&#65292;&#23601;&#21482;&#33021;&#36890;&#36807;&#24215;&#21592;&#36827;&#34892;&#25805;&#20316;&#12290;&#25152;&#20197;&#19979;&#21333;&#39029;&#38754;&#65288;<code>/order</code>&#65289;&#21482;&#33021;&#26159;&#24215;&#21592;&#30331;&#24405;&#21518;&#25165;&#33021;&#35775;&#38382;&#12290;</p>
</blockquote>
<p>&#22312;&#23454;&#38469;&#29983;&#20135;&#29615;&#22659;&#20013;&#65292;&#25105;&#20204;&#24456;&#23569;&#30452;&#25509;&#20351;&#29992; Spring Security &#30340;&#40664;&#35748;&#30331;&#24405;&#39029;&#38754;&#65292;&#36890;&#24120;&#20250;&#33258;&#24049;&#20889;&#19968;&#20010;&#39029;&#38754;&#12290;&#22312;&#36890;&#36807; <code>loginPage()</code> &#35774;&#32622;&#20102;&#33258;&#24049;&#30340;&#30331;&#24405;&#39029; URL &#21518;&#65292;Spring Security &#23601;&#19981;&#20250;&#20877;&#20026;&#25105;&#20204;&#25552;&#20379;&#40664;&#35748;&#39029;&#38754;&#20102;&#65292;&#25105;&#20204;&#35201;&#33258;&#24049;&#36127;&#36131;&#22788;&#29702;&#23545;&#36825;&#20010; URL &#30340;&#35831;&#27714;&#12290;&#22312;&#20195;&#30721;&#31034;&#20363; 10-3 &#20013;&#65292;&#25105;&#20204;&#23450;&#20041;&#20102;&#33258;&#24049;&#30340; <code>/login</code> &#39029;&#38754;&#27169;&#26495;&#65292;&#20351;&#29992;&#30340;&#26159;&#31532; 10 &#31456;&#20013;&#29992;&#36807;&#30340; Thymeleaf &#27169;&#26495;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">9</span></p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-3</strong>&#12288;&#33258;&#23450;&#20041;&#30340;&#30331;&#24405;&#39029;&#38754;&#27169;&#26495;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&lt;!DOCTYPE html&gt;
&lt;html lang="zh_CN" xmlns:th="http://www.thymeleaf.org"&gt;
    &lt;head&gt;
        &lt;meta charset="UTF-8"&gt;
        &lt;title&gt;&#20108;&#36827;&#21046;&#22902;&#33590;&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;&#20108;&#36827;&#21046;&#22902;&#33590;&lt;/h1&gt;
        &lt;h2&gt;&#35831;&#30331;&#24405;&lt;/h2&gt;
        &lt;div&gt;
            &lt;form action="#" th:action="@{/doLogin}" method="post"&gt;
                &lt;p&gt;
                    &lt;label&gt;&#29992;&#25143;&#21517;&#65306;&lt;/label&gt;
                    &lt;input type="text" name="user" placeholder="&#29992;&#25143;&#21517;" /&gt;
                &lt;/p&gt;
                &lt;p&gt;
                    &lt;label&gt;&#23494;&#30721;&#65306;&lt;/label&gt;
                    &lt;input type="password" name="pwd" placeholder="&#23494;&#30721;" /&gt;
                &lt;/p&gt;
                &lt;p th:if="${session['SPRING_SECURITY_LAST_EXCEPTION'] != null}"
                   th:with="errorMsg=${session['SPRING_SECURITY_LAST_EXCEPTION'].message}"
                   style="color:#ff0000"&gt;
                    &#30331;&#24405;&#22833;&#36133;&#65292;&#20855;&#20307;&#21407;&#22240;&#65306;
                    &lt;span th:text="${errorMsg}" style="color:#ff0000"&gt;&#22833;&#36133;&#21407;&#22240;&lt;/span&gt;
                &lt;/p&gt;
                &lt;p&gt;
                    &lt;input type="submit" value="&#25552;&#20132;"/&gt;
                &lt;/p&gt;
            &lt;/form&gt;
        &lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>&#36825;&#37324;&#26377;&#20960;&#28857;&#20869;&#23481;&#38656;&#35201;&#35828;&#26126;&#65306;</p>
<ul>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#34920;&#21333;&#25552;&#20132;&#30340;&#30446;&#26631;&#38656;&#35201;&#19982; <code>formLogin().loginProcessingUrl()</code> &#20013;&#35774;&#32622;&#30340;&#22320;&#22336;&#21305;&#37197;&#65292;&#40664;&#35748;&#26159; <code>/login</code>&#65307;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#29992;&#25143;&#21517;&#19982;&#23494;&#30721;&#34920;&#21333;&#39033;&#30340;&#21517;&#31216;&#38656;&#35201;&#19982; <code>formLogin().usernameParameter()</code> &#21644; <code>formLogin().passwordParameter()</code> &#21305;&#37197;&#65292;&#40664;&#35748;&#26159; <code>username</code> &#21644; <code>password</code>&#65307;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#22914;&#26524;&#30331;&#24405;&#22833;&#36133;&#65292;Spring Security &#20250;&#23558;&#24322;&#24120;&#25918;&#22312; Session &#30340; <code>SPRING_SECURITY_LAST_EXCEPTION</code> &#23646;&#24615;&#20013;&#65288;&#29992;&#25143;&#21517;&#23494;&#30721;&#38169;&#35823;&#26159; <code>BadCredentialsException</code>&#65289;&#65292;&#22240;&#27492;&#21487;&#20197;&#36890;&#36807;&#23427;&#26159;&#21542;&#20026;&#31354;&#26469;&#21028;&#26029;&#65292;<code>message</code> &#20013;&#20250;&#26377;&#20855;&#20307;&#30340;&#22833;&#36133;&#21407;&#22240;&#25551;&#36848;&#65307;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">Thymeleaf &#20250;&#33258;&#21160;&#20026;&#25105;&#20204;&#30340;&#34920;&#21333;&#24102;&#19978;&#19968;&#20010; CSRF Token&#65292;&#20851;&#20110; CSRF &#30340;&#20869;&#23481;&#20250;&#22312; 10.3 &#33410;&#20013;&#23637;&#24320;&#35828;&#26126;&#12290;</li>
</ul>
<p>&#20026;&#20102;&#20351;&#29992;&#36825;&#20010;&#30331;&#24405;&#39029;&#65292;&#25105;&#20204;&#30340;&#37197;&#32622;&#20063;&#35201;&#31245;&#20316;&#35843;&#25972;&#12290;&#30001;&#20110; <code>/login</code> &#22312;&#26174;&#31034;&#26102;&#24182;&#27809;&#26377;&#20160;&#20040;&#36923;&#36753;&#65292;&#21487;&#20197;&#30452;&#25509;&#29992; <code>UrlFilenameViewController</code> &#26469;&#20805;&#24403;&#25511;&#21046;&#22120;&#31867;&#65292;&#23427;&#33021;&#26681;&#25454;&#35831;&#27714;&#26144;&#23556;&#27169;&#26495;&#65292;Bean &#30340; ID &#23601;&#26159;&#35201;&#26144;&#23556;&#30340; URL&#12290;<code>formLogin().loginPage("/login").permitAll()</code> &#35774;&#32622;&#20102;&#35201;&#20351;&#29992;&#33258;&#23450;&#20041;&#30331;&#24405;&#39029;&#65292;&#25105;&#20204;&#36824;&#25913;&#20102;&#19968;&#20123;&#21442;&#25968;&#65292;&#20855;&#20307;&#20869;&#23481;&#35265;&#20195;&#30721;&#31034;&#20363; 10-4&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-4</strong>&#12288;&#20351;&#29992;&#33258;&#23450;&#20041;&#30331;&#24405;&#39029;&#30340;&#37197;&#32622;&#31867;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Bean("/login")
    public UrlFilenameViewController loginController() {
        UrlFilenameViewController controller = new UrlFilenameViewController();
        controller.setSupportedMethods(HttpMethod.GET.name());
        controller.setSuffix(".html");
        return controller;
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers("/").permitAll()
            .mvcMatchers("/actuator/*").permitAll()
            .anyRequest().authenticated().and()
            .formLogin() // &#20351;&#29992;&#34920;&#21333;&#30331;&#24405;
            .loginPage("/login").permitAll() // &#35774;&#32622;&#30331;&#24405;&#39029;&#22320;&#22336;&#65292;&#20840;&#21592;&#21487;&#35775;&#38382;
            .defaultSuccessUrl("/order")
            .failureUrl("/login")
            .loginProcessingUrl("/doLogin")
            .usernameParameter("user")
            .passwordParameter("pwd").and()
            .httpBasic(); // &#20351;&#29992;HTTP Basic&#35748;&#35777;
    }
}</code></pre>
<p>&#25105;&#20204;&#30340;&#30331;&#24405;&#39029;&#25928;&#26524;&#22914;&#22270; 10-3 &#25152;&#31034;&#12290;&#30456;&#27604;&#40664;&#35748;&#30340;&#39029;&#38754;&#65292;&#23427;&#30340;&#30830;&#26159;&#31616;&#21333;&#20102;&#19968;&#20123;&#12290;&#22312;&#23454;&#38469;&#29983;&#20135;&#31995;&#32479;&#20013;&#65292;&#39029;&#38754;&#36890;&#24120;&#37117;&#20250;&#21152;&#19978; CSS &#25928;&#26524;&#65292;&#19981;&#20250;&#36825;&#20040;&#31616;&#38475;&#12290;</p>
<p class="p-img"><img alt="{%}" src="file:///[PrimaryStorage]local_pic/XueTouSpring_CongRuMenDaoXiangMuShiZhan/image00781.jpeg"/></p>
<p class="p-img-title"><strong>&#22270; 10-3&#12288;&#33258;&#23450;&#20041;&#30331;&#24405;&#39029;</strong></p>
<p>&#160;</p>
</li>
<li><p><strong>&#22522;&#20110;&#25968;&#25454;&#24211;&#31649;&#29702;&#29992;&#25143;&#20449;&#24687;</strong></p>
<p>&#22914;&#26524;&#20165;&#20165;&#20381;&#38752;&#37197;&#32622;&#25991;&#20214;&#37197;&#32622;&#30340;&#29992;&#25143;&#20449;&#24687;&#65292;&#26159;&#26080;&#27861;&#24212;&#23545;&#29983;&#20135;&#29615;&#22659;&#30340;&#22797;&#26434;&#24615;&#30340;&#12290;&#25105;&#20204;&#23545;&#29992;&#25143;&#20307;&#31995;&#26377;&#30528;&#26356;&#39640;&#30340;&#35201;&#27714;&#65292;&#26368;&#36215;&#30721;&#20063;&#24471;&#23454;&#29616;&#19981;&#21516;&#29992;&#25143;&#33021;&#22815;&#20351;&#29992;&#19981;&#21516;&#36134;&#25143;&#36827;&#34892;&#30331;&#24405;&#65292;&#27599;&#20010;&#20154;&#37117;&#21487;&#20197;&#26377;&#19981;&#21516;&#30340;&#26435;&#38480;&#12290;&#36825;&#26102;&#23558;&#29992;&#25143;&#20449;&#24687;&#35760;&#24405;&#21040;&#25968;&#25454;&#24211;&#20013;&#30340;&#38656;&#27714;&#23601;&#20986;&#29616;&#20102;&#65292;&#32780;&#19988;&#25968;&#25454;&#24211;&#20013;&#30340;&#20449;&#24687;&#30456;&#27604;&#37197;&#32622;&#25991;&#20214;&#26356;&#26131;&#32500;&#25252;&#12290;</p>
<p>Spring Security &#20013;&#30340; <code>UserDetailsService</code> &#25552;&#20379;&#20102;&#29992;&#25143;&#20449;&#24687;&#26381;&#21153;&#30340;&#25277;&#35937;&#65292;&#35813;&#25509;&#21475;&#23601;&#21482;&#26377;&#19968;&#20010; <code>loadUserByUsername()</code> &#26041;&#27861;&#65292;&#26681;&#25454;&#29992;&#25143;&#21517;&#21152;&#36733;&#29992;&#25143;&#20449;&#24687;&#12290;&#21478;&#22806;&#30340; <code>UserDetailsManager</code> &#21017;&#25552;&#20379;&#20102;&#29992;&#25143;&#20449;&#24687;&#30340;&#22686;&#21152;&#12289;&#21024;&#38500;&#21644;&#20462;&#25913;&#26041;&#27861;&#12290;&#20004;&#20010;&#25509;&#21475;&#25645;&#37197;&#22312;&#19968;&#36215;&#23601;&#33021;&#23436;&#25104;&#20851;&#20110;&#29992;&#25143;&#30340;&#22686;&#21024;&#25913;&#26597;&#25805;&#20316;&#12290;</p>
<blockquote>
<p><strong>&#38656;&#27714;&#25551;&#36848;</strong>&#12288;&#38543;&#30528;&#26085;&#30410;&#22686;&#38271;&#30340;&#19994;&#21153;&#38656;&#35201;&#65292;&#22902;&#33590;&#24215;&#32856;&#35831;&#20102;&#22909;&#20960;&#20301;&#21592;&#24037;&#12290;&#21482;&#26377;&#19968;&#20010;&#36134;&#21495;&#30340;&#24773;&#20917;&#32943;&#23450;&#26159;&#19981;&#21512;&#36866;&#20102;&#65292;&#29616;&#22312;&#38656;&#35201;&#20026;&#27599;&#20010;&#21592;&#24037;&#20998;&#37197;&#19968;&#20010;&#36134;&#21495;&#65292;&#24182;&#19988;&#36134;&#21495;&#31995;&#32479;&#35201;&#26131;&#20110;&#32500;&#25252;&#12290;</p>
</blockquote>
<p>&#22312;&#20351;&#29992;&#20851;&#31995;&#22411;&#25968;&#25454;&#24211;&#20043;&#21069;&#65292;&#25105;&#20204;&#20808;&#26469;&#30475;&#30475;&#22914;&#20309;&#22312;&#20869;&#23384;&#20013;&#20445;&#23384;&#19981;&#21516;&#29992;&#25143;&#30340;&#20449;&#24687;&#65292;&#36825;&#26102;&#20250;&#29992;&#21040; <code>InMemoryUserDetailsManager</code>&#12290;&#22312;&#27809;&#26377;&#25552;&#20379; <code>UserDetailsService</code> &#26102;&#65292;Spring Boot &#30340;&#33258;&#21160;&#37197;&#32622;&#31867; <code>UserDetailsServiceAutoConfiguration</code> &#20250;&#33258;&#21160;&#20026;&#25105;&#20204;&#25552;&#20379;&#19968;&#20010; <code>InMemoryUserDetailsManager</code>&#65292;&#25152;&#20197;&#25105;&#20204;&#21482;&#38656;&#33258;&#24049;&#23450;&#20041;&#19968;&#20010;&#23601;&#21487;&#20197;&#20102;&#65292;&#23601;&#20687;&#20195;&#30721;&#31034;&#20363; 10-5 &#36825;&#26679;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">10</span></p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-5</strong>&#12288;&#22686;&#21152;&#20102; <code>InMemoryUserDetailsManager</code> &#30340;&#37197;&#32622;&#31867;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Bean
    public UserDetailsService userDetailsService(ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder) {
        PasswordEncoder encoder = passwordEncoder
                .getIfAvailable(() -&gt; PasswordEncoderFactories.createDelegatingPasswordEncoder());
        UserDetails employee = User.builder()
                                      .username("lilei")
                                      .password("binarytea")
                                      .authorities("READ_ORDER", "WRITE_ORDER")
                                      .passwordEncoder(encoder::encode)
                                      .build();
        return new InMemoryUserDetailsManager(employee);
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#22312;&#19978;&#38754;&#30340;&#20195;&#30721;&#20013;&#65292;&#25105;&#20204;&#20808;&#23581;&#35797;&#20174; Spring &#19978;&#19979;&#25991;&#20013;&#33719;&#21462; <code>PasswordEncoder</code>&#65292;&#22914;&#26524;&#27809;&#26377;&#25214;&#21040;&#21017;&#21019;&#24314;&#19968;&#20010;&#40664;&#35748;&#30340;&#12290;&#36890;&#36807; <code>User.UserBuilder</code> &#26469;&#26500;&#24314;&#29992;&#25143;&#20449;&#24687;&#65292;&#29992;&#25143;&#21517;&#12289;&#23494;&#30721;&#21644;&#26435;&#38480;&#26159;&#24517;&#38656;&#30340;&#12290;&#27492;&#22806;&#65292;&#25105;&#20204;&#36825;&#37324;&#25351;&#23450;&#20102; <code>PasswordEncoder</code> &#26469;&#21152;&#23494;&#23384;&#20648;&#23494;&#30721;&#65292;&#38543;&#21518;&#29992;&#36825;&#20010;&#29992;&#25143;&#26469;&#21021;&#22987;&#21270; <code>InMemoryUserDetailsManager</code>&#12290;<code>InMemoryUserDetailsManager</code> &#20013;&#21487;&#20197;&#31649;&#29702;&#22810;&#20010;&#29992;&#25143;&#65292;&#25105;&#20204;&#30340;&#20363;&#23376;&#23601;&#21482;&#25918;&#20102;&#19968;&#20010;&#32780;&#24050;&#12290;</p>
<p><code>InMemoryUserDetailsManager</code> &#36890;&#24120;&#29992;&#22312;&#31616;&#21333;&#30340;&#22330;&#26223;&#25110;&#32773;&#27979;&#35797;&#20013;&#12290;&#22312;&#22797;&#26434;&#30340;&#29983;&#20135;&#29615;&#22659;&#20013;&#65292;&#25105;&#20204;&#26356;&#20542;&#21521;&#20110;&#20351;&#29992; <code>JdbcUserDetailsManager</code>&#65292;&#23427;&#33021;&#22815;&#36890;&#36807; JDBC &#19982;&#20851;&#31995;&#22411;&#25968;&#25454;&#24211;&#36827;&#34892;&#20132;&#20114;&#65292;&#28385;&#36275;&#26356;&#22810;&#30340;&#35201;&#27714;&#12290;</p>
<p>&#26082;&#28982;&#26159;&#35201;&#29992;&#25968;&#25454;&#24211;&#30340;&#65292;&#37027;&#24517;&#28982;&#23601;&#23569;&#19981;&#20102;&#35201;&#21019;&#24314;&#23545;&#24212;&#30340;&#34920;&#32467;&#26500;&#65292;Spring Security &#22312; Jar &#21253;&#20013;&#25552;&#20379;&#20102;&#40664;&#35748;&#30340;&#34920;&#32467;&#26500; DDL &#25991;&#20214;&#65288;&#20301;&#32622;&#26159; org/springframework/security/core/userdetails/jdbc/users.ddl&#65289;&#65292;&#19981;&#36807;&#23427;&#24182;&#19981;&#35201;&#27714;&#25105;&#20204;&#20005;&#26684;&#36981;&#23432;&#36825;&#20010; DDL &#25991;&#20214;&#20013;&#30340;&#23450;&#20041;&#12290;&#22312;&#20043;&#21069;&#30340;&#31034;&#20363;&#20013;&#65292;&#25105;&#20204;&#24050;&#32463;&#29992;&#20102; H2 &#20869;&#23884;&#25968;&#25454;&#24211;&#65292;&#26377; schema.sql &#25991;&#20214;&#65292;&#25152;&#20197;&#25105;&#20204;&#21487;&#20197;&#25226;&#33258;&#24049;&#30340;&#29992;&#25143;&#21644;&#26435;&#38480;&#34920;&#23450;&#20041;&#21152;&#22312;&#21518;&#38754;&#65292;&#20855;&#20307;&#30340; SQL &#22914;&#20195;&#30721;&#31034;&#20363; 10-6 &#25152;&#31034;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">11</span></p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-6</strong>&#12288;&#36861;&#21152;&#22312; schema.sql &#21518;&#38754;&#30340;&#29992;&#25143;&#21644;&#26435;&#38480;&#34920;&#35821;&#21477;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>drop table if exists users;
drop table if exists authorities;

create table users(
    username varchar(50) not null primary key,
    password varchar(500) not null,
    enabled boolean not null
);

create table authorities (
    username varchar(50) not null,
    authority varchar(50) not null
);

create unique index ix_auth_username on authorities (username, authority);</code></pre>
<p>&#19978;&#38754;&#30340; SQL &#26159;&#26681;&#25454;&#40664;&#35748; DDL &#20462;&#25913;&#30340;&#65292;&#21435;&#25481;&#20102;&#22806;&#38190;&#65292;&#21407;&#20808;&#30340;&#23383;&#31526;&#20018;&#24573;&#30053;&#22823;&#23567;&#20889;&#65292;&#36825;&#37324;&#25105;&#20204;&#36824;&#26159;&#36873;&#25321;&#21306;&#21035;&#22823;&#23567;&#20889;&#12290;&#38543;&#21518;&#22312; data.sql &#20013;&#25554;&#20837;&#19968;&#26465;&#40664;&#35748;&#25968;&#25454;&#65292;&#23494;&#30721;&#29992; <code>spring encodepassword binarytea</code> &#20570;&#20102;&#21152;&#23494;&#65292;&#22914;&#20195;&#30721;&#31034;&#20363; 10-7 &#25152;&#31034;&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-7</strong>&#12288;&#39044;&#20808;&#25554;&#20837;&#30340;&#40664;&#35748;&#25968;&#25454;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>insert into users (username, password, enabled) values ('LiLei',
        '{bcrypt}$2a$10$iAty2GrJu9WfpksIen6qX.vczLmXlp.1q1OHBxWEX8BIldtwxHl3u', true);
insert into authorities (username, authority) values ('LiLei', 'READ_ORDER');
insert into authorities (username, authority) values ('LiLei', 'WRITE_ORDER');</code></pre>
<p>&#26368;&#21518;&#65292;&#22914;&#20195;&#30721;&#31034;&#20363; 10-8 &#37027;&#26679;&#20462;&#25913;&#19968;&#19979;&#37197;&#32622;&#31867;&#65292;&#25226; <code>UserDetailsService</code> &#30340; Bean &#25442;&#25104; <code>JdbcUserDetailsManager</code>&#65292;&#36825;&#37324;&#25105;&#20204;&#36824;&#28436;&#31034;&#20102;&#19968;&#19979;&#22914;&#20309;&#29992;&#20195;&#30721;&#21019;&#24314;&#19968;&#20010;&#29992;&#25143;&#65292;&#25918;&#20837; <code>JdbcUserDetailsManager</code>&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-8</strong>&#12288;&#20351;&#29992; <code>JdbcUserDetailsManager</code> &#26469;&#25552;&#20379;&#29992;&#25143;&#20449;&#24687;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Bean
    public UserDetailsService userDetailsService(ObjectProvider&lt;DataSource&gt; dataSources) {
        JdbcUserDetailsManager userDetailsManager = new JdbcUserDetailsManager();
        userDetailsManager.setDataSource(dataSources.getIfAvailable());
        UserDetails manager = User.builder().username("HanMeimei").password("{bcrypt}$2a$10$iAty2GrJu9Wf
            pksIen6qX.vczLmXlp.1q1OHBxWEX8BIldtwxHl3u").authorities("READ_ORDER", "WRITE_ORDER").build();
        userDetailsManager.createUser(manager);
    return userDetailsManager;
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#22914;&#26524;&#35814;&#32454;&#26597;&#30475; <code>JdbcUserDetailsManager</code> &#30340;&#20195;&#30721;&#65292;&#25105;&#20204;&#20250;&#21457;&#29616;&#65292;&#23427;&#20869;&#37096;&#20854;&#23454;&#20869;&#32622;&#20102;&#24456;&#22810;&#19981;&#21516;&#25805;&#20316;&#25152;&#38656;&#30340; SQL &#35821;&#21477;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>    public static final String DEF_CREATE_USER_SQL = "insert into users (username, password, enabled)
        values (?,?,?)";
    public static final String DEF_DELETE_USER_SQL = "delete from users where username = ?";
    public static final String DEF_UPDATE_USER_SQL = "update users set password = ?, enabled = ? where username = ?";
    public static final String DEF_INSERT_AUTHORITY_SQL = "insert into authorities (username, authority)
        values (?,?)";
    public static final String DEF_DELETE_USER_AUTHORITIES_SQL = "delete from authorities where username = ?";
    public static final String DEF_USER_EXISTS_SQL = "select username from users where username = ?";
    public static final String DEF_CHANGE_PASSWORD_SQL = "update users set password = ? where username = ?";</code></pre>
<p>&#22914;&#26524;&#25105;&#20204;&#20462;&#25913;&#20102;&#34920;&#21517;&#25110;&#32773;&#34920;&#32467;&#26500;&#65292;&#19981;&#29992;&#23436;&#20840;&#37325;&#20889;&#36825;&#20010;&#23454;&#29616;&#31867;&#65292;&#21482;&#38656;&#36890;&#36807;&#23545;&#24212;&#30340;&#26041;&#27861;&#25226;&#22686;&#21024;&#25913;&#26597;&#30456;&#20851;&#30340; SQL &#35821;&#21477;&#25913;&#20102;&#23601;&#21487;&#20197;&#12290;&#27492;&#22806;&#65292;<code>JdbcUserDetailsManager</code> &#36824;&#25903;&#25345;&#29992;&#25143;&#32452;&#30456;&#20851;&#30340;&#27010;&#24565;&#21644;&#25805;&#20316;&#65292;&#23454;&#29616;&#26041;&#24335;&#20063;&#26159;&#22312;&#25968;&#25454;&#24211;&#20013;&#22686;&#21152;&#20102;&#29992;&#25143;&#32452;&#30340;&#34920;&#65292;&#24182;&#20869;&#32622;&#20102;&#30456;&#20851; SQL &#35821;&#21477;&#65292;&#36825;&#37096;&#20998;&#20869;&#23481;&#23601;&#19981;&#22312;&#26412;&#20070;&#20013;&#23637;&#24320;&#20102;&#12290;</p>
<p>&#160;</p>
</li>
<li><p><strong>&#36864;&#20986;&#25805;&#20316;</strong></p>
<p>&#26082;&#28982;&#26377;&#30331;&#24405;&#25805;&#20316;&#65292;&#37027;&#33258;&#28982;&#20063;&#26377;&#23545;&#24212;&#30340;&#36864;&#20986;&#25805;&#20316;&#12290;<code>WebSecurityConfigurerAdapter</code> &#40664;&#35748;&#25552;&#20379;&#20102; <code>/logout</code> &#36825;&#20010; URL &#26469;&#22788;&#29702;&#36864;&#20986;&#30340;&#35831;&#27714;&#65292;&#23427;&#20027;&#35201;&#20570;&#20102;&#22914;&#19979;&#28165;&#29702;&#21160;&#20316;&#65306;</p>
<ul>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#28165;&#29702; HTTP Session&#65307;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#28165;&#29702;&#8220;&#35760;&#20303;&#25105;&#8221;&#30456;&#20851;&#30340;&#20449;&#24687;&#65307;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#28165;&#29702;&#20445;&#23384;&#20102;&#24403;&#21069;&#29992;&#25143;&#20449;&#24687;&#30340; <code>SecurityContextHolder</code>&#65307;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#37325;&#23450;&#21521;&#21040; <code>/login?logout</code>&#12290;</li>
</ul>
<p>&#21644; <code>formLogin()</code> &#31867;&#20284;&#65292;<code>logout()</code> &#20063;&#26377;&#24456;&#22810;&#21487;&#20197;&#23450;&#21046;&#30340;&#37197;&#32622;&#26041;&#27861;&#65292;&#34920; 10-5 &#25552;&#20379;&#20102;&#19968;&#20123;&#24120;&#29992;&#30340;&#37197;&#32622;&#26041;&#27861;&#12290;</p>
<p><strong>&#34920; 10-5&#12288;<code>logout()</code> &#25552;&#20379;&#30340;&#19968;&#20123;&#24120;&#29992;&#37197;&#32622;&#26041;&#27861;</strong></p>
<table border="1" class="table table-bordered table-striped table-condensed" width="90%"><tr><th>&#37197;&#32622;&#26041;&#27861;</th><th>&#20316;&#29992;</th></tr><tr><td><code>logoutUrl()</code></td><td>&#35302;&#21457;&#36864;&#20986;&#25805;&#20316;&#30340; URL&#65292;&#40664;&#35748;&#26159; <code>/logout</code></td></tr><tr><td><code>logoutSuccessUrl()</code></td><td>&#25104;&#21151;&#36864;&#20986;&#21518;&#36339;&#36716;&#30340; URL</td></tr><tr><td><code>logoutSuccessHandler()</code></td><td>&#25351;&#23450;&#33258;&#23450;&#20041;&#30340; <code>LogoutSuccessHandler</code>&#65292;&#26377;&#36825;&#20010;&#35774;&#32622; <code>logoutSuccessUrl()</code> &#20250;&#22833;&#25928;</td></tr><tr><td><code>invalidateHttpSession()</code></td><td>&#26159;&#21542;&#28165;&#29702; HTTP Session</td></tr><tr><td><code>deleteCookies()</code></td><td>&#26159;&#21542;&#21024;&#38500; Cookies</td></tr><tr><td><code>addLogoutHandler()</code></td><td>&#28155;&#21152; <code>LogoutHandler</code>&#65292;Spring Security &#26377;&#22909;&#22810;&#35813;&#25509;&#21475;&#30340;&#23454;&#29616;&#65292;&#40664;&#35748; <code>SecurityContextLogoutHandler</code> &#20250;&#21152;&#22312;&#26368;&#21518;</td></tr><tr><td><code>logoutRequestMatcher()</code></td><td>&#35774;&#32622;&#36864;&#20986;&#35831;&#27714;&#30340;&#21305;&#37197;&#35268;&#21017;</td></tr></table>
<p>Spring Security &#20013;&#40664;&#35748;&#24320;&#21551;&#20102; CSRF &#38450;&#25252;&#65292;&#25152;&#20197; <code>/logout</code> &#20063;&#35201;&#27714;&#24102;&#26377; CSRF &#30340; Token&#65292;&#32780;&#19988;&#24517;&#39035;&#35201;&#20351;&#29992; <code>POST</code> &#26041;&#27861;&#65292;&#36825;&#26159;&#21512;&#29702;&#30340;&#23433;&#20840;&#35201;&#27714;&#12290;&#21487;&#20197;&#36890;&#36807;&#25552;&#20132;&#34920;&#21333;&#30340;&#26041;&#24335;&#26469;&#23454;&#29616;&#36864;&#20986;&#65292;&#20063;&#21487;&#20197;&#29992; JavaScript &#20195;&#30721;&#26469;&#21457;&#36215;&#36864;&#20986;&#30340; <code>POST</code> &#35831;&#27714;&#12290;&#22914;&#26524;&#19968;&#23450;&#35201;&#29992; <code>GET</code> &#26041;&#27861;&#65292;&#21487;&#20197;&#20687;&#20195;&#30721;&#31034;&#20363; 10-9 &#36825;&#26679;&#36827;&#34892;&#35774;&#32622;&#65292;&#20854;&#20013;&#23558;&#36864;&#20986;&#25104;&#21151;&#21518;&#30340;&#37325;&#23450;&#21521;&#25351;&#21521;&#20102; <code>/</code>&#65292;&#36864;&#20986;&#35831;&#27714;&#21487;&#20197;&#21516;&#26102;&#20351;&#29992; <code>GET</code> &#21644; <code>POST</code> &#26041;&#27861;&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-9</strong>&#12288;&#22686;&#21152;&#20102;&#36864;&#20986;&#35774;&#32622;&#30340;&#23433;&#20840;&#37197;&#32622;&#31867;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
            .antMatchers("/").permitAll()
            .mvcMatchers("/actuator/*").permitAll()
            .anyRequest().authenticated().and()
            .formLogin() // &#20351;&#29992;&#34920;&#21333;&#30331;&#24405;
            .loginPage("/login").permitAll() // &#35774;&#32622;&#30331;&#24405;&#39029;&#22320;&#22336;&#65292;&#20840;&#21592;&#21487;&#35775;&#38382;
            .defaultSuccessUrl("/order")
            .failureUrl("/login")
            .loginProcessingUrl("/doLogin")
            .usernameParameter("user")
            .passwordParameter("pwd").and()
            .httpBasic().and() // &#20351;&#29992;HTTP Basic&#35748;&#35777;
            .logout()
            .logoutSuccessUrl("/")
            .logoutRequestMatcher(new OrRequestMatcher(
                new AntPathRequestMatcher("/logout", "GET"),
                new AntPathRequestMatcher("/logout", "POST")));
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#29616;&#22312;&#65292;&#25105;&#20204;&#30340;&#19979;&#21333;&#39029;&#38754;&#24050;&#32463;&#25317;&#26377;&#20102;&#26368;&#22522;&#26412;&#30340;&#30331;&#24405;&#21644;&#36864;&#20986;&#21151;&#33021;&#65292;&#20063;&#33021;&#22312;&#25968;&#25454;&#24211;&#20013;&#32500;&#25252;&#22522;&#26412;&#30340;&#29992;&#25143;&#20449;&#24687;&#20102;&#12290;&#20043;&#21069;&#37117;&#26159;&#36890;&#36807;&#27983;&#35272;&#22120;&#25163;&#21160;&#20570;&#30340;&#39564;&#35777;&#65292;&#20026;&#20102;&#26041;&#20415;&#20197;&#21518;&#22238;&#24402;&#27979;&#35797;&#65292;&#25105;&#20204;&#38656;&#35201;&#32534;&#20889;&#19968;&#20123;&#33258;&#21160;&#21270;&#30340;&#21333;&#20803;&#27979;&#35797;&#12290;&#22909;&#22312; Spring Security &#23545;&#27979;&#35797;&#20063;&#26377;&#24456;&#22909;&#30340;&#25903;&#25345;&#65292;&#25105;&#20204;&#21482;&#38656;&#35201;&#22312; pom.xml &#20013;&#24341;&#20837;&#30456;&#24212;&#30340;&#20381;&#36182;&#23601;&#34892;&#20102;&#65292;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-10 &#25152;&#31034;&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-10</strong>&#12288;pom.xml &#20013;&#22686;&#21152; Spring Security &#30340;&#27979;&#35797;&#25903;&#25345;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;
    &lt;artifactId&gt;spring-security-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;</code></pre>
<p>&#25509;&#19979;&#26469;&#65292;&#20026; <code>OrderController</code> &#32534;&#20889;&#19968;&#20123;&#27979;&#35797;&#29992;&#20363;&#12290;&#22312;&#20026;&#27979;&#35797;&#26500;&#24314; <code>MockMvc</code> &#26102;&#65292;&#38656;&#35201;&#22686;&#21152; Spring Security &#30456;&#20851;&#30340;&#25903;&#25345;&#65292;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-11 &#25152;&#31034;&#65292;&#20854;&#20013;&#29992;&#21040;&#20102; <code>SecurityMockMvcConfigurers.springSecurity()</code> &#26469;&#21021;&#22987;&#21270; <code>MockMvc</code>&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-11</strong>&#12288;<code>OrderControllerTest</code> &#30340;&#21021;&#22987;&#21270;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@SpringBootTest
class OrderControllerTest {
    private MockMvc mockMvc;

    @BeforeEach
    void setUp(WebApplicationContext wac) {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(wac)
                                         .apply(springSecurity())
                                         .build();
    }

    @AfterEach
    void tearDown() {
        mockMvc = null;
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#20808;&#26469;&#27979;&#35797;&#19968;&#19979;&#30331;&#24405;&#21644;&#36864;&#20986;&#30340;&#21151;&#33021;&#65292;&#22312;&#20195;&#30721;&#31034;&#20363; 10-12 &#20013;&#65292;&#36890;&#36807; <code>SecurityMockMvcRequestBuilders.formLogin()</code> &#21487;&#20197;&#21457;&#36215;&#34920;&#21333;&#30331;&#24405;&#35831;&#27714;&#65292;&#25105;&#20204;&#22312; <code>WebSecurityConfiguration</code> &#20013;&#20462;&#25913;&#20102;&#40664;&#35748;&#37197;&#32622;&#65292;&#22240;&#27492;&#36825;&#37324;&#20063;&#38656;&#35201;&#25163;&#21160;&#25351;&#23450;&#22788;&#29702;&#30331;&#24405;&#35831;&#27714;&#30340; URL&#65292;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#30340;&#34920;&#21333;&#39033;&#21517;&#31216;&#20063;&#35201;&#20462;&#25913;&#12290;&#30331;&#24405;&#21518;&#65292;&#21487;&#20197;&#36890;&#36807; <code>SecurityMockMvcResultMatchers.authenticated()</code> &#21644; <code>unauthenticated()</code> &#26041;&#27861;&#26469;&#21028;&#26029;&#24403;&#21069;&#26159;&#21542;&#36890;&#36807;&#36523;&#20221;&#39564;&#35777;&#65292;&#22914;&#26524;&#25104;&#21151;&#36890;&#36807;&#39564;&#35777;&#21017;&#32487;&#32493;&#30830;&#35748;&#37325;&#23450;&#21521; URL &#26159;&#21542;&#31526;&#21512;&#39044;&#26399;&#12290;&#36864;&#20986;&#30340;&#27979;&#35797;&#36923;&#36753;&#20063;&#26159;&#31867;&#20284;&#30340;&#65292;&#36890;&#36807; <code>logout()</code> &#21521;&#40664;&#35748;&#30340; <code>/logout</code> &#22320;&#22336;&#21457;&#36215;&#36864;&#20986;&#35831;&#27714;&#65292;&#38543;&#21518;&#21028;&#26029;&#26159;&#21542;&#24050;&#27809;&#26377;&#30331;&#24405;&#24577;&#24182;&#37325;&#23450;&#21521;&#21040;&#20102; <code>/</code>&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-12</strong>&#12288;&#30331;&#24405;&#21644;&#36864;&#20986;&#30340;&#27979;&#35797;&#29992;&#20363;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@SpringBootTest
class OrderControllerTest {
    @Test
    void testLogin() throws Exception {
        mockMvc.perform(formLogin("/doLogin")
                .user("user", "LiLei")
                .password("pwd", "binarytea"))
                .andExpect(authenticated())
                .andExpect(redirectedUrl("/order"));
    }

    @Test
    void testLogout() throws Exception {
        mockMvc.perform(logout())
                .andExpect(unauthenticated())
                .andExpect(redirectedUrl("/"));
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#26368;&#21518;&#65292;&#20877;&#26469;&#27979;&#35797;&#19968;&#19979;&#30331;&#24405;&#21644;&#26410;&#30331;&#24405;&#24773;&#20917;&#19979;&#30340; <code>/order</code> &#39029;&#38754;&#35831;&#27714;&#12290;&#22312;&#26410;&#30331;&#24405;&#30340;&#24773;&#20917;&#19979;&#21521; <code>/order</code> &#21457;&#36215; <code>GET</code> &#35831;&#27714;&#65292;&#20250;&#36820;&#22238; <code>401 Unauthorized</code> &#21709;&#24212;&#30721;&#65292;&#27492;&#26102;&#30340;&#29366;&#24577;&#26159;&#26410;&#32463;&#36807;&#36523;&#20221;&#35748;&#35777;&#65292;&#23601;&#21644;&#29992; curl &#21629;&#20196;&#21457;&#36215; <code>GET</code> &#35831;&#27714;&#26102;&#31867;&#20284;&#12290;&#22914;&#26524;&#25351;&#23450;&#20102; <code>Accept: text/html</code> &#22836;&#65292;&#21017;&#24773;&#20917;&#19982;&#27983;&#35272;&#22120;&#31867;&#20284;&#65292;&#20250;&#37325;&#23450;&#21521;&#21040;&#30331;&#24405;&#39029;&#38754;&#12290;&#22312;&#21457;&#36215;&#35831;&#27714;&#26102;&#65292;&#22914;&#26524;&#29992; <code>with()</code> &#26041;&#27861;&#24102;&#19978;&#30331;&#24405;&#20449;&#24687;&#65292;&#23601;&#33021;&#27169;&#25311;&#24102;&#30331;&#24405;&#24577;&#30340;&#35831;&#27714;&#65292;&#21487;&#20197;&#30452;&#25509;&#24102;&#19978; <code>user()</code>&#65292;&#25351;&#23450;&#29992;&#25143;&#20449;&#24687;&#65288;&#36825;&#37324;&#21482;&#24102;&#20102;&#29992;&#25143;&#21517;&#65292;&#20063;&#21487;&#20197;&#24102;&#23494;&#30721;&#21644;&#35282;&#33394;&#65289;&#65292;&#20063;&#21487;&#20197;&#29992; <code>httpBasic()</code> &#27169;&#25311; HTTP Basic &#35748;&#35777;&#12290;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-13 &#25152;&#31034;&#12290;</p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-13</strong>&#12288;&#23545;&#19979;&#21333;&#39029;&#38754;&#30340;&#21333;&#20803;&#27979;&#35797;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@SpringBootTest
class OrderControllerTest {
    @Test
    void testOrderPageWithoutAuthentication() throws Exception {
        mockMvc.perform(get("/order")
                         // .header("Accept", "text/html") // &#27169;&#25311;&#27983;&#35272;&#22120;
                     )
                .andExpect(unauthenticated())
                // .andExpect(status().is3xxRedirection()) // &#27983;&#35272;&#22120;&#37324;&#26159;&#36339;&#36716;&#65292;&#21542;&#21017;&#26159;401&#36208;HTTP Basic
                // .andExpect(redirectedUrlPattern("**/login"))
          ;
    }

    @Test
    void testOrderPageWithAuthenticatedUser() throws Exception {
        mockMvc.perform(get("/order").with(user("LiLei")))
                .andExpect(status().is2xxSuccessful());
        mockMvc.perform(get("/order").with(httpBasic("LiLei", "binarytea")))
                .andExpect(status().is2xxSuccessful());
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#36890;&#36807;&#19978;&#38754;&#30340;&#20363;&#23376;&#65292;&#21487;&#20197;&#21457;&#29616;&#22312; Spring MVC &#20013;&#23545;&#25511;&#21046;&#22120;&#36827;&#34892;&#27979;&#35797;&#20063;&#19981;&#26159;&#29305;&#21035;&#22797;&#26434;&#65292;&#21363;&#20351;&#21152;&#19978;&#20102; Spring Security&#65292;&#38590;&#24230;&#20063;&#19981;&#39640;&#12290;&#22312;&#26412;&#20070;&#20013;&#65292;&#20276;&#38543;&#30528;&#21508;&#31181;&#30693;&#35782;&#28857;&#24050;&#32463;&#20986;&#29616;&#20102;&#19981;&#23569;&#21333;&#20803;&#27979;&#35797;&#20195;&#30721;&#65292;&#24076;&#26395;&#22823;&#23478;&#37117;&#33021;&#20859;&#25104;&#20026;&#20195;&#30721;&#32534;&#20889;&#27979;&#35797;&#30340;&#20064;&#24815;&#12290;</p>
</li>
</ol><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">3</span>curl &#26159;&#19968;&#27454;&#36890;&#36807; URL &#20256;&#36755;&#25968;&#25454;&#30340;&#21629;&#20196;&#34892;&#24037;&#20855;&#65292;&#21516;&#26102;&#20063;&#26159;&#19968;&#20010;&#24211;&#65292;&#21487;&#20197;&#23884;&#20837;&#21508;&#31181;&#35774;&#22791;&#20013;&#12290;&#19968;&#33324;&#65292;*nix &#31995;&#32479;&#20013;&#37117;&#20250;&#24102;&#26377; curl &#24037;&#20855;&#65292;Windows &#29992;&#25143;&#21487;&#20197;&#36890;&#36807; cygwin &#26469;&#23433;&#35013; curl&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">4</span>&#36825;&#37324;&#32972;&#21518;&#26159; HTTP &#30340;&#20869;&#23481;&#21327;&#21830;&#26426;&#21046;&#22312;&#36215;&#20316;&#29992;&#65292;&#22914;&#26524;&#35201;&#36820;&#22238;&#30340;&#26159; text/html &#20043;&#31867;&#30340;&#26684;&#24335;&#65292;&#35828;&#26126;&#22823;&#27010;&#29575;&#26159;&#27983;&#35272;&#22120;&#65292;&#25152;&#20197;&#23558;&#27983;&#35272;&#22120;&#37325;&#23450;&#21521;&#21040;&#30331;&#24405;&#39029;&#38754;&#65292;&#36208;&#34920;&#21333;&#35748;&#35777;&#26041;&#24335;&#65307;&#22914;&#26524;&#35201;&#36820;&#22238;&#30340;&#26159;&#23458;&#25143;&#31471;&#24120;&#29992;&#30340;&#26684;&#24335;&#65292;&#21017;&#36208; HTTP Basic &#35748;&#35777;&#26041;&#24335;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">5</span>&#21487;&#20197;&#29992; SDKMAN &#26469;&#23433;&#35013; Spring Boot CLI&#65292;&#29992; <code>sdk list springboot</code> &#26597;&#30475;&#21487;&#23433;&#35013;&#30340;&#29256;&#26412;&#65292;&#20363;&#22914;&#65292;&#24819;&#23433;&#35013; 2.4.2 &#29256;&#26412;&#65292;&#21487;&#20197;&#29992; <code>sdk install springboot 2.4.2</code> &#26469;&#36827;&#34892;&#23433;&#35013;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">6</span>Spring Security &#21516;&#26102;&#25903;&#25345; Java &#37197;&#32622;&#19982; XML &#37197;&#32622;&#20004;&#31181;&#26041;&#24335;&#65292;&#22312;&#26412;&#20070;&#20013;&#65292;&#25105;&#20204;&#20248;&#20808;&#32771;&#34385;&#20351;&#29992; Java &#37197;&#32622;&#26041;&#24335;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">7</span>&#36825;&#20010;&#20363;&#23376;&#22312; ch10/binarytea-default-formlogin &#39033;&#30446;&#20013;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">8</span>&#20851;&#20110;&#8220;&#35760;&#20303;&#25105;&#8221;&#30340;&#21151;&#33021;&#65292;&#25105;&#20204;&#22312;&#21518;&#38754;&#30340;&#31456;&#33410;&#20013;&#20250;&#20570;&#20171;&#32461;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">9</span>&#36825;&#20010;&#20363;&#23376;&#22312; ch10/binarytea-custom-formlogin &#39033;&#30446;&#20013;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">10</span>&#20195;&#30721;&#20301;&#20110; ch10/binarytea-in-memory-auth &#39033;&#30446;&#20013;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">11</span>&#20195;&#30721;&#20301;&#20110; ch10/binarytea-jdbc-auth &#39033;&#30446;&#20013;&#12290;&#27880;&#24847;&#65292;&#20026;&#20102;&#20445;&#35777;&#20043;&#21069;&#30340;&#21333;&#20803;&#27979;&#35797;&#33021;&#22815;&#39034;&#21033;&#36816;&#34892;&#65292;&#26412;&#20070;&#31034;&#20363;&#22312;&#27979;&#35797;&#30446;&#24405;&#37324;&#22686;&#21152;&#20102; <code>users</code> &#21644; <code>authorities</code> &#34920;&#23545;&#24212;&#30340;&#23454;&#20307;&#31867;&#23450;&#20041;&#12290;</p><h3 id="nav_point_156">10.2.3&#12288;&#23454;&#29616;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;</h3><p>&#19968;&#33324;&#22312;&#23545;&#23433;&#20840;&#35201;&#27714;&#19981;&#22826;&#20005;&#26684;&#30340;&#22330;&#26223;&#20013;&#65292;&#32463;&#24120;&#20250;&#20986;&#29616;&#8220;&#35760;&#20303;&#25105;&#8221;&#65288;Remember me&#65289;&#30340;&#36873;&#39033;&#65292;&#21363;&#39318;&#27425;&#25104;&#21151;&#30331;&#24405;&#21518;&#65292;&#23545;&#20110;&#21516;&#19968;&#21488;&#30005;&#33041;&#65292;&#29992;&#25143;&#21487;&#20197;&#22312;&#19968;&#27573;&#30456;&#23545;&#36739;&#38271;&#30340;&#26102;&#38388;&#37324;&#26080;&#39035;&#20877;&#27425;&#25163;&#21160;&#36755;&#20837;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#21363;&#21487;&#36827;&#34892;&#30331;&#24405;&#12290;&#36825;&#20010;&#21151;&#33021;&#35753;&#29992;&#25143;&#26080;&#39035;&#37325;&#22797;&#30331;&#24405;&#65292;&#22312;&#19968;&#23450;&#31243;&#24230;&#19978;&#25552;&#21319;&#20102;&#20351;&#29992;&#20307;&#39564;&#12290;&#20294;&#26159;&#65292;&#24517;&#39035;&#24378;&#35843;&#65292;&#22914;&#26524;&#26159;&#22312;&#37329;&#34701;&#12289;&#22269;&#38450;&#31561;&#25935;&#24863;&#22330;&#26223;&#19979;&#65292;&#19981;&#24314;&#35758;&#20351;&#29992;&#36825;&#20010;&#21151;&#33021;&#65292;&#33267;&#23569;&#19981;&#33021;&#20445;&#30041;&#22826;&#38271;&#26102;&#38388;&#12290;</p><p>Spring Security &#37324;&#20026;&#25105;&#20204;&#25552;&#20379;&#20102;&#19968;&#20010; <code>RememberMeServices</code> &#25277;&#35937;&#65292;&#30001;&#23427;&#26469;&#23454;&#29616;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;&#65292;&#40664;&#35748;&#26377;&#20960;&#20010;&#23454;&#29616;&#65306;</p><ul>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><code>NullRememberMeServices</code>&#65292;&#31354;&#23454;&#29616;&#65292;&#21363;&#19981;&#25552;&#20379;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;&#65292;<code>UsernamePasswordAuthenticationFilter</code> &#20869;&#37096;&#40664;&#35748;&#20351;&#29992;&#20102;&#36825;&#20010;&#23454;&#29616;&#65307;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><code>TokenBasedRememberMeServices</code>&#65292;&#36890;&#36807; Cookie &#20013;&#30340;&#19968;&#27573;&#32463; BASE64 &#32534;&#30721;&#30340;&#20196;&#29260;&#26469;&#23454;&#29616;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;&#65292;&#23454;&#29616;&#36739;&#20026;&#31616;&#21333;&#65307;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><code>PersistentTokenBasedRememberMeServices</code>&#65292;&#36890;&#36807;&#25345;&#20037;&#21270;&#30340;&#20196;&#29260;&#26469;&#23454;&#29616;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;&#65292;&#36825;&#37324;&#30340;&#25345;&#20037;&#21270;&#21487;&#20197;&#26159;&#22312;&#20869;&#23384;&#37324;&#30340;&#65288;&#36825;&#20005;&#26684;&#19978;&#19981;&#31639;&#30495;&#27491;&#30340;&#25345;&#20037;&#21270;&#65289;&#65292;&#20063;&#21487;&#20197;&#26159;&#25345;&#20037;&#21270;&#21040;&#25968;&#25454;&#24211;&#37324;&#30340;&#12290;</li>
</ul><p><code>TokenBasedRememberMeServices</code> &#21644; <code>PersistentTokenBasedRememberMeServices</code> &#37117;&#26159;&#22522;&#20110;&#20196;&#29260;&#26469;&#23454;&#29616;&#30340;&#65292;&#20294;&#20004;&#32773;&#30340;&#20196;&#29260;&#29983;&#25104;&#31574;&#30053;&#19981;&#21516;&#12290;&#25105;&#20204;&#20808;&#26469;&#30475;&#30475; <code>TokenBasedRememberMeServices</code> &#29983;&#25104;&#20196;&#29260;&#26102;&#20351;&#29992;&#30340;&#31574;&#30053;&#12290;&#20196;&#29260;&#26159;&#19968;&#20018;&#23383;&#31526;&#20018;&#30340; BASE64 &#32534;&#30721;&#65292;&#23383;&#31526;&#20018;&#20013;&#21253;&#21547;&#22914;&#19979;&#20960;&#37096;&#20998;&#65306;</p><ul>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;">&#29992;&#25143;&#21517;&#65292;&#29992;&#26469;&#26597;&#25214;&#23545;&#24212;&#30340;&#23494;&#30721;&#65307;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;">&#22833;&#25928;&#26102;&#38388;&#65292;&#29992;&#26469;&#34920;&#31034;&#36825;&#20010;&#20196;&#29260;&#20309;&#26102;&#36807;&#26399;&#65292;&#21333;&#20301;&#27627;&#31186;&#65307;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;">&#29992;&#25143;&#21517;&#12289;&#22833;&#25928;&#26102;&#38388;&#12289;&#23494;&#30721;&#19982;&#29305;&#23450;&#30340;&#31169;&#38053;&#32452;&#21512;&#21040;&#19968;&#36215;&#30340; MD5&#12290;</li>
</ul><p>&#23448;&#26041;&#25991;&#26723;&#20013;&#30340;&#34920;&#31034;&#26041;&#27861;&#22914;&#19979;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>base64(&#29992;&#25143;&#21517; + ":" + &#22833;&#25928;&#26102;&#38388; + ":" + md5Hex(&#29992;&#25143;&#21517; + ":" + &#22833;&#25928;&#26102;&#38388; + ":" + &#23494;&#30721; + ":" + &#31169;&#38053;))</code></pre><p>&#20351;&#29992;&#36825;&#26679;&#30340;&#32452;&#21512;&#65292;&#21482;&#35201;&#26377;&#20196;&#29260;&#65292;&#23601;&#33021;&#36824;&#21407;&#20986;&#29992;&#25143;&#20449;&#24687;&#65292;&#22240;&#27492;&#26080;&#39035;&#22312;&#26381;&#21153;&#31471;&#23384;&#20648;&#20196;&#29260;&#19982;&#29992;&#25143;&#30340;&#20851;&#32852;&#20449;&#24687;&#65292;&#32780;&#19988; Cookie &#20013;&#21482;&#20250;&#23384;&#20648;&#26126;&#25991;&#30340;&#29992;&#25143;&#21517; <span class="&#27880;&#37322;&#32534;&#21495;">12</span>&#65292;&#22312;&#21040;&#26399;&#25110;&#32773;&#29992;&#25143;&#20462;&#25913;&#20102;&#23494;&#30721;&#20043;&#21518;&#20196;&#29260;&#37117;&#20250;&#22833;&#25928;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">12</span>&#34429;&#28982;&#20196;&#29260;&#20013;&#27809;&#26377;&#26126;&#25991;&#30340;&#23494;&#30721;&#65292;&#20294;&#22914;&#26524;&#31169;&#38053;&#19981;&#24910;&#27844;&#38706;&#65292;&#25915;&#20987;&#32773;&#36824;&#26159;&#21487;&#20197;&#36890;&#36807;&#19968;&#23450;&#30340;&#25163;&#27573;&#36824;&#21407;&#20986;&#23494;&#30721;&#65292;&#20363;&#22914;&#31351;&#20030;&#21508;&#31181;&#23494;&#30721;&#65292;&#28982;&#21518;&#19982;&#29992;&#25143;&#21517;&#12289;&#22833;&#25928;&#26102;&#38388;&#21644;&#31169;&#38053;&#32452;&#21512;&#21518;&#36827;&#34892;&#30896;&#25758;&#12290;</p><p><code>PersistentTokenBasedRememberMeServices</code> &#30340;&#31574;&#30053;&#23601;&#19981;&#21516;&#20102;&#65292;&#23427;&#26159;&#38543;&#26426;&#29983;&#25104;&#19968;&#20010;&#20196;&#29260;&#65292;&#22312;&#21518;&#31471;&#30340;&#25345;&#20037;&#21270;&#23384;&#20648;&#20013;&#35760;&#24405;&#19979;&#20196;&#29260;&#19982;&#29992;&#25143;&#30340;&#20851;&#31995;&#12289;&#20196;&#29260;&#30340;&#22833;&#25928;&#26102;&#38388;&#65292;&#27599;&#27425;&#26469;&#19968;&#20010;&#20196;&#29260;&#65292;&#37117;&#35201;&#26597;&#35810;&#19968;&#19979;&#12290;</p><p>&#19982;&#20043;&#21069;&#30340;&#34920;&#21333;&#30331;&#24405;&#21644;&#36864;&#20986;&#37197;&#32622;&#26041;&#27861;&#30456;&#20284;&#65292;&#8220;&#35760;&#20303;&#25105;&#8221;&#22312; <code>rememberme()</code> &#26041;&#27861;&#37324;&#20063;&#25552;&#20379;&#20102;&#19981;&#23569;&#37197;&#32622;&#26041;&#27861;&#65292;&#21487;&#20197;&#35774;&#32622;&#19968;&#31995;&#21015;&#30340;&#21442;&#25968;&#65292;&#34920; 10-6 &#20013;&#23601;&#21015;&#20986;&#20102;&#19968;&#20123;&#24120;&#29992;&#30340;&#37197;&#32622;&#26041;&#27861;&#12290;</p><p><strong>&#34920; 10-6&#12288;<code>rememberMe()</code> &#20013;&#24120;&#29992;&#30340;&#37197;&#32622;&#26041;&#27861;</strong></p><table border="1" class="table table-bordered table-striped table-condensed" width="90%"><tr><th>&#37197;&#32622;&#26041;&#27861;</th><th>&#20316;&#29992;</th></tr><tr><td><code>key()</code></td><td>&#35774;&#32622; <code>md5Hex()</code> &#26102;&#20351;&#29992;&#30340;&#31169;&#38053;</td></tr><tr><td><code>rememberMeParameter()</code></td><td>&#35831;&#27714;&#20013;&#34920;&#31034;&#26159;&#21542;&#35201;&#8220;&#35760;&#20303;&#25105;&#8221;&#30340;&#21442;&#25968;&#21517;&#65292;&#40664;&#35748;&#26159; <code>remember-me</code></td></tr><tr><td><code>rememberMeCookieName()</code></td><td>&#22312; Cookies &#20013;&#20445;&#23384;&#20196;&#29260;&#30340; Cookie &#21517;&#31216;&#65292;&#40664;&#35748;&#26159; <code>remember-me</code></td></tr><tr><td><code>tokenValiditySeconds()</code></td><td>&#20196;&#29260;&#30340;&#26377;&#25928;&#26102;&#38388;&#65292;&#40664;&#35748;&#20004;&#21608;</td></tr><tr><td><code>userDetailsService()</code></td><td>&#35774;&#32622;&#29992;&#26469;&#26681;&#25454;&#29992;&#25143;&#21517;&#33719;&#21462;&#29992;&#25143;&#20449;&#24687;&#30340; <code>UserDetailsService</code></td></tr><tr><td><code>alwaysRemember()</code></td><td>&#26159;&#21542;&#22987;&#32456;&#24320;&#21551;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;</td></tr><tr><td><code>tokenRepository()</code></td><td>&#35774;&#32622;&#29992;&#20110;&#20445;&#23384;&#25345;&#20037;&#21270;&#20196;&#29260;&#30340; <code>PersistentTokenRepository</code>&#65292;&#35774;&#32622;&#20102;&#36825;&#20010;&#21518;&#65292;&#23601;&#20250;&#20351;&#29992; <code>PersistentTokenBasedRememberMeServices</code>&#65292;&#21542;&#21017;&#26159; <code>TokenBasedRememberMeServices</code></td></tr></table><p>&#25509;&#19979;&#26469;&#65292;&#25105;&#20204;&#19968;&#36215;&#26469;&#30475;&#30475;&#22914;&#20309;&#22312;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#20013;&#23454;&#29616;&#8220;&#35760;&#20303;&#25105;&#8221;&#30340;&#21151;&#33021;&#65292;&#20197;&#20415;&#22823;&#23478;&#26356;&#26041;&#20415;&#22320;&#23558;&#20854;&#24212;&#29992;&#20110;&#26085;&#24120;&#24320;&#21457;&#20013;&#12290;</p><blockquote>
<p><strong>&#38656;&#27714;&#25551;&#36848;</strong>&#12288;&#27599;&#27425;&#20351;&#29992;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#30340; Web &#39029;&#38754;&#37117;&#38656;&#35201;&#30331;&#24405;&#65292;&#26410;&#20813;&#26377;&#20123;&#40635;&#28902;&#12290;&#22914;&#26524;&#25104;&#21151;&#30331;&#24405;&#19968;&#27425;&#65292;&#24215;&#21592;&#36825;&#19968;&#22825;&#37117;&#26080;&#39035;&#20877;&#27425;&#36755;&#20837;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#23601;&#33021;&#20197;&#24403;&#21069;&#30340;&#29992;&#25143;&#36523;&#20221;&#19968;&#30452;&#20570;&#19979;&#21333;&#25110;&#20854;&#20182;&#30340;&#25805;&#20316;&#23601;&#22909;&#20102;&#12290;</p>
</blockquote><p>&#25105;&#20204;&#21487;&#20197;&#32771;&#34385;&#22312; BinaryTea &#24037;&#31243;&#20013;&#28436;&#31034;&#22914;&#20309;&#24320;&#21551;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;&#12290;&#25105;&#20204;&#20808;&#26469;&#31245;&#24494;&#35843;&#25972;&#19968;&#19979; Spring Security &#30340;&#37197;&#32622;&#65292;&#20687;&#20195;&#30721;&#31034;&#20363; 10-14 &#36825;&#26679; <span class="&#27880;&#37322;&#32534;&#21495;">13</span>&#8212;&#8212;&#20854;&#20013;&#35774;&#32622;&#20102;&#25105;&#20204;&#30340;&#31169;&#38053;&#65292;&#21363; <code>binarytea</code>&#65307;&#30331;&#24405;&#34920;&#21333;&#20013;&#34920;&#31034;&#26159;&#21542;&#35201;&#8220;&#35760;&#20303;&#25105;&#8221;&#30340;&#21442;&#25968;&#26159; <code>remember</code>&#65307;&#20196;&#29260;&#26377;&#25928;&#26399;&#20462;&#25913;&#20026;&#19968;&#22825;&#65292;&#36824;&#27880;&#20837;&#20102;&#19978;&#19979;&#25991;&#37324;&#30340; <code>userDetailsService</code>&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">13</span>&#36825;&#20010;&#20363;&#23376;&#22312; ch10/binarytea-remember-me &#39033;&#30446;&#20013;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-14</strong>&#12288;&#22312; <code>WebSecurityConfiguration</code> &#20013;&#22686;&#21152; <code>rememberMe()</code> &#37197;&#32622;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Autowired
    private UserDetailsService userDetailsService;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http// &#30465;&#30053;&#20854;&#20182;&#37197;&#32622;&#20869;&#23481;
            .rememberMe()
            .key("binarytea")
            .rememberMeParameter("remember")
            .tokenValiditySeconds(24 * 60 * 60)
            .userDetailsService(userDetailsService).and()
            .logout()
            .logoutSuccessUrl("/")
            .logoutRequestMatcher(new OrRequestMatcher(
                new AntPathRequestMatcher("/logout", "GET"),
                new AntPathRequestMatcher("/logout", "POST")));
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#22312;&#30331;&#24405;&#39029;&#38754; login.html &#20013;&#65292;&#25105;&#20204;&#20063;&#35201;&#30456;&#24212;&#22320;&#22312;&#34920;&#21333;&#37324;&#22686;&#21152; <code>remember</code> &#36825;&#20010;&#34920;&#21333;&#39033;&#65292;&#19968;&#33324;&#26159;&#22797;&#36873;&#26694;&#65292;&#23601;&#20687;&#20195;&#30721;&#31034;&#20363; 10-15 &#37324;&#30340;&#37027;&#26679;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-15</strong>&#12288;login.html &#20013;&#30340;&#34920;&#21333;&#37096;&#20998;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&lt;form action="#" th:action="@{/doLogin}" method="post"&gt;
    &lt;p&gt;
        &lt;label&gt;&#29992;&#25143;&#21517;&#65306;&lt;/label&gt;
        &lt;input type="text" name="user" placeholder="&#29992;&#25143;&#21517;" /&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label&gt;&#23494;&#30721;&#65306;&lt;/label&gt;
        &lt;input type="password" name="pwd" placeholder="&#23494;&#30721;" /&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;label&gt;&#35760;&#20303;&#25105;&#65306;&lt;/label&gt;
        &lt;input type="checkbox" name="remember" /&gt;&#26159;
    &lt;/p&gt;
    &lt;p th:if="${session['SPRING_SECURITY_LAST_EXCEPTION'] != null}"
       th:with="errorMsg=${session['SPRING_SECURITY_LAST_EXCEPTION'].message}"
       style="color:#ff0000"&gt;
        &#30331;&#24405;&#22833;&#36133;&#65292;&#20855;&#20307;&#21407;&#22240;&#65306;
        &lt;span th:text="${errorMsg}" style="color:#ff0000"&gt;&#22833;&#36133;&#21407;&#22240;&lt;/span&gt;
    &lt;/p&gt;
    &lt;p&gt;
        &lt;input type="submit" value="&#25552;&#20132;"/&gt;
    &lt;/p&gt;
&lt;/form&gt;</code></pre><p>&#36816;&#34892;&#31243;&#24207;&#65292;&#25104;&#21151;&#30331;&#24405;&#21518;&#65292;&#25105;&#20204;&#21487;&#20197;&#36890;&#36807; Chrome &#27983;&#35272;&#22120;&#30340;&#24320;&#21457;&#32773;&#24037;&#20855;&#35266;&#23519;&#19968;&#19979;&#21709;&#24212;&#20013;&#30340; Cookies&#65292;&#36825;&#37324;&#23601;&#33021;&#25214;&#21040;&#29992;&#20110;&#23454;&#29616;&#8220;&#35760;&#20303;&#25105;&#8221;&#21151;&#33021;&#30340; <code>remember-me</code>&#65292;&#22914;&#22270; 10-4 &#25152;&#31034;&#12290;</p><p class="&#22270;"><img alt="{%}" src="file:///[PrimaryStorage]local_pic/XueTouSpring_CongRuMenDaoXiangMuShiZhan/image00782.jpeg"/></p><p class="p-img-title"><strong>&#22270; 10-4&#12288;Cookies &#20013;&#8220;&#35760;&#20303;&#25105;&#8221;&#30340;&#20196;&#29260;&#20540;</strong></p><p>&#22914;&#26524;&#35201;&#20351;&#29992; Spring Security &#20869;&#32622;&#30340;&#25345;&#20037;&#21270;&#20196;&#29260;&#65292;&#25105;&#20204;&#38656;&#35201;&#37197;&#32622;&#19968;&#20010; <code>PersistentTokenRepository</code> Bean&#65292;Spring Security &#20869;&#32622;&#30340;&#36824;&#26377;&#27979;&#35797;&#29992;&#30340; <code>InMemoryTokenRepositoryImpl</code> &#20869;&#23384;&#20196;&#29260;&#65292;&#36824;&#26377;&#20195;&#30721;&#31034;&#20363; 10-16 &#20013;&#20351;&#29992;&#30340; <code>JdbcTokenRepositoryImpl</code>&#12290;&#20195;&#30721;&#31034;&#20363; 10-16 &#36890;&#36807; <code>tokenRepository()</code> &#35774;&#32622;&#20102; <code>persistentTokenRepository()</code> &#21019;&#24314;&#30340; <code>JdbcTokenRepositoryImpl</code>&#12290;<code>JdbcTokenRepositoryImpl</code> &#22312;&#21021;&#22987;&#21270;&#26102;&#21487;&#20197;&#33258;&#24049;&#24314;&#34920;&#65292;&#20294;&#30001;&#20110;&#36825;&#20010;&#21160;&#20316;&#19981;&#20250;&#21028;&#26029;&#34920;&#26159;&#21542;&#24050;&#32463;&#23384;&#22312;&#65292;&#25152;&#20197;&#27599;&#27425;&#21021;&#22987;&#21270;&#37117;&#20250;&#23581;&#35797;&#24314;&#34920;&#12290;&#23545;&#20110;&#29983;&#20135;&#29615;&#22659;&#65292;&#26412;&#20070;&#19981;&#24314;&#35758;&#33258;&#21160;&#24314;&#34920;&#12290;&#40664;&#35748;&#30340;&#20196;&#29260;&#34920;&#32467;&#26500;&#26159;&#19979;&#38754;&#36825;&#26679;&#30340;&#65292;&#21487;&#20197;&#25226;&#23427;&#21152;&#21040; schema.sql &#20013;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>create table persistent_logins (
    username varchar(64) not null,
    series varchar(64) primary key,
    token varchar(64) not null,
    last_used timestamp not null
);</code></pre><p>&#22914;&#26524;&#24819;&#35201;&#29992;&#33258;&#24049;&#30340;&#34920;&#65292;&#25110;&#32773;&#29992; Redis &#26469;&#20445;&#23384;&#20196;&#29260;&#65292;&#21482;&#38656;&#33258;&#24049;&#23454;&#29616;&#19968;&#20010; <code>PersistentTokenRepository</code> &#23601;&#21487;&#20197;&#20102;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-16</strong>&#12288;&#22686;&#21152;&#20102;&#25345;&#20037;&#21270;&#20196;&#29260;&#30340;&#30456;&#20851;&#37197;&#32622;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Autowired
    private ObjectProvider&lt;DataSource&gt; dataSources;

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            // &#30465;&#30053;&#20854;&#20182;&#37197;&#32622;&#20869;&#23481;
                .rememberMe()
                .key("binarytea")
                .rememberMeParameter("remember")
                .tokenValiditySeconds(24 * 60 * 60)
                .tokenRepository(persistentTokenRepository(dataSources)) // &#37197;&#32622;&#25345;&#20037;&#21270;&#20196;&#29260;
                .userDetailsService(userDetailsService(dataSources)).and()
                .logout()
            .logoutSuccessUrl("/")
            .logoutRequestMatcher(new OrRequestMatcher(
                new AntPathRequestMatcher("/logout", "GET"),
                new AntPathRequestMatcher("/logout", "POST")));
    }

    @Bean
    public PersistentTokenRepository persistentTokenRepository(ObjectProvider&lt;DataSource&gt; dataSources) {
        JdbcTokenRepositoryImpl tokenRepository = new JdbcTokenRepositoryImpl();
        tokenRepository.setDataSource(dataSources.getIfAvailable());
        tokenRepository.setCreateTableOnStartup(false);
        return tokenRepository;
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#38500;&#20102;&#22312;&#27983;&#35272;&#22120;&#20013;&#25163;&#21160;&#36827;&#34892;&#30331;&#24405;&#65292;&#26597;&#30475; Cookies &#20197;&#22806;&#65292;&#25105;&#20204;&#36824;&#35201;&#20889;&#20010;&#21333;&#20803;&#27979;&#35797;&#65292;&#20445;&#35777;&#20195;&#30721;&#30340;&#36923;&#36753;&#31526;&#21512;&#39044;&#26399;&#65292;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-17 &#25152;&#31034;&#12290;&#20854;&#20013;&#27169;&#25311;&#21521; <code>/doLogin</code> &#25552;&#20132;&#20102;&#19968;&#20010; <code>POST</code> &#35831;&#27714;&#65292;&#20854;&#20013;&#21253;&#21547;&#20102;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#65292;&#36824;&#26377;&#39029;&#38754;&#19978;&#30340;&#22797;&#36873;&#26694; <code>remember</code>&#65292;&#23427;&#30340;&#20540;&#21487;&#20197;&#26159; <code>true</code>&#12289;<code>on</code>&#12289;<code>yes</code> &#21644; <code>1</code> &#20013;&#30340;&#20219;&#24847;&#19968;&#20010;&#65288;&#24573;&#30053;&#22823;&#23567;&#20889;&#65289;&#12290;&#27492;&#22806;&#65292;&#36824;&#24517;&#39035;&#35201;&#24102;&#19978;&#19968;&#20010; CSRF &#20196;&#29260;&#65288;&#20851;&#20110; CSRF &#30340;&#20869;&#23481;&#65292;&#25105;&#20204;&#22312; 10.4.1 &#33410;&#20877;&#20570;&#35828;&#26126;&#65292;&#36825;&#37324;&#20808;&#21152;&#19978;&#65289;&#12290;&#22312;&#39564;&#35777;&#37096;&#20998;&#65292;&#39069;&#22806;&#39564;&#35777;&#20102; <code>remember-me</code> Cookie &#30340;&#24773;&#20917;&#65292;&#36824;&#23545; persistent_logins &#34920;&#37324;&#30340;&#25968;&#25454;&#36827;&#34892;&#20102;&#26816;&#26597;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-17</strong>&#12288;&#38024;&#23545;&#25345;&#20037;&#21270;&#20196;&#29260;&#30340;&#21333;&#20803;&#27979;&#35797;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@SpringBootTest
class OrderControllerTest {
    private MockMvc mockMvc;
    private JdbcTemplate jdbcTemplate;

    @BeforeEach
    void setUp(WebApplicationContext wac) {
        this.mockMvc = MockMvcBuilders.webAppContextSetup(wac).apply(springSecurity()).build();
        jdbcTemplate = new JdbcTemplate(wac.getBean(DataSource.class));
    }

    @AfterEach
    void tearDown() {
        mockMvc = null;
        jdbcTemplate = null;
    }

    @Test
    void testOrderPageWithPersistentToken() throws Exception {
        mockMvc.perform(post("/doLogin")
                .param("user", "LiLei")
                .param("pwd", "binarytea")
                .param("remember", "1")
                .with(csrf())) // &#25552;&#20132;&#30340;&#20869;&#23481;&#37324;&#35201;&#21253;&#21547;&#19968;&#20010;CSRF&#20196;&#29260;
                .andExpect(authenticated())
                .andExpect(cookie().exists("remember-me"))
                .andExpect(cookie().maxAge("remember-me", 24 * 60 * 60));
        assertEquals(1, jdbcTemplate.queryForObject("select count(1) from persistent_logins", Integer.class));
        assertEquals("LiLei",
                jdbcTemplate.queryForObject("select username from persistent_logins", String.class));
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><h3 id="nav_point_157">10.2.4&#12288;&#33258;&#23450;&#20041;&#35748;&#35777;&#26041;&#24335;</h3><p>&#34429;&#28982; Spring Security &#25552;&#20379;&#20102;&#24456;&#22810;&#19981;&#21516;&#30340;&#36523;&#20221;&#39564;&#35777;&#26041;&#24335;&#65292;&#20294;&#24635;&#26377;&#20123;&#26102;&#20505;&#25105;&#20204;&#38656;&#35201;&#33258;&#24049;&#21160;&#25163;&#23454;&#29616;&#19968;&#20123;&#21151;&#33021;&#12290;&#20363;&#22914;&#65292;&#21487;&#20197;&#23558; JSON Web Token&#65288;&#31616;&#31216; JWT&#65289;&#25343;&#36807;&#26469;&#65292;&#29992;&#20570; <code>REST</code> &#26381;&#21153;&#30340;&#36523;&#20221;&#35748;&#35777;&#12290;</p><p>&#35201;&#23454;&#29616;&#33258;&#23450;&#20041;&#30340;&#35748;&#35777;&#65292;&#22823;&#33268;&#38656;&#35201;&#20570;&#20197;&#19979;&#30340;&#24037;&#20316;&#65306;</p><p>(1) &#25552;&#20379;&#19968;&#20010;&#29992;&#20110;&#30331;&#24405;&#30340;&#25509;&#21475;&#65292;&#21487;&#20197;&#26159;&#20010; <code>Controller</code>&#65307;</p><p>(2) &#25552;&#20379;&#19968;&#20010;&#23545;&#27599;&#20010;&#35831;&#27714;&#36827;&#34892;&#26435;&#38480;&#39564;&#35777;&#30340; <code>Filter</code>&#65292;&#19968;&#33324;&#20250;&#22522;&#20110;&#29616;&#26377;&#30340; <code>Filter</code> &#36827;&#34892;&#25193;&#23637;&#65292;&#20363;&#22914;&#65292;&#31245;&#21518;&#20250;&#30475;&#21040;&#30340; <code>AbstractPreAuthenticatedProcessingFilter</code>&#65307;</p><p>(3) &#25552;&#20379;&#19968;&#20010; <code>AuthenticationProvider</code>&#65292;&#29992;&#26469;&#36827;&#34892;&#20855;&#20307;&#30340;&#39564;&#35777;&#24037;&#20316;&#65292;&#36825;&#20010;&#23545;&#35937;&#20250;&#34987;&#25918;&#21040; <code>AuthenticationManager</code> &#20013;&#65307;</p><p>(4) &#22914;&#26524;&#33719;&#21462;&#29992;&#25143;&#20449;&#24687;&#30340;&#26041;&#24335;&#27604;&#36739;&#29305;&#27530;&#65292;&#36824;&#38656;&#35201;&#25552;&#20379;&#23450;&#21046;&#30340; <code>UserDetailsService</code> &#23454;&#29616;&#12290;</p><p>&#25509;&#19979;&#26469;&#65292;&#35753;&#25105;&#20204;&#30475;&#30475;&#22914;&#20309;&#22312;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#20013;&#36890;&#36807;&#33258;&#23450;&#20041; JWT &#35748;&#35777;&#30340;&#26041;&#24335;&#26469;&#25552;&#20379;&#36523;&#20221;&#35748;&#35777;&#33021;&#21147;&#12290;</p><blockquote>
<p><strong>&#38656;&#27714;&#25551;&#36848;</strong>&#12288;&#34429;&#28982;&#24215;&#21592;&#21487;&#20197;&#36890;&#36807; Web &#30028;&#38754;&#20026;&#39038;&#23458;&#19979;&#21333;&#65292;&#21464;&#26356;&#35746;&#21333;&#29366;&#24577;&#65292;&#20294;&#25105;&#20204;&#26356;&#24076;&#26395;&#39038;&#23458;&#33021;&#22815;&#33258;&#24049;&#36890;&#36807;&#31243;&#24207;&#33258;&#21161;&#23436;&#25104;&#21508;&#31181;&#26597;&#30475;&#33756;&#21333;&#21644;&#19979;&#21333;&#30340;&#36807;&#31243;&#12290;&#36825;&#26102;&#65292;&#31243;&#24207;&#23601;&#38656;&#35201;&#30693;&#36947;&#39038;&#23458;&#26159;&#35841;&#65292;&#21578;&#35785;&#26381;&#21153;&#25552;&#20379;&#26041;&#65292;&#36824;&#35201;&#33021;&#39564;&#35777;&#39038;&#23458;&#30340;&#36523;&#20221;&#12290;</p>
</blockquote><p>&#38024;&#23545;&#36825;&#20010;&#38656;&#27714;&#65292;JWT &#23601;&#26159;&#19968;&#20010;&#27604;&#36739;&#36731;&#37327;&#32423;&#30340;&#35299;&#20915;&#26041;&#26696;&#12290;Spring Security &#23545;&#20110; JWT &#30340;&#25903;&#25345;&#23884;&#22312; OAuth 2.0 &#30340;&#25903;&#25345;&#37324;&#65292;&#25105;&#20204;&#21487;&#20197;&#23558; JWT &#29420;&#31435;&#20986;&#26469;&#65292;&#19987;&#38376;&#20026; <code>REST</code> &#26381;&#21153;&#20570;&#19968;&#22871;&#36523;&#20221;&#35748;&#35777;&#30340;&#25903;&#25345;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">14</span></p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">14</span>&#20855;&#20307;&#30340;&#20195;&#30721;&#22312; ch10/binarytea-jwt-auth &#39033;&#30446;&#20013;&#12290;</p><p>&#35201;&#25903;&#25345; JWT&#65292;&#25105;&#20204;&#38656;&#35201;&#22312; pom.xml &#20013;&#24341;&#20837;&#23545;&#24212;&#30340;&#20381;&#36182;&#65292;&#36825;&#37324;&#25105;&#20204;&#36873;&#25321; Java JWT:JSON Web Token for Java and Android&#65288;&#31616;&#31216; JJWT&#65289;<span class="&#27880;&#37322;&#32534;&#21495;">15</span>&#65292;&#21487;&#20197;&#28155;&#21152;&#22914;&#19979;&#30340;&#20381;&#36182;&#65292;&#22914;&#26524;&#19981;&#26159;&#29992;&#30340; Jackson JSON&#65292;&#20063;&#26377;&#23545;&#24212; GSON &#30340;&#21253;&#65306;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">15</span>Java JWT &#39033;&#30446;&#35265; GitHub&#65288;/jwtk/jjwt&#65289;&#12290;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&lt;dependency&gt;
    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
    &lt;artifactId&gt;jjwt-api&lt;/artifactId&gt;
    &lt;version&gt;0.11.2&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
    &lt;artifactId&gt;jjwt-impl&lt;/artifactId&gt;
    &lt;version&gt;0.11.2&lt;/version&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;
    &lt;artifactId&gt;jjwt-jackson&lt;/artifactId&gt;
    &lt;version&gt;0.11.2&lt;/version&gt;
    &lt;scope&gt;runtime&lt;/scope&gt;
&lt;/dependency&gt;</code></pre><p>&#22312;&#24320;&#22987; Spring Security &#30456;&#20851;&#20869;&#23481;&#30340;&#24320;&#21457;&#21069;&#65292;&#20808;&#26469;&#20934;&#22791;&#19968;&#20010;&#36741;&#21161;&#31867;&#65292;&#23454;&#29616; JWT &#20196;&#29260;&#30340;&#29983;&#25104;&#19982;&#35299;&#26512;&#12290;&#22312; JWT &#20013;&#65292;&#32534;&#30721;&#30340;&#20449;&#24687;&#31216;&#20026; Claim&#65292;&#22240;&#20026; JWT &#23637;&#24320;&#21518;&#26159; JSON &#26684;&#24335;&#30340;&#65292;&#25152;&#20197;&#27599;&#20010; Claim &#37117;&#26159; JSON &#23545;&#35937;&#37324;&#30340;&#19968;&#20010;&#38190;&#12290;&#19968;&#20010; JWT &#20196;&#29260;&#20998;&#20026;&#19977;&#20010;&#37096;&#20998;&#65292;&#20043;&#38388;&#29992;&#8220;.&#8221;&#20998;&#38548;&#65292;&#27599;&#20010;&#37096;&#20998;&#37117;&#26159;&#19968;&#27573; BASE64 &#32534;&#30721;&#12290;&#31532;&#19968;&#37096;&#20998;&#26159;&#22836;&#20449;&#24687;&#65292;&#21253;&#21547;&#20102;&#31614;&#21517;&#31639;&#27861;&#31561;&#20449;&#24687;&#65307;&#31532;&#20108;&#37096;&#20998;&#26159;&#27491;&#25991;&#65292;&#21253;&#21547;&#20102;&#25152;&#26377;&#30340; Claim&#65307;&#31532;&#19977;&#37096;&#20998;&#26159;&#31614;&#21517;&#12290;JWT &#30340;&#20196;&#29260;&#20013;&#21487;&#20197;&#35760;&#24405;&#21644;&#29983;&#25104;&#26377;&#25928;&#26102;&#38388;&#65292;&#36229;&#36807;&#26102;&#38388;&#23601;&#22833;&#25928;&#20102;&#12290;</p><p>&#25105;&#20204;&#32534;&#20889;&#19968;&#20010; <code>JwtTokenHelper</code> &#31867;&#65292;&#23553;&#35013;&#19982; JWT &#26377;&#20851;&#30340;&#25805;&#20316;&#65292;&#20195;&#30721;&#31034;&#20363; 10-18 &#26159;&#20854;&#20013;&#30340;&#21021;&#22987;&#21270;&#37096;&#20998;&#12290;&#20854;&#20013;&#25105;&#20204;&#27880;&#20837;&#20102;&#37197;&#32622;&#25991;&#20214;&#20013;&#30340; <code>jwt.secret</code>&#65292;&#36825;&#26159;&#31614;&#21517;&#29992;&#30340;&#23494;&#38053;&#65292;&#29983;&#25104;&#23494;&#38053;&#30340;&#20195;&#30721;&#20063;&#22312;&#31034;&#20363;&#20013;&#65292;&#36890;&#36807; <code>Keys.hmacShaKeyFor()</code> &#26469;&#36827;&#34892;&#36824;&#21407;&#12290;<code>JwtParser</code> &#26159;&#32447;&#31243;&#23433;&#20840;&#30340;&#65292;&#22240;&#27492;&#25105;&#20204;&#30452;&#25509;&#22312;&#21021;&#22987;&#21270;&#36807;&#31243;&#20013;&#23436;&#25104;&#20102;&#23545;&#23427;&#30340;&#21021;&#22987;&#21270;&#65292;&#26041;&#20415;&#21518;&#32493;&#35299;&#26512;&#20196;&#29260;&#65292;&#32771;&#34385;&#21040;&#19981;&#21516;&#30340;&#26381;&#21153;&#22120;&#20043;&#38388;&#21487;&#33021;&#23384;&#22312;&#26102;&#38047;&#20559;&#31227;&#65292;<code>setAllowedClockSkewSeconds()</code> &#26041;&#27861;&#35774;&#32622;&#20102;&#25105;&#20204;&#33021;&#22815;&#23481;&#24525;&#30340;&#26368;&#22823;&#26102;&#38047;&#35823;&#24046;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-18</strong>&#12288;<code>JwtTokenHelper</code> &#31867;&#30340;&#21021;&#22987;&#21270;&#20195;&#30721;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Component
@Slf4j
public class JwtTokenHelper implements InitializingBean {
    private static final String ISSUER = "BinaryTea";

    private JwtParser jwtParser;
    private Key key;

    @Value("${jwt.secret}")
    public void setBase64Key(String base64) {
        // this.key = Keys.secretKeyFor(SignatureAlgorithm.HS512);
        // log.info("&#20351;&#29992;&#23494;&#38053;&#65306;{}", Base64.getEncoder().encodeToString(key.getEncoded()));
        // &#23494;&#38053;&#31867;&#20284;&#65306;gR6cytlUlgMfVh08nLFZf8hMk4mdJDX5rWBVlsCbKvRlWcLwNRU6+rIPcLx21x191kJgP8udtoZuHt5yUDWtgg==
        key = Keys.hmacShaKeyFor(Base64.getDecoder().decode(base64));
    }

    @Override
    public void afterPropertiesSet() throws Exception {
        jwtParser = Jwts.parserBuilder().requireIssuer(ISSUER)
                     .setSigningKey(key).setAllowedClockSkewSeconds(10)
                     .build();
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#20196;&#29260;&#30340;&#21021;&#22987;&#21270;&#20027;&#35201;&#26159;&#36890;&#36807; <code>Jwts.builder()</code> &#36820;&#22238;&#30340; <code>JwtBuilder</code> &#26469;&#20570;&#30340;&#65292;&#25105;&#20204;&#29978;&#33267;&#21487;&#20197;&#23558;&#26435;&#38480;&#21015;&#34920;&#32534;&#30721;&#21040;&#20196;&#29260;&#37324;&#65292;&#23427;&#25552;&#20379;&#20102; <code>claim()</code> &#21644; <code>addClaims()</code> &#31561;&#26041;&#27861;&#12290;&#35299;&#26512;&#20196;&#29260;&#21017;&#26159;&#30452;&#25509;&#20351;&#29992; <code>JwtParser.parseClaimsJws()</code> &#26041;&#27861;&#12290;&#20855;&#20307;&#20195;&#30721;&#22914;&#20195;&#30721;&#31034;&#20363; 10-19 &#25152;&#31034;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-19</strong>&#12288;<code>JwtTokenHelper</code> &#31867;&#20013;&#20851;&#20110;&#20196;&#29260;&#29983;&#25104;&#19982;&#35299;&#26512;&#30340;&#20195;&#30721;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Component
@Slf4j
public class JwtTokenHelper implements InitializingBean {
    public String generateToken(String username) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime expireTime = LocalDateTime.now().plusHours(1); // TOKEN&#19968;&#20010;&#23567;&#26102;&#26377;&#25928;

        return Jwts.builder()
                .setSubject(username)
                .setIssuer(ISSUER)
                .setIssuedAt(Date.from(now.atZone(ZoneId.systemDefault()).toInstant()))
                .setExpiration(Date.from(expireTime.atZone(ZoneId.systemDefault()).toInstant()))
                .signWith(key)
                .compact();
    }

    public Jws&lt;Claims&gt; parseToken(String token) {
        try {
            return jwtParser.parseClaimsJws(token);
        } catch (SignatureException | MalformedJwtException | UnsupportedJwtException |
                IllegalArgumentException e) {
            throw new BadCredentialsException("Invalid Token", e);
        } catch (ExpiredJwtException e) {
            throw new CredentialsExpiredException("Token Expired", e);
        }
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#20570;&#22909;&#20102;&#21069;&#26399;&#30340;&#20934;&#22791;&#65292;&#25509;&#19979;&#26469;&#23601;&#35201;&#36827;&#20837; Spring Security &#30456;&#20851;&#31867;&#30340;&#24320;&#21457;&#38454;&#27573;&#20102;&#12290;&#39318;&#20808;&#65292;&#26159;&#26681;&#25454;&#29992;&#25143;&#21517;&#19982;&#23494;&#30721;&#33719;&#21462; JWT &#20196;&#29260;&#30340;&#30331;&#24405;&#25509;&#21475;&#12290;&#20855;&#20307;&#30340;&#30331;&#24405;&#26657;&#39564;&#26159;&#22996;&#25176;&#32473;&#20102; <code>AuthenticationManager</code> &#26469;&#20570;&#30340;&#65306;&#22914;&#26524;&#30331;&#24405;&#20449;&#24687;&#26377;&#25928;&#65292;&#23601;&#29983;&#25104;&#20196;&#29260;&#24182;&#36820;&#22238; HTTP <code>200 OK</code> &#30340;&#24212;&#31572;&#65307;&#22914;&#26524;&#30331;&#24405;&#20449;&#24687;&#26080;&#25928;&#65292;&#21017;&#36820;&#22238;&#25552;&#31034;&#20449;&#24687;&#65292;&#29992;&#30340;&#21709;&#24212;&#30721;&#23601;&#26159; <code>403 Forbidden</code>&#12290;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-20 &#25152;&#31034;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-20</strong>&#12288;&#26681;&#25454;&#29992;&#25143;&#21517;&#19982;&#23494;&#30721;&#33719;&#24471;&#20196;&#29260;&#30340; <code>TokenController</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@RestController
@Slf4j
public class TokenController {
    @Autowired
    private AuthenticationManager authenticationManager;
    @Autowired
    private JwtTokenHelper jwtTokenHelper;

    @PostMapping("/token")
    public ResponseEntity&lt;TokenResponse&gt; createToken(@RequestBody @Valid TokenRequest tokenRequest,
                                                     BindingResult result) {
        if (result.hasErrors()) {
            String errorMessage = result.getAllErrors().stream()
                    .map(e -&gt; e.getDefaultMessage()).collect(Collectors.joining(";"));
            return ResponseEntity.badRequest().body(new TokenResponse(null, errorMessage));
        }
        try {
            Authentication authentication =
                new UsernamePasswordAuthenticationToken(tokenRequest.getUsername(), tokenRequest.getPassword());
            authenticationManager.authenticate(authentication);
        } catch (AuthenticationException e) {
            log.warn("Login failed. User: {}, Reason: {}", tokenRequest.getUsername(), e.getMessage());
            return ResponseEntity.status(HttpStatus.FORBIDDEN)
                .body(new TokenResponse(null, e.getMessage()));
        }

        return ResponseEntity.ok(new TokenResponse(generateToken(tokenRequest.getUsername()), null));
    }

    private String generateToken(String username) {
        String token = jwtTokenHelper.generateToken(username);
        log.info("&#20026;&#29992;&#25143;{}&#29983;&#25104;Token [{}]", username, token);
        return token;
    }
}</code></pre><p>&#20854;&#20013;&#23545;&#24212;&#30340;&#35831;&#27714;&#21644;&#24212;&#31572;&#31867;&#27604;&#36739;&#31616;&#21333;&#65306;<code>TokenRequest</code> &#20013;&#21253;&#21547;&#35201;&#27714;&#38750;&#31354;&#65288;&#24102;&#20102; <code>@NotEmpty</code> &#27880;&#35299;&#65289;&#30340; <code>username</code> &#21644; <code>password</code> &#25104;&#21592;&#65307;<code>TokenResponse</code> &#20013;&#21017;&#26159;&#20195;&#34920;&#20196;&#29260;&#30340; <code>token</code> &#21644;&#20195;&#34920;&#25551;&#36848;&#28040;&#24687;&#30340; <code>message</code>&#12290;</p><p>&#25509;&#19979;&#26469;&#65292;&#35201;&#20889;&#30340;&#23601;&#26159;&#38024;&#23545;&#27599;&#20010;&#35831;&#27714;&#36827;&#34892;&#20196;&#29260;&#26657;&#39564;&#30340; <code>Filter</code> &#20102;&#65292;&#30001;&#20110;&#36825;&#20854;&#23454;&#26159;&#20010;&#39044;&#20808;&#23436;&#25104;&#36523;&#20221;&#35748;&#35777;&#30340;&#22788;&#29702;&#36807;&#31243;&#65292;&#27491;&#22909;&#21487;&#20197;&#29992;&#19978; <code>AbstractPreAuthenticatedProcessingFilter</code>&#65292;&#25105;&#20204;&#23601;&#23558;&#23427;&#20316;&#20026;&#29238;&#31867;&#36827;&#34892;&#25193;&#23637;&#65292;Spring Security &#38024;&#23545;&#36825;&#31867;&#22788;&#29702;&#24050;&#32463;&#25552;&#20379;&#20102;&#36739;&#22909;&#30340;&#25903;&#25345;&#65292;&#25105;&#20204;&#21482;&#38656;&#24320;&#21457;&#20123;&#31616;&#21333;&#30340;&#20195;&#30721;&#65292;&#20877;&#20570;&#20123;&#37197;&#32622;&#23601;&#22909;&#65292;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-21 &#25152;&#31034;&#12290;&#36825;&#27573;&#20195;&#30721;&#20174;&#35831;&#27714;&#20013;&#21462;&#20986;&#20196;&#29260;&#20316;&#20026;&#35201;&#39564;&#35777;&#30340;&#20027;&#20307;&#20449;&#24687;&#65292;&#30001;&#20110; <code>PreAuthenticatedAuthenticationProvider</code> &#30340;&#39564;&#35777;&#35201;&#27714;&#65292;&#20195;&#34920;&#23494;&#30721;&#30340; <code>getPreAuthenticatedCredentials()</code> &#24517;&#39035;&#35201;&#26377;&#20010;&#20540;&#65292;&#25152;&#20197;&#38543;&#20415;&#36820;&#22238;&#19968;&#20018;&#25991;&#26412;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-21</strong>&#12288;&#26657;&#39564; JWT &#20196;&#29260;&#30340; <code>JwtAuthenticationFilter</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>public class JwtAuthenticationFilter extends AbstractPreAuthenticatedProcessingFilter {
    @Autowired
    private JwtTokenHelper jwtTokenHelper;

    @Override
    protected Object getPreAuthenticatedPrincipal(HttpServletRequest request) {
        String header = request.getHeader(HttpHeaders.AUTHORIZATION);
        if (!StringUtils.startsWith(header, "Bearer ")) {
            return null;
        }
        String token = StringUtils.substring(header, 7);
        Jws&lt;Claims&gt; jws = jwtTokenHelper.parseToken(token);
        return jws.getBody().getSubject();
    }

    @Override
    protected Object getPreAuthenticatedCredentials(HttpServletRequest request) {
        return "NO_PASSWORD_NEEDED";
    }
}</code></pre><p>&#26368;&#21518;&#23558;&#25152;&#26377;&#20869;&#23481;&#32452;&#35013;&#36215;&#26469;&#65292;&#37197;&#32622;&#36807;&#31243;&#36824;&#26159;&#25918;&#22312; <code>WebSecurityConfiguration</code> &#20013;&#65292;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-22 &#25152;&#31034;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-22</strong>&#12288;<code>WebSecurityConfiguration</code> &#20013;&#19982; JWT &#30456;&#20851;&#30340;&#20195;&#30721;&#29255;&#27573;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true, jsr250Enabled = true)
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Autowired
    private UserDetailsService userDetailsService;

    @Bean
    public JwtAuthenticationFilter jwtAuthenticationFilter() throws Exception {
        JwtAuthenticationFilter filter = new JwtAuthenticationFilter();
        filter.setAuthenticationManager(authenticationManagerBean());
        return filter;
    }

    @Bean
    public PreAuthenticatedAuthenticationProvider jwtPreAuthenticatedAuthenticationProvider() {
        PreAuthenticatedAuthenticationProvider provider = new PreAuthenticatedAuthenticationProvider();
        provider.setPreAuthenticatedUserDetailsService(
            new UserDetailsByNameServiceWrapper&lt;&gt;(userDetailsService));
        return provider;
    }

    @Bean("authenticationManager")
    @Override
    public AuthenticationManager authenticationManagerBean() throws Exception {
        return super.authenticationManagerBean();
    }
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.addFilterAt(jwtAuthenticationFilter(), AbstractPreAuthenticatedProcessingFilter.class)
             .csrf().disable()
             // .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
             .exceptionHandling()
             .defaultAuthenticationEntryPointFor(
                 new LoginUrlAuthenticationEntryPoint("/login"), new MediaTypeRequestMatcher(MediaType.TEXT_HTML))
             .defaultAuthenticationEntryPointFor(new HttpStatusEntryPoint(HttpStatus.UNAUTHORIZED),
                 new MediaTypeRequestMatcher(MediaType.APPLICATION_JSON)).and()
             .anonymous()
             // &#30465;&#30053;&#21518;&#32493;&#37197;&#32622;
    }

    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.authenticationProvider(jwtPreAuthenticatedAuthenticationProvider())
            .userDetailsService(userDetailsService);
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#19978;&#38754;&#30340;&#20195;&#30721;&#38656;&#35201;&#27880;&#24847;&#20197;&#19979;&#20960;&#28857;&#65306;</p><p>(1) &#22240;&#20026;&#25105;&#20204;&#30340;&#20196;&#29260;&#20013;&#21482;&#26377;&#29992;&#25143;&#21517;&#30340;&#20449;&#24687;&#65292;&#26410;&#21253;&#21547;&#26435;&#38480;&#65292;&#25152;&#20197; <code>PreAuthenticatedAuthentication Provider</code> &#22312;&#39564;&#35777;&#21518;&#36824;&#38656;&#35201;&#20174; <code>UserDetailsService</code> &#20013;&#26681;&#25454;&#29992;&#25143;&#21517;&#21462;&#20986;&#29992;&#25143;&#20449;&#24687;&#65292;&#36825;&#37324;&#23601;&#35201;&#29992; <code>UserDetailsByNameServiceWrapper</code> &#23553;&#35013;&#19968;&#19979;&#65307;</p><p>(2) &#33258;&#23450;&#20041;&#30340; <code>PreAuthenticatedAuthenticationProvider</code> &#38656;&#35201;&#22622;&#20837; <code>AuthenticationManager</code> &#37324;&#65292;&#26368;&#21518;&#30340; <code>configure()</code> &#26041;&#27861;&#23601;&#26159;&#29992;&#26469;&#37197;&#32622; <code>AuthenticationManager</code> &#30340;&#65307;</p><p>(3) <code>HttpSecurity.addFilterAt()</code> &#21487;&#20197;&#22312; <code>Filter</code> &#38142;&#30340;&#25351;&#23450;&#20301;&#32622;&#25554;&#20837; <code>Filter</code>&#65292;&#25105;&#20204;&#29992;&#23427;&#26469;&#25554;&#20837;&#33258;&#24049;&#24320;&#21457;&#30340; <code>JwtAuthenticationFilter</code>&#65307;</p><p>(4) &#30001;&#20110;&#26159;&#31243;&#24207;&#20043;&#38388;&#30340;&#20132;&#20114;&#65292;&#30452;&#25509;&#22312;&#22836;&#37324;&#25658;&#24102;&#36523;&#20221;&#20449;&#24687;&#65292;&#25152;&#20197;&#36825;&#37324;&#35201;&#20851;&#38381; CSRF &#38450;&#25252;&#65307;</p><p>(5) &#27491;&#24120;&#24773;&#20917;&#19979;&#65292;&#22914;&#26524;&#31243;&#24207;&#20840;&#26159;&#22788;&#29702; <code>REST</code> &#35831;&#27714;&#30340;&#65292;&#21487;&#20197;&#23558;&#20250;&#35805;&#31574;&#30053;&#35774;&#32622;&#20026; <code>STATELESS</code>&#65307;</p><p>(6) &#22914;&#26524;&#35831;&#27714;&#20013;&#26410;&#25658;&#24102; JWT &#20196;&#29260;&#65292;&#38656;&#35201;&#32473;&#19968;&#20010;&#26126;&#30830;&#30340;&#25552;&#31034;&#65292;&#20043;&#21069;&#30340;&#34920;&#21333;&#30331;&#24405;&#29992;&#30340;&#26159; <code>LoginUrlAuthenticationEntryPoint</code>&#65292;&#36825;&#37324;&#25105;&#20204;&#28155;&#21152;&#19968;&#20010;&#38024;&#23545; <code>application/json</code> &#35831;&#27714;&#26377;&#25928;&#30340; <code>HttpStatusEntryPoint</code>&#65292;&#23427;&#20250;&#36820;&#22238;&#19968;&#20010; <code>401 Unauthorized</code> &#21709;&#24212;&#12290;</p><p>&#36825;&#20010;&#26381;&#21153;&#31471;&#30340;&#24320;&#21457;&#22522;&#26412;&#23601;&#21040;&#27492;&#20026;&#27490;&#20102;&#65292;&#20855;&#20307;&#30340;&#23458;&#25143;&#31471;&#35813;&#22914;&#20309;&#20351;&#29992;&#65292;&#25105;&#20204;&#20250;&#22312; 10.4 &#33410;&#23637;&#24320;&#12290;</p><h2 id="nav_point_158">10.3&#12288;&#35775;&#38382;&#25480;&#26435;</h2><p>&#36890;&#36807;&#19978;&#19968;&#33410;&#30340;&#23398;&#20064;&#65292;&#25105;&#20204;&#21487;&#20197;&#20351;&#29992;&#36523;&#20221;&#35748;&#35777;&#26469;&#21028;&#26029;&#35841;&#33021;&#35775;&#38382;&#31995;&#32479;&#20102;&#65292;&#20294;&#19968;&#20010;&#31995;&#32479;&#36890;&#24120;&#20250;&#26377;&#24456;&#22810;&#21151;&#33021;&#65292;&#22914;&#26524;&#21482;&#26159;&#31548;&#32479;&#22320;&#36890;&#36807;&#30331;&#24405;&#26469;&#25511;&#21046;&#65292;&#26410;&#20813;&#31890;&#24230;&#22826;&#31895;&#20102;&#12290;&#22312;&#30331;&#24405;&#36827;&#31995;&#32479;&#21518;&#65292;&#25105;&#20204;&#36824;&#24076;&#26395;&#33021;&#21028;&#26029;&#29992;&#25143;&#20855;&#20307;&#33021;&#35775;&#38382;&#21738;&#20010;&#21151;&#33021;&#65292;&#36825;&#23601;&#26159;&#35775;&#38382;&#25480;&#26435;&#12290;&#27599;&#20010;&#29992;&#25143;&#21487;&#20197;&#26377;&#19981;&#21516;&#30340;&#26435;&#38480;&#65292;&#33021;&#35775;&#38382;&#20160;&#20040;&#65292;&#19981;&#33021;&#35775;&#38382;&#20160;&#20040;&#65292;&#37117;&#21487;&#20197;&#29992; Spring Security &#31649;&#29702;&#36215;&#26469;&#12290;</p><h3 id="nav_point_159">10.3.1&#12288;&#35775;&#38382;&#25480;&#26435;&#30340;&#21028;&#26029;&#26041;&#24335;</h3><p>&#29992;&#25143;&#30331;&#24405;&#21518;&#65292;&#25105;&#20204;&#21487;&#20197;&#21462;&#24471; Authentication &#23545;&#35937;&#65292;&#20854;&#20013;&#26377;&#19968;&#31995;&#21015; GrantedAuthority&#65292;&#23427;&#20204;&#23601;&#20195;&#34920;&#20102;&#24403;&#21069;&#29992;&#25143;&#25317;&#26377;&#30340;&#26435;&#38480;&#65292;AccessDecisionManager &#20250;&#35835;&#21462;&#36825;&#20123;&#26435;&#38480;&#36827;&#34892;&#21028;&#26029;&#65306;&#20915;&#31574;&#29992;&#25143;&#23545;&#20110;&#27491;&#22312;&#35775;&#38382;&#30340;&#30446;&#26631;&#26159;&#21542;&#25317;&#26377;&#23545;&#24212;&#30340;&#26435;&#38480;&#12290;</p><p>Spring Security &#20869;&#32622;&#30340; <code>AccessDecisionManager</code> &#23454;&#29616;&#37319;&#29992;&#20102;&#25237;&#31080;&#30340;&#26041;&#24335;&#65292;&#19968;&#20849;&#26377;&#19977;&#31181;&#19981;&#21516;&#30340;&#20915;&#31574;&#26041;&#24335;&#65292;&#20855;&#20307;&#22914;&#34920; 10-7 &#25152;&#31034;&#12290;&#23545;&#20110; Web &#24037;&#31243;&#32780;&#35328;&#65292;<code>AbstractInterceptUrlConfigurer</code> &#20013;&#40664;&#35748;&#20351;&#29992;&#20102; <code>AffirmativeBased</code> &#36825;&#20010;&#23454;&#29616;&#12290;</p><p><strong>&#34920; 10-7&#12288;Spring Security &#20869;&#32622;&#30340; <code>AccessDecisionManager</code> &#23454;&#29616;&#31867;</strong></p><table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#23454;&#29616;&#31867;</p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#35828;&#26126;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>AffirmativeBased</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#21482;&#38656;&#35201;&#26377;&#19968;&#31080;&#36190;&#21516;&#21363;&#35270;&#20026;&#21516;&#24847;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>UnanimousBased</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#38656;&#35201;&#25152;&#26377;&#25104;&#21592;&#37117;&#25237;&#36190;&#21516;&#31080;&#25165;&#33021;&#35270;&#20026;&#21516;&#24847;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>ConsensusBased</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#22810;&#25968;&#20154;&#25237;&#36190;&#21516;&#31080;&#21363;&#35270;&#20026;&#21516;&#24847;</p></td>
</tr>
</tbody>
</table><p>&#37027;&#20855;&#20307;&#30340;&#25237;&#31080;&#21160;&#20316;&#21448;&#35813;&#35841;&#26469;&#20570;&#21602;&#65311;<code>AccessDecisionManager</code> &#30340;&#23454;&#29616;&#31867;&#20013;&#37117;&#20250;&#27880;&#20837;&#19968;&#31995;&#21015;&#30340; <code>AccessDecisionVoter</code>&#65292;<code>vote()</code> &#26041;&#27861;&#36127;&#36131;&#20855;&#20307;&#30340;&#25237;&#31080;&#65292;&#36820;&#22238;&#21487;&#20197;&#26159;<strong>&#36190;&#21516;</strong>&#65288;<code>ACCESS_GRANTED</code>&#65292;&#20540;&#26159; <code>1</code>&#65289;&#12289;<strong>&#24323;&#26435;</strong>&#65288;<code>ACCESS_ABSTAIN</code>&#65292;&#20540;&#26159; <code>0</code>&#65289;&#21644;<strong>&#21453;&#23545;</strong>&#65288;<code>ACCESS_DENIED</code>&#65292;&#20540;&#26159; <code>-1</code>&#65289;&#12290;Spring Security &#20013;&#21516;&#26679;&#20063;&#20869;&#32622;&#20102;&#19981;&#23569;&#23454;&#29616;&#65292;&#20363;&#22914;&#65292;<code>RoleVoter</code> &#23601;&#21487;&#20197;&#26681;&#25454;&#24403;&#21069;&#29992;&#25143;&#30340;&#35282;&#33394;&#26469;&#36827;&#34892;&#25237;&#31080;&#65292;&#25317;&#26377;&#25351;&#23450;&#35282;&#33394;&#21363;&#25237;&#36190;&#21516;&#31080;&#65292;&#21542;&#21017;&#25237;&#21453;&#23545;&#31080;&#12290;&#22312; Spring Security &#20013;&#65292;&#35282;&#33394;&#21487;&#20197;&#35270;&#20026;&#29305;&#27530;&#30340;&#26435;&#38480;&#65292;&#20197; <code>ROLE_</code> &#25171;&#22836;&#65292;&#24403;&#28982;&#20063;&#21487;&#20197;&#35774;&#32622;&#21035;&#30340;&#21069;&#32512;&#65292;&#19981;&#36807;&#19968;&#33324;&#19981;&#21435;&#35843;&#25972;&#12290;</p><h3 id="nav_point_160">10.3.2&#12288;&#22522;&#26412;&#30340;&#26435;&#38480;&#37197;&#32622;</h3><p>&#22312;&#20102;&#35299;&#20102;&#26694;&#26550;&#20013;&#26435;&#38480;&#31649;&#29702;&#30340;&#22522;&#26412;&#30693;&#35782;&#21518;&#65292;&#35753;&#25105;&#20204;&#36890;&#36807;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#30340;&#20363;&#23376;&#26469;&#30475;&#30475; Spring Security &#26435;&#38480;&#30340;&#20855;&#20307;&#29992;&#27861;&#12290;</p><blockquote>
<p><strong>&#38656;&#27714;&#25551;&#36848;</strong>&#12288;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#30340;&#32463;&#33829;&#36880;&#28176;&#27493;&#20837;&#27491;&#35268;&#65292;&#29983;&#24847;&#36234;&#26469;&#36234;&#22909;&#20102;&#65292;&#20004;&#20010;&#21592;&#24037;&#24050;&#32463;&#26080;&#27861;&#28385;&#36275;&#26085;&#24120;&#30340;&#32463;&#33829;&#38656;&#35201;&#65292;&#24215;&#38271;&#25171;&#31639;&#20877;&#25307;&#19968;&#20123;&#21592;&#24037;&#12290;&#20154;&#22810;&#20102;&#65292;&#31649;&#29702;&#26435;&#38480;&#23601;&#35201;&#35774;&#32622;&#24471;&#26356;&#32454;&#19968;&#28857;&#20799;&#12290;&#29616;&#22312;&#24076;&#26395;&#25353;&#34920; 10-8 &#36825;&#26679;&#26469;&#35774;&#35745;&#23545;&#33756;&#21333;&#21644;&#35746;&#21333;&#30340;&#26435;&#38480;&#12290;</p>
<p><strong>&#34920; 10-8&#12288;&#19981;&#21516;&#29992;&#25143;&#23545;&#33756;&#21333;&#21644;&#35746;&#21333;&#30340;&#35775;&#38382;&#26435;&#38480;</strong></p>
<table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#35282;&#33394;</p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#26435;&#38480;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#36335;&#20154;</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#30475;&#33756;&#21333;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#21040;&#24215;&#39038;&#23458;</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#30475;&#33756;&#21333;&#65292;&#30475;&#35746;&#21333;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#35843;&#33590;&#24072;</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#30475;&#33756;&#21333;&#65292;&#30475;&#35746;&#21333;&#65292;&#19979;&#35746;&#21333;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#24215;&#38271;</p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#30475;&#33756;&#21333;&#65292;&#25913;&#33756;&#21333;&#65292;&#30475;&#35746;&#21333;&#65292;&#19979;&#35746;&#21333;</p></td>
</tr>
</tbody>
</table>
</blockquote><p>&#26681;&#25454;&#38656;&#27714;&#65292;&#25105;&#20204;&#24471;&#30693;&#19968;&#20849;&#38656;&#35201;&#22235;&#31181;&#26435;&#38480;&#65292;&#21363; <code>READ_MENU</code>&#12289;<code>WRITE_MENU</code>&#12289;<code>READ_ORDER</code> &#21644; <code>WRITE_ORDER</code>&#12290;&#36335;&#20154;&#20854;&#23454;&#23601;&#26159;&#25105;&#20204;&#36890;&#24120;&#25152;&#35828;&#30340;&#21311;&#21517;&#29992;&#25143;&#65292;&#22312; Spring Security &#20013;&#65292;&#26080;&#39035;&#26435;&#38480;&#25511;&#21046;&#65292;&#21487;&#20197;&#20687;&#20043;&#21069;&#37027;&#26679;&#37197;&#32622; <code>permitAll()</code>&#65292;&#20294;&#22914;&#26524;&#26159;&#26082;&#24076;&#26395;&#24320;&#25918;&#32473;&#26410;&#30331;&#24405;&#30340;&#20154;&#35775;&#38382;&#65292;&#21448;&#24076;&#26395;&#36825;&#20010; URL &#30340;&#35775;&#38382;&#26159;&#26377;&#26435;&#38480;&#35201;&#27714;&#30340;&#65292;&#23601;&#21487;&#20197;&#20351;&#29992;&#21311;&#21517;&#29992;&#25143;&#65292;&#20026;&#21311;&#21517;&#29992;&#25143;&#36171;&#20104;&#19968;&#23450;&#30340;&#26435;&#38480;&#12290;</p><p>&#36890;&#36807; <code>HttpSecurity</code> &#30340; <code>anonymous()</code> &#26041;&#27861;&#21487;&#20197;&#35774;&#32622;&#21311;&#21517;&#29992;&#25143;&#30456;&#20851;&#30340;&#20869;&#23481;&#65292;&#20363;&#22914; <code>authorities()</code> &#21487;&#20197;&#35774;&#32622;&#25317;&#26377;&#30340;&#26435;&#38480;&#65292;<code>key()</code> &#21487;&#20197;&#35774;&#32622;&#27969;&#31243;&#20013;&#20256;&#36882;&#21311;&#21517;&#36523;&#20221;&#20449;&#24687;&#30340;&#21442;&#25968;&#21517;&#12290;</p><p>&#20195;&#30721;&#31034;&#20363; 10-23<span class="&#27880;&#37322;&#32534;&#21495;">16</span> &#20013;&#23601;&#37197;&#32622;&#20102;&#21311;&#21517;&#29992;&#25143;&#30340;&#30456;&#20851;&#36873;&#39033;&#65292;&#36824;&#26377;&#21508;&#20010;&#36335;&#24452;&#23545;&#24212;&#30340;&#26435;&#38480;&#20449;&#24687;&#12290;&#21487;&#20197;&#30475;&#21040;&#65292;&#25105;&#20204;&#20026;&#21311;&#21517;&#29992;&#25143;&#36171;&#20104;&#20102; <code>READ_MENU</code> &#30340;&#26435;&#38480;&#65292;&#38024;&#23545; <code>/menu</code> &#21450; <code>/menu/**</code> &#30340; <code>GET</code> &#35831;&#27714;&#37117;&#38656;&#35201;&#36825;&#20010;&#26435;&#38480;&#12290;&#23545; <code>/menu</code> &#21644; <code>/order</code> &#30340; <code>GET</code> &#21644; <code>POST</code> &#35831;&#27714;&#65292;&#25105;&#20204;&#37117;&#20570;&#20102;&#30456;&#24212;&#30340;&#26435;&#38480;&#25511;&#21046;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">16</span>&#36825;&#20010;&#20363;&#23376;&#22312; ch10/binarytea-authorities &#39033;&#30446;&#20013;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-23</strong>&#12288;&#38024;&#23545;&#21508;&#20010; URL &#30340;&#35775;&#38382;&#26435;&#38480;&#37197;&#32622;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.anonymous()
                .key("binarytea_anonymous")
                .authorities("READ_MENU").and()
            .authorizeRequests()
                .antMatchers("/").permitAll()
                .mvcMatchers("/actuator/*").permitAll()
                .mvcMatchers(HttpMethod.GET, "/menu", "/menu/**").hasAuthority("READ_MENU")
                .mvcMatchers(HttpMethod.POST, "/menu").hasAuthority("WRITE_MENU")
                .mvcMatchers(HttpMethod.GET, "/order").hasAuthority("READ_ORDER")
                .mvcMatchers(HttpMethod.POST, "/order").hasAuthority("WRITE_ORDER")
                .anyRequest().authenticated().and()
            // &#30465;&#30053;&#20854;&#20182;&#37197;&#32622;
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#20551;&#35774;&#25105;&#20204;&#26368;&#26089;&#30340; <code>LiLei</code> &#21644; <code>HanMeimei</code> &#20998;&#21035;&#26159;&#35843;&#33590;&#24072;&#21644;&#32463;&#29702;&#30340;&#35282;&#33394;&#65292;&#37027;&#20182;&#20204;&#23601;&#35201;&#26377;&#30456;&#24212;&#30340;&#26435;&#38480;&#65292;<code>HanMeimei</code> &#26159;&#29992;&#20195;&#30721;&#21019;&#24314;&#30340;&#65292;&#37027;&#36825;&#27573;&#20195;&#30721;&#23601;&#35201;&#35843;&#25972;&#20026;&#20195;&#30721;&#31034;&#20363; 10-24 &#37027;&#26679;&#65292;&#37197;&#32622;&#23436;&#25972;&#30340;&#26435;&#38480;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-24</strong>&#12288;&#35843;&#25972;&#20102;&#26435;&#38480;&#30340; <code>HanMeimei</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Bean
public UserDetailsService userDetailsService(ObjectProvider&lt;DataSource&gt; dataSources) {
    JdbcUserDetailsManager userDetailsManager = new JdbcUserDetailsManager();
    userDetailsManager.setDataSource(dataSources.getIfAvailable());
    UserDetails manager = User.builder().username("HanMeimei")
        .password("{bcrypt}$2a$10$iAty2GrJu9WfpksIen6qX.vczLmXlp.1q1OHBxWEX8BIldtwxHl3u")
        .authorities("READ_MENU", "WRITE_MENU", "READ_ORDER", "WRITE_ORDER").build();
    userDetailsManager.createUser(manager);
    return userDetailsManager;
}</code></pre><p>&#32780; <code>LiLei</code> &#21017;&#26159;&#22312; data.sql &#20013;&#36890;&#36807; SQL &#20195;&#30721;&#21021;&#22987;&#21270;&#30340;&#65292;&#39034;&#20415;&#25105;&#20204;&#20877;&#21152;&#19968;&#20301;&#26222;&#36890;&#29992;&#25143;&#24352;&#19977;&#65292;&#25130;&#21462;&#20986;&#30340;&#20855;&#20307; SQL &#22914;&#20195;&#30721;&#31034;&#20363; 10-25 &#25152;&#31034;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-25</strong>&#12288;<code>LiLei</code> &#21644; <code>ZhangSan</code> &#30340;&#21021;&#22987;&#21270; SQL</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>insert into users (username, password, enabled) values ('LiLei', '{bcrypt}$2a$10$iAty2GrJu9WfpksIen6qX.vczLmXlp.1q1OHBxWEX8BIldtwxHl3u', true);
insert into authorities (username, authority) values ('LiLei', 'READ_MENU');
insert into authorities (username, authority) values ('LiLei', 'READ_ORDER');
insert into authorities (username, authority) values ('LiLei', 'WRITE_ORDER');

insert into users (username, password, enabled) values ('ZhangSan',
    '{bcrypt}$2a$10$iAty2GrJu9WfpksIen6qX.vczLmXlp.1q1OHBxWEX8BIldtwxHl3u', true);
insert into authorities (username, authority) values ('ZhangSan', 'READ_MENU');
insert into authorities (username, authority) values ('ZhangSan', 'READ_ORDER');</code></pre><p>&#19978;&#38754;&#30340;&#20363;&#23376;&#20013;&#65292;&#25105;&#20204;&#20026;&#19968;&#20010;&#29992;&#25143;&#37197;&#32622;&#20102;&#22909;&#22810;&#26435;&#38480;&#65292;&#19981;&#20813;&#26377;&#20123;&#40635;&#28902;&#65292;&#22914;&#26524;&#37197;&#32622;&#33021;&#31616;&#21333;&#20123;&#23601;&#26356;&#22909;&#20102;&#12290;&#26681;&#25454;&#34920; 10-8&#65292;&#25105;&#20204;&#35774;&#32622;&#22235;&#31181;&#19981;&#21516;&#30340;&#35282;&#33394;&#65292;&#20998;&#21035;&#26159; <code>ROLE_ANONYMOUS</code>&#12289;<code>ROLE_USER</code>&#12289;<code>ROLE_TEA_MAKER</code> &#21644; <code>ROLE_MANAGER</code>&#65292;&#23545;&#24212;&#26377;&#29992;&#34920;&#20013;&#30340;&#19981;&#21516;&#26435;&#38480;&#12290;&#28982;&#21518;&#35843;&#25972; <code>HanMeimei</code>&#12289;<code>LiLei</code> &#21644; <code>ZhangSan</code> &#30340;&#35282;&#33394;&#65292;&#19981;&#20877;&#37197;&#32622;&#35814;&#32454;&#30340;&#26435;&#38480;&#65292;&#30452;&#25509;&#37197;&#32622;&#19981;&#21516;&#30340;&#35282;&#33394;&#65292;&#23601;&#20687;&#20195;&#30721;&#31034;&#20363; 10-26<span class="&#27880;&#37322;&#32534;&#21495;">17</span> &#19982;&#20195;&#30721;&#31034;&#20363; 10-27 &#37027;&#26679;&#12290;&#20195;&#30721;&#31034;&#20363; 10-26 &#20013;&#36890;&#36807; <code>UserBuilder.roles()</code> &#26041;&#27861;&#21487;&#20197;&#30452;&#25509;&#35774;&#32622;&#35282;&#33394;&#65292;&#35774;&#32622;&#26102;&#26080;&#39035;&#24102; <code>ROLE_</code> &#21069;&#32512;&#65292;Spring Security &#20250;&#33258;&#21160;&#26681;&#25454;&#37197;&#32622;&#20026;&#25105;&#20204;&#24102;&#19978;&#21069;&#32512;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">17</span>&#36825;&#20010;&#20363;&#23376;&#22312; ch10/binarytea-role &#39033;&#30446;&#20013;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-26</strong>&#12288;&#20026; <code>HanMeimei</code> &#35774;&#32622;&#35282;&#33394;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Bean
public UserDetailsService userDetailsService(ObjectProvider&lt;DataSource&gt; dataSources) {
    JdbcUserDetailsManager userDetailsManager = new JdbcUserDetailsManager();
    userDetailsManager.setDataSource(dataSources.getIfAvailable());
    UserDetails manager = User.builder().username("HanMeimei")
        .password("{bcrypt}$2a$10$iAty2GrJu9WfpksIen6qX.vczLmXlp.1q1OHBxWEX8BIldtwxHl3u")
        .roles("MANAGER").build();
    userDetailsManager.createUser(manager);
    return userDetailsManager;
}</code></pre><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-27</strong>&#12288;&#20026; <code>LiLei</code> &#21644; <code>ZhangSan</code> &#35774;&#32622;&#35282;&#33394;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>insert into users (username, password, enabled) values ('LiLei',
    '{bcrypt}$2a$10$iAty2GrJu9WfpksIen6qX.vczLmXlp.1q1OHBxWEX8BIldtwxHl3u', true);
insert into authorities (username, authority) values ('LiLei', 'ROLE_TEA_MAKER');

insert into users (username, password, enabled) values ('ZhangSan',
    '{bcrypt}$2a$10$iAty2GrJu9WfpksIen6qX.vczLmXlp.1q1OHBxWEX8BIldtwxHl3u', true);
insert into authorities (username, authority) values ('ZhangSan', 'ROLE_USER');</code></pre><p>URL &#23545;&#24212;&#30340;&#26435;&#38480;&#37197;&#32622;&#21487;&#20197;&#35843;&#25972;&#25104;&#19979;&#38754;&#36825;&#26679;&#65292;&#19981;&#36807;&#36825;&#31181;&#26041;&#24335;&#30475;&#36215;&#26469;&#20063;&#24456;&#22797;&#26434;&#65292;&#21482;&#26159;&#25226;&#21407;&#26412;&#21152;&#22312;&#29992;&#25143;&#19978;&#30340;&#37027;&#20123;&#35201;&#19981;&#26029;&#37325;&#22797;&#30340;&#26435;&#38480;&#31649;&#29702;&#25644;&#21040;&#20102;&#20195;&#30721;&#37324;&#65292;&#21482;&#38656;&#35201;&#37197;&#32622;&#19968;&#27425;&#23601;&#21487;&#20197;&#20102;&#65306;<span class="&#27880;&#37322;&#32534;&#21495;">18</span></p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">18</span>&#22312; Spring Security &#20013;&#65292;&#35282;&#33394;&#20854;&#23454;&#20063;&#21487;&#20197;&#26377;&#32487;&#25215;&#20851;&#31995;&#65292;<code>RoleVoter</code> &#20013;&#21487;&#20197;&#33258;&#23450;&#20041;&#35282;&#33394;&#23618;&#32423;&#12290;&#25105;&#20204;&#22312;&#26412;&#20070;&#20013;&#20250;&#20171;&#32461;&#19968;&#31181;&#30475;&#36215;&#26469;&#26356;&#22909;&#30340;&#26041;&#27861;&#65292;&#25152;&#20197;&#23601;&#19981;&#23637;&#24320; <code>RoleVoter</code> &#30340;&#23450;&#21046;&#37197;&#32622;&#20102;&#12290;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Override
protected void configure(HttpSecurity http) throws Exception {
    http.anonymous()
        .key("binarytea_anonymous").and()
        .authorizeRequests()
            .antMatchers("/").permitAll()
            .mvcMatchers("/actuator/*").permitAll()
            .mvcMatchers(HttpMethod.GET, "/menu", "/menu/**")
            .hasAnyRole("ANONYMOUS", "USER", "TEA_MAKER", "MANAGER")
            .mvcMatchers(HttpMethod.POST, "/menu").hasRole("MANAGER")
            .mvcMatchers(HttpMethod.GET, "/order").hasAnyRole("USER", "TEA_MAKER", "MANAGER")
            .mvcMatchers(HttpMethod.POST, "/order").hasAnyRole("TEA_MAKER", "MANAGER")
            .anyRequest().authenticated().and()
        // &#30465;&#30053;&#20854;&#20182;&#37197;&#32622;
}</code></pre><p>&#37027;&#26377;&#27809;&#26377;&#26356;&#31616;&#21333;&#30340;&#26041;&#24335;&#21602;&#65311;&#31572;&#26696;&#26159;&#32943;&#23450;&#30340;&#12290;&#25105;&#20204;&#21487;&#20197;&#24314;&#31435;&#19968;&#20010;&#35282;&#33394;&#19982;&#26435;&#38480;&#30340;&#26144;&#23556;&#20851;&#31995;&#65292;&#36890;&#24120;&#22312;&#23454;&#38469;&#29983;&#20135;&#20013;&#20250;&#23558;&#36825;&#20123;&#20449;&#24687;&#19982;&#29992;&#25143;&#19968;&#36215;&#37197;&#32622;&#22312;&#25968;&#25454;&#24211;&#37324;&#65292;&#36825;&#37324;&#25105;&#20204;&#31616;&#21333;&#19968;&#20123;&#65292;&#23558;&#36825;&#20123;&#26144;&#23556;&#22266;&#21270;&#22312;&#20195;&#30721;&#20013;&#12290;&#25105;&#20204;&#21487;&#20197;&#20687;&#20195;&#30721;&#31034;&#20363; 10-28 &#37027;&#26679;&#23454;&#29616;&#33258;&#24049;&#30340; <code>UserDetailsManager</code>&#65292;&#36890;&#36807; <code>JdbcUserDetailsManager</code> &#39044;&#30041;&#30340; <code>addCustomAuthorities()</code> &#25193;&#23637;&#28857;&#65292;&#26681;&#25454;&#24050;&#30693;&#26435;&#38480;&#20013;&#26377;&#29992;&#30340;&#35282;&#33394;&#20449;&#24687;&#65288;&#21363; <code>ROLE_</code> &#25171;&#22836;&#30340;&#26435;&#38480;&#65289;&#65292;&#28155;&#21152;&#35813;&#35282;&#33394;&#23545;&#24212;&#30340;&#26435;&#38480;&#12290;&#36825;&#26679;&#19968;&#26469;&#65292;&#22312;&#29992;&#25143;&#20391;&#23601;&#21482;&#38656;&#35201;&#37197;&#32622;&#35282;&#33394;&#65292;&#27599;&#20010; URL &#20063;&#21482;&#38656;&#35201;&#37197;&#32622;&#25152;&#38656;&#26435;&#38480;&#23601;&#21487;&#20197;&#20102;&#12290;<code>WebSecurityConfiguration</code> &#30340; <code>configure()</code> &#25913;&#22238;&#20195;&#30721;&#31034;&#20363; 10-23&#65292;<code>userDetailsService()</code> &#26041;&#27861;&#36820;&#22238;&#30340; Bean &#20174; <code>JdbcUserDetailsManager</code> &#25913;&#20026; <code>RoleBasedJdbcUserDetailsManager</code> &#31867;&#22411;&#23601;&#21487;&#20197;&#20102;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-28</strong>&#12288;&#21253;&#21547;&#29992;&#25143;&#35282;&#33394;&#37197;&#32622;&#30340; <code>RoleBasedJdbcUserDetailsManager</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Setter
public class RoleBasedJdbcUserDetailsManager extends JdbcUserDetailsManager {
    private Map&lt;String, List&lt;GrantedAuthority&gt;&gt; roleAuthoritiesMap = new HashMap&lt;&gt;();

    public RoleBasedJdbcUserDetailsManager() {
        roleAuthoritiesMap.put("ROLE_USER", AuthorityUtils.createAuthorityList("READ_MENU", "READ_ORDER"));
        roleAuthoritiesMap.put("ROLE_TEA_MAKER", AuthorityUtils.createAuthorityList("READ_MENU", "READ_ORDER", "WRITE_ORDER"));
        roleAuthoritiesMap.put("ROLE_MANAGER", AuthorityUtils.createAuthorityList("READ_MENU", "WRITE_MENU", "READ_ORDER", "WRITE_ORDER"));
    }

    @Override
    protected void addCustomAuthorities(String username, List&lt;GrantedAuthority&gt; authorities) {
        new ArrayList&lt;&gt;(authorities).stream().filter(ga -&gt; ga.getAuthority().toUpperCase()
            .startsWith("ROLE_")).forEach(r -&gt; authorities.addAll(roleAuthoritiesMap.get(r.getAuthority())));
    }
}</code></pre><p>&#22312;&#35774;&#32622; URL &#30340;&#26435;&#38480;&#26102;&#65292;&#25105;&#20204;&#21487;&#20197;&#20351;&#29992;&#34920; 10-9 &#20013;&#30340;&#26041;&#27861;&#65292;&#22312;&#19978;&#38754;&#30340;&#20363;&#23376;&#37324;&#20854;&#23454;&#24050;&#32463;&#29992;&#21040;&#20102; <code>hasAuthority()</code>&#12289;<code>hasAnyAuthority()</code> &#21644; <code>hasRole()</code>&#12290;</p><p><strong>&#34920; 10-9&#12288;&#35774;&#32622;&#26435;&#38480;&#26102;&#30340;&#24120;&#29992;&#26041;&#27861;</strong></p><table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#37197;&#32622;&#26041;&#27861;</p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#35828;&#26126;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>hasAuthority()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25317;&#26377;&#26576;&#31181;&#26435;&#38480;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>hasAnyAuthority()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25317;&#26377;&#25351;&#23450;&#26435;&#38480;&#20013;&#30340;&#19968;&#31181;&#25110;&#20960;&#31181;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>hasRole()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25317;&#26377;&#26576;&#31181;&#35282;&#33394;&#65292;&#36825;&#37324;&#20889;&#35282;&#33394;&#26102;&#19981;&#38656;&#35201; <code>ROLE_</code> &#21069;&#32512;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>hasAnyRole()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25317;&#26377;&#25351;&#23450;&#35282;&#33394;&#20013;&#30340;&#19968;&#31181;&#25110;&#20960;&#31181;&#65292;&#36825;&#37324;&#20889;&#35282;&#33394;&#26102;&#19981;&#38656;&#35201; <code>ROLE_</code> &#21069;&#32512;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>anonymous()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#24403;&#21069;&#26159;&#21311;&#21517;&#29992;&#25143;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>authenticated()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#24403;&#21069;&#26159;&#32463;&#36807;&#35748;&#35777;&#30340;&#29992;&#25143;&#65292;&#36890;&#36807;&#8220;&#35760;&#20303;&#25105;&#8221;&#33719;&#21462;&#21040;&#20449;&#24687;&#30340;&#29992;&#25143;&#20063;&#31639;&#35748;&#35777;&#36807;&#30340;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>fullyAuthenticated()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#24403;&#21069;&#29992;&#25143;&#26159;&#32463;&#36807;&#23436;&#25972;&#36523;&#20221;&#35748;&#35777;&#30340;&#65292;&#20063;&#23601;&#26159;&#38750;&#8220;&#35760;&#20303;&#25105;&#8221;&#30340;&#29992;&#25143;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>rememberMe()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#24403;&#21069;&#26159;&#8220;&#35760;&#20303;&#25105;&#8221;&#35748;&#35777;&#30340;&#29992;&#25143;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>hasIpAddress()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#31526;&#21512;&#29305;&#23450; IP &#22320;&#22336;&#35268;&#21017;&#65292;&#20363;&#22914; 192.168.0.0/16</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>permitAll()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25152;&#26377;&#20154;&#37117;&#21487;&#20197;&#35775;&#38382;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>denyAll()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#25152;&#26377;&#20154;&#37117;&#19981;&#33021;&#35775;&#38382;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>not()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#35268;&#21017;&#21462;&#21453;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>access()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#36890;&#36807;&#34920;&#36798;&#24335;&#25351;&#23450;&#22797;&#26434;&#30340;&#35268;&#21017;</p></td>
</tr>
</tbody>
</table><p>&#20851;&#20110;&#26368;&#21518;&#19968;&#20010; <code>access()</code> &#26041;&#27861;&#65292;&#21487;&#20197;&#25351;&#23450;&#27604;&#36739;&#22797;&#26434;&#30340;&#34920;&#36798;&#24335;&#65292;&#25105;&#20204;&#21487;&#20197;&#23558;&#20195;&#30721;&#31034;&#20363; 10-23 &#20013;&#30340; <code>configure()</code> &#31245;&#20316;&#20462;&#25913;&#65292;&#21464;&#25104;&#20195;&#30721;&#31034;&#20363; 10-29 &#36825;&#26679;&#12290;&#26080;&#39035;&#20877;&#20026;&#21311;&#21517;&#29992;&#25143;&#25351;&#23450;&#26576;&#20010;&#26435;&#38480;&#65292;&#32780;&#26159;&#22312; <code>/menu</code> &#21644; <code>/menu/**</code> &#30340;&#35268;&#21017;&#20013;&#25351;&#23450;&#26159;&#21311;&#21517;&#29992;&#25143;&#25110;&#32773;&#26377; <code>READ_MENU</code> &#26435;&#38480;&#37117;&#21487;&#35775;&#38382;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-29</strong>&#12288;&#20351;&#29992; <code>access()</code> &#37197;&#32622;&#30340;&#20195;&#30721;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Override
protected void configure(HttpSecurity http) throws Exception {
    http.anonymous()
            .key("binarytea_anonymous").and()
        .authorizeRequests()
            .antMatchers("/").permitAll()
            .mvcMatchers("/actuator/*").permitAll()
            .mvcMatchers(HttpMethod.GET, "/menu", "/menu/**")
            .access("isAnonymous() or hasAuthority('READ_MENU')")
            .mvcMatchers(HttpMethod.POST, "/menu").hasAuthority("WRITE_MENU")
            .mvcMatchers(HttpMethod.GET, "/order").hasAuthority("READ_ORDER")
            .mvcMatchers(HttpMethod.POST, "/order").hasAuthority("WRITE_ORDER")
            .anyRequest().authenticated().and()
        // &#30465;&#30053;&#20854;&#20182;&#37197;&#32622;
}</code></pre><p><code>access()</code> &#20013;&#21487;&#29992;&#30340;&#34920;&#36798;&#24335;&#22823;&#37096;&#20998;&#19982;&#34920; 10-9 &#20013;&#30340;&#26041;&#27861;&#24046;&#19981;&#22810;&#65292;&#20363;&#22914; <code>hasAuthority()</code>&#12289;<code>hasAnyAuthority()</code>&#12289;<code>hasRole</code> &#21644; <code>hasAnyRole()</code>&#65307;&#8220;&#25152;&#26377;&#20154;&#37117;&#21487;&#20197;&#35775;&#38382;&#8221;&#21644;&#8220;&#25152;&#26377;&#20154;&#37117;&#19981;&#33021;&#35775;&#38382;&#8221;&#19981;&#20877;&#26159;&#26041;&#27861;&#20102;&#65292;&#32780;&#26159;&#29992; <code>permitAll</code> &#21644; <code>denyAll</code>&#65292;&#30452;&#25509;&#20195;&#34920;&#20102;&#36820;&#22238; <code>true</code> &#21644; <code>false</code>&#65307;&#23545;&#20110;&#26159;&#21542;&#32463;&#36807;&#35748;&#35777;&#30340;&#21028;&#26029;&#21152;&#19978;&#20102; <code>is</code> &#21069;&#32512;&#65292;&#21464;&#20026;&#20102; <code>isAnonymous()</code>&#12289;<code>isRememberMe()</code>&#12289;<code>isAuthenticated()</code> &#21644; <code>isFullyAuthenticated()</code>&#65307;<code>principal</code> &#21644; <code>authentication</code> &#21017;&#20998;&#21035;&#34920;&#31034;&#20102;&#24403;&#21069;&#30331;&#24405;&#29992;&#25143;&#30340;&#20027;&#20307;&#20449;&#24687;&#65292;&#20197;&#21450; <code>SecurityContext</code> &#20013;&#30340; <code>Authentication</code> &#23545;&#35937;&#12290;</p><h3 id="nav_point_161">10.3.3&#12288;&#38754;&#21521;&#26041;&#27861;&#30340;&#35775;&#38382;&#25480;&#26435;</h3><p>&#20043;&#21069;&#25105;&#20204;&#20171;&#32461;&#30340;&#25480;&#26435;&#37117;&#26159;&#19982; Web &#30456;&#20851;&#30340;&#65292;&#22312; Web &#39029;&#38754;&#25110;&#32773; REST &#26381;&#21153;&#19978;&#36827;&#34892;&#25511;&#21046;&#65292;&#20294;&#23454;&#38469;&#19978; Spring Security &#33021;&#20570;&#21040;&#30340;&#36824;&#19981;&#27490;&#20110;&#27492;&#65292;&#23427;&#33021;&#26681;&#25454;&#24403;&#21069;&#29992;&#25143;&#30340;&#24773;&#20917;&#22312;&#26041;&#27861;&#32423;&#21035;&#19978;&#36827;&#34892;&#26657;&#39564;&#65292;&#20915;&#23450;&#24403;&#21069;&#30331;&#24405;&#30340;&#29992;&#25143;&#33021;&#21542;&#35843;&#29992;&#29305;&#23450;&#30340;&#26041;&#27861;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">19</span> &#36890;&#36807; Spring Security &#25552;&#20379;&#30340;&#27880;&#35299;&#65292;&#25110;&#32773;&#26159; JSR 250<span class="&#27880;&#37322;&#32534;&#21495;">20</span> &#30340;&#27880;&#35299;&#65292;&#21487;&#20197;&#22312;&#26041;&#27861;&#25191;&#34892;&#21069;&#21518;&#20570;&#20123;&#30456;&#23545;&#31616;&#21333;&#30340;&#21028;&#26029;&#65292;&#20363;&#22914;&#26159;&#21542;&#25317;&#26377;&#26576;&#31181;&#35282;&#33394;&#65292;&#20174;&#32780;&#20915;&#23450;&#33021;&#21542;&#25191;&#34892;&#26041;&#27861;&#12290;&#36825;&#20123;&#27880;&#35299;&#19968;&#33324;&#26159;&#21152;&#22312;&#39046;&#22495;&#26381;&#21153;&#23618;&#30340;&#26041;&#27861;&#19978;&#30340;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">19</span>&#30456;&#23545; Web &#30340;&#26435;&#38480;&#31649;&#25511;&#32780;&#35328;&#65292;&#36825;&#31181;&#29992;&#27861;&#30340;&#20986;&#38236;&#29575;&#27604;&#36739;&#20302;&#65292;&#22240;&#27492;&#22312;&#36825;&#37324;&#21482;&#26159;&#31616;&#21333;&#20171;&#32461;&#19968;&#19979;&#65292;&#22914;&#26524;&#24819;&#35201;&#28145;&#20837;&#20102;&#35299;&#26041;&#27861;&#23433;&#20840;&#30456;&#20851;&#30340;&#20869;&#23481;&#65292;&#21487;&#20197;&#21442;&#32771; Spring Security &#30340;&#23448;&#26041;&#25991;&#26723;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">20</span>JSR 250&#65292;&#21363; Common Annotations for the JavaTM Platform&#12290;</p><p>&#22312; Java &#37197;&#32622;&#31867;&#19978;&#28155;&#21152; <code>@EnableGlobalMethodSecurity</code> &#27880;&#35299;&#23601;&#33021;&#24320;&#21551;&#26041;&#27861;&#26435;&#38480;&#25511;&#21046;&#30340;&#21151;&#33021;&#65292;&#34920; 10-10 &#21015;&#20986;&#20102;&#20854;&#20013;&#30340;&#20960;&#20010;&#37325;&#35201;&#23646;&#24615;&#65292;&#23427;&#20204;&#30340;&#40664;&#35748;&#20540;&#37117;&#26159; <code>false</code>&#12290;</p><p><strong>&#34920; 10-10&#12288;<code>@EnableGlobalMethodSecurity</code> &#27880;&#35299;&#30340;&#37325;&#35201;&#23646;&#24615;</strong></p><table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#23646;&#24615;</p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#35828;&#26126;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>securedEnabled</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#26159;&#21542;&#24320;&#21551; <code>@Secured</code> &#27880;&#35299;&#25903;&#25345;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>prePostEnabled</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#26159;&#21542;&#24320;&#21551; <code>@PreAuthorize</code>&#12289;<code>@PostAuthorize</code>&#12289;<code>@PreFilter</code> &#21644; <code>@PostFilter</code> &#27880;&#35299;&#30340;&#25903;&#25345;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>jsr250Enabled</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#26159;&#21542;&#24320;&#21551; JSR 250 &#27880;&#35299;&#30340;&#25903;&#25345;&#65292;&#20363;&#22914; <code>@DenyAll</code> &#21644; <code>@PermitAll</code></p></td>
</tr>
</tbody>
</table><p><code>@Secured</code>&#12289;<code>@PreXxx</code> &#21644; <code>@PostXxx</code> &#27880;&#35299;&#37117;&#26159; Spring Security &#25552;&#20379;&#30340;&#27880;&#35299;&#65292;<code>@Secured</code> &#26159; Spring Security 2.0 &#24341;&#20837;&#30340;&#65292;&#22312;&#37197;&#32622;&#19978;&#30340;&#28789;&#27963;&#24615;&#31245;&#24046;&#65292;3.0 &#30340;&#26102;&#20505;&#21448;&#24341;&#20837;&#20102;&#26032;&#30340;&#20960;&#20010;&#27880;&#35299;&#65292;&#33021;&#22815;&#25903;&#25345;&#36739;&#20026;&#22797;&#26434;&#30340;&#34920;&#36798;&#24335;&#65292;&#20351;&#29992;&#19978;&#19968;&#37096;&#20998;&#26368;&#21518;&#25552;&#21040;&#30340;&#34920;&#36798;&#24335;&#36827;&#34892;&#37197;&#32622;&#12290;</p><p>&#20381;&#28982;&#26159;&#21069;&#38754;&#29992;&#21040;&#30340;&#26435;&#38480;&#25511;&#21046;&#30340;&#38656;&#27714;&#65292;&#25105;&#20204;&#26469;&#30475;&#30475;&#22914;&#26524;&#35201;&#22312;&#26381;&#21153;&#23618;&#30340;&#26041;&#27861;&#19978;&#36827;&#34892;&#25511;&#21046;&#35813;&#22914;&#20309;&#23454;&#29616;&#12290;&#20808;&#22312; <code>WebSecurityConfiguration</code> &#19978;&#28155;&#21152; <code>@EnableGlobalMethodSecurity</code> &#27880;&#35299;&#65292;&#24320;&#21551;&#21508;&#31181;&#27880;&#35299;&#25903;&#25345;&#65292;&#28982;&#21518;&#23581;&#35797;&#22312; <code>MenuService</code> &#21644; <code>OrderService</code> &#19978;&#20351;&#29992;&#19981;&#21516;&#31867;&#22411;&#30340;&#27880;&#35299;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled = true,
                               prePostEnabled = true,
                               jsr250Enabled = true)
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {...}</code></pre><p>&#20195;&#30721;&#31034;&#20363; 10-30 &#20013;&#65292;&#25105;&#20204;&#20026;&#20004;&#20010;&#20462;&#25913;&#33756;&#21333;&#30340;&#26041;&#27861;&#21152;&#19978;&#20102; <code>@PreAuthorize</code> &#27880;&#35299;&#65292;&#21028;&#26029;&#26159;&#21542;&#25317;&#26377;&#20889;&#33756;&#21333;&#30340;&#26435;&#38480;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">21</span> &#25152;&#35859; <code>Pre</code> &#23601;&#26159;&#22312;&#26576;&#25805;&#20316;&#20043;&#21069;&#65292;<code>@PreAuthorize</code> &#20250;&#22312;&#26041;&#27861;&#25191;&#34892;&#21069;&#36827;&#34892;&#26435;&#38480;&#21028;&#26029;&#65292;&#32780; <code>@PostAuthorize</code> &#21017;&#26159;&#22312;&#26041;&#27861;&#25191;&#34892;&#21518;&#65292;&#34920;&#36798;&#24335;&#20013;&#20351;&#29992; <code>returnObject</code> &#21487;&#20197;&#21462;&#24471;&#26041;&#27861;&#30340;&#36820;&#22238;&#20540;&#65307;<code>@PreFilter</code> &#21644; <code>@PostFilter</code> &#21017;&#26159;&#29992;&#26469;&#23545;&#38598;&#21512;&#36827;&#34892;&#36807;&#28388;&#30340;&#65292;&#34920;&#36798;&#24335;&#20013;&#20351;&#29992; <code>filterObject</code> &#21487;&#20197;&#21462;&#24471;&#38598;&#21512;&#20013;&#24403;&#21069;&#30340;&#20803;&#32032;&#65292;&#21028;&#26029;&#23427;&#26159;&#21542;&#35201;&#34987;&#36807;&#28388;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">21</span>&#36825;&#20010;&#20363;&#23376;&#22312; ch10/binarytea-role-methods &#39033;&#30446;&#20013;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-30</strong>&#12288;&#22686;&#21152;&#20102; <code>@PreAuthorize</code> &#27880;&#35299;&#30340; <code>MenuService</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Service
@Transactional
@CacheConfig(cacheNames = "menu")
public class MenuService {
    @Autowired
    private MenuRepository menuRepository;

    @PreAuthorize("hasAuthority('WRITE_MENU')")
    public Optional&lt;MenuItem&gt; save(MenuItem menuItem) {
        return Optional.ofNullable(menuRepository.save(menuItem));
    }

    @PreAuthorize("hasAuthority('WRITE_MENU')")
    public List&lt;MenuItem&gt; save(List&lt;MenuItem&gt; items) {
        return menuRepository.saveAll(items);
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#20195;&#30721;&#31034;&#20363; 10-31 &#21017;&#28436;&#31034;&#20102; <code>@Secured</code> &#27880;&#35299;&#21644; JSR 250 &#27880;&#35299;&#30340;&#29992;&#27861;&#12290;<code>@Secured</code> &#27880;&#35299;&#37324;&#21487;&#20197;&#30452;&#25509;&#28155;&#21152;&#35201;&#21028;&#26029;&#30340;&#26435;&#38480;&#65292;&#22240;&#20026;&#35282;&#33394;&#20854;&#23454;&#23601;&#26159;&#24102;&#20102; <code>ROLE_</code> &#21069;&#32512;&#30340;&#26435;&#38480;&#65292;&#25152;&#20197;&#21487;&#20197;&#20687; <code>getAllOrders()</code> &#37027;&#26679;&#21028;&#26029;&#26159;&#21542;&#25317;&#26377; <code>MANAGER</code>&#12289;<code>TEA_MAKER</code> &#21644; <code>USER</code> &#35282;&#33394;&#12290;JSR 250 &#20013;&#26435;&#38480;&#30456;&#20851;&#30340;&#27880;&#35299;&#26377;&#20195;&#34920;&#20840;&#37117;&#20801;&#35768;&#30340; <code>@PermitAll</code>&#65292;&#20840;&#19981;&#20801;&#35768;&#30340; <code>@DenyAll</code>&#65292;&#20801;&#35768;&#26576;&#20123;&#35282;&#33394;&#30340; <code>@RolesAllowed</code>&#65292;&#20197;&#26576;&#20010;&#35282;&#33394;&#36816;&#34892;&#30340; <code>@RunAs</code>&#65292;&#36824;&#26377;&#23450;&#20041;&#23433;&#20840;&#35282;&#33394;&#30340; <code>@DeclareRoles</code>&#12290;&#22312;&#20195;&#30721;&#31034;&#20363; 10-31 &#20013;&#25105;&#20204;&#23601;&#29992;&#21040;&#20102; <code>@RolesAllowed</code>&#65292;&#25351;&#23450;&#38656;&#35201;&#26377; <code>MANAGER</code> &#25110;&#32773; <code>TEA_MAKER</code> &#35282;&#33394;&#25165;&#33021;&#25191;&#34892; <code>createOrder()</code> &#26041;&#27861;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-31</strong>&#12288;&#22686;&#21152;&#20102; <code>@Secured</code> &#27880;&#35299;&#21644; <code>@RolesAllowed</code> &#27880;&#35299;&#30340; <code>OrderService</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Service
@Transactional
public class OrderService {
    @Autowired
    private OrderRepository orderRepository;

    @Secured({ "ROLE_MANAGER", "ROLE_TEA_MAKER", "ROLE_USER" })
    public List&lt;Order&gt; getAllOrders() {
        return orderRepository.findAll();
    }

    @RolesAllowed({ "MANAGER", "TEA_MAKER" })
    public Order createOrder(List&lt;MenuItem&gt; itemList, int discount) {
        // &#30465;&#30053;&#20855;&#20307;&#20195;&#30721;
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#30001;&#20110;&#26041;&#27861;&#19978;&#22686;&#21152;&#20102;&#26435;&#38480;&#26657;&#39564;&#65292;&#25105;&#20204;&#20043;&#21069;&#30340;&#21333;&#20803;&#27979;&#35797;&#20063;&#35201;&#31245;&#20316;&#35843;&#25972;&#12290;&#20363;&#22914;&#65292;<code>OrderControllerTest</code> &#20013;&#30340; <code>testOrderPageWithAuthenticatedUser()</code> &#38656;&#35201;&#22312;&#29992;&#25143;&#19978;&#28155;&#21152;&#19968;&#20123;&#26435;&#38480;&#65292;&#22914;&#20195;&#30721;&#31034;&#20363; 10-32 &#25152;&#31034;&#12290;&#36825;&#37324;&#30340; <code>authorities()</code> &#21644; <code>roles()</code> &#26368;&#32456;&#37117;&#26159;&#35774;&#32622;&#27169;&#25311;&#29992;&#25143;&#30340;&#26435;&#38480;&#65292;&#20004;&#32773;&#21482;&#33021;&#36873;&#25321;&#20854;&#19968;&#65292;&#22240;&#20026;&#38656;&#35201; <code>READ_ORDER</code> &#26435;&#38480;&#65292;&#25152;&#20197;&#36825;&#37324;&#21482;&#33021;&#29992; <code>authorities()</code>&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-32</strong>&#12288;&#22686;&#21152;&#20102;&#26435;&#38480;&#30340;&#27979;&#35797;&#29992;&#20363;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Test
void testOrderPageWithAuthenticatedUser() throws Exception {
    mockMvc.perform(get("/order").with(user("LiLei")
            .authorities(AuthorityUtils.createAuthorityList("READ_ORDER", "ROLE_TEA_MAKER"))))
            .andExpect(status().is2xxSuccessful());
    mockMvc.perform(get("/order").with(httpBasic("LiLei", "binarytea")))
            .andExpect(status().is2xxSuccessful());
}</code></pre><blockquote>
<p><strong>&#33590;&#27463;&#26102;&#38388;&#65306;&#22914;&#20309;&#24573;&#30053;&#26435;&#38480;&#26657;&#39564;</strong></p>
<p>&#22312;&#19968;&#20010;&#30495;&#23454;&#30340; Web &#31995;&#32479;&#20013;&#65292;&#25110;&#22810;&#25110;&#23569;&#26377;&#20123; URL &#26159;&#26080;&#39035;&#30331;&#24405;&#23601;&#33021;&#35775;&#38382;&#30340;&#65292;&#25110;&#32773;&#26159;&#24443;&#24213;&#19981;&#38656;&#35201;&#23433;&#20840;&#26657;&#39564;&#30340;&#65292;&#20363;&#22914; CSS &#21644;&#22270;&#29255;&#36825;&#26679;&#30340;&#38745;&#24577;&#36164;&#28304;&#12290;&#36825;&#37324;&#23601;&#20197; <code>/static</code> &#20026;&#20363;&#65292;&#35828;&#26126;&#19968;&#19979;&#22312; Spring Security &#20013;&#22914;&#20309;&#23545;&#31526;&#21512;&#29305;&#23450;&#35268;&#21017;&#30340; URL &#35774;&#32622;&#25918;&#34892;&#65292;&#20363;&#22914;&#65306;</p>
<ul>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#23558; <code>/static/**</code> &#35774;&#32622;&#20026;&#21311;&#21517;&#29992;&#25143;&#21644;&#30331;&#24405;&#29992;&#25143;&#37117;&#21487;&#35775;&#38382;&#30340;&#65292;&#23601;&#20687;&#20195;&#30721;&#31034;&#20363; 10-29 &#37027;&#26679;&#65307;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#36890;&#36807; <code>permitAll()</code>&#65292;&#23558; <code>/static/**</code> &#35774;&#32622;&#20026;&#20801;&#35768;&#25152;&#26377;&#20154;&#35775;&#38382;&#30340;&#65307;</li>
<li class="&#31532;2&#32423;&#26080;&#24207;&#21015;&#34920;">&#36890;&#36807; <code>WebSecurity</code> &#30340; <code>ignoring()</code> &#26041;&#27861;&#65292;&#30452;&#25509;&#23558; <code>/static/**</code> &#24573;&#30053;&#25481;&#12290;</li>
</ul>
<p>&#20195;&#30721;&#31034;&#20363; 10-33 &#28436;&#31034;&#20102;&#31532;&#19977;&#31181;&#26041;&#27861;&#65292;&#20063;&#26159;&#22312;&#32487;&#25215;&#20102; <code>WebSecurityConfigurerAdapter</code> &#30340; Java &#37197;&#32622;&#31867;&#20013;&#65292;&#35206;&#30422; <code>configure()</code>&#65292;&#36890;&#36807;&#21442;&#25968;&#20013;&#20256;&#20837;&#30340; <code>WebSecurity</code> &#26469;&#36827;&#34892;&#35774;&#32622;&#12290;</p>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-33</strong>&#12288;&#35843;&#29992; <code>WebSecurity.ignoring()</code> &#35774;&#32622;&#24573;&#30053;&#30340;&#36335;&#24452;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Override
    public void configure(WebSecurity web) throws Exception {
        web.ignoring().antMatchers("/error", "/static/**");
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#20877;&#27425;&#24378;&#35843;&#65292;<strong>&#22914;&#26524;&#26465;&#20214;&#20801;&#35768;&#65292;&#38745;&#24577;&#36164;&#28304;&#24212;&#35813;&#25918;&#32622;&#22312;&#38745;&#24577;&#36164;&#28304;&#26381;&#21153;&#22120;&#19978;</strong>&#65292;&#21738;&#24597;&#19982; Java &#24212;&#29992;&#25918;&#22312;&#21516;&#19968;&#21488;&#26381;&#21153;&#22120;&#19978;&#65292;&#20063;&#25512;&#33616;&#30001; Nginx &#36825;&#26679;&#30340; Web &#26381;&#21153;&#22120;&#26469;&#19987;&#38376;&#25552;&#20379;&#38745;&#24577;&#36164;&#28304;&#26381;&#21153;&#65292;&#32780;&#19981;&#26159;&#35753; Java &#24212;&#29992;&#26469;&#21709;&#24212;&#38745;&#24577;&#36164;&#28304;&#35831;&#27714;&#12290;</p>
</blockquote><h2 id="nav_point_162">10.4&#12288;&#24120;&#35265; Web &#25915;&#20987;&#38450;&#25252;</h2><p>&#26222;&#36890;&#29992;&#25143;&#30340;&#27491;&#24120;&#35775;&#38382;&#19968;&#33324;&#19981;&#20250;&#23545;&#31995;&#32479;&#26377;&#20160;&#20040;&#22823;&#30340;&#39118;&#38505;&#65292;&#20294;&#26159;&#65292;&#21482;&#35201;&#25915;&#20987;&#33021;&#22815;&#24102;&#26469;&#25910;&#30410;&#65292;&#23601;&#20250;&#26377;&#20154;&#24806;&#35760;&#25105;&#20204;&#30340;&#31995;&#32479;&#12290;&#27491;&#25152;&#35859;&#8220;&#23475;&#20154;&#20043;&#24515;&#19981;&#21487;&#26377;&#65292;&#38450;&#20154;&#20043;&#24515;&#19981;&#21487;&#26080;&#8221;&#65292;&#25105;&#20204;&#24515;&#20013;&#26368;&#22909;&#36824;&#26159;&#33021;&#22815;&#32039;&#32503;&#19968;&#26681;&#24358;&#65292;&#26102;&#21051;&#25285;&#24515;&#8220;&#24635;&#26377;&#20993;&#27665;&#24819;&#23475;&#26389;&#8221;&#8212;&#8212;&#26412;&#33410;&#23601;&#35753;&#25105;&#20204;&#26469;&#20102;&#35299;&#20960;&#31181;&#24120;&#35265;&#30340; Web &#25915;&#20987;&#26041;&#24335;&#21450;&#20854;&#23545;&#24212;&#30340;&#38450;&#24481;&#25163;&#27573;&#12290;</p><h3 id="nav_point_163">10.4.1&#12288;&#36328;&#31449;&#35831;&#27714;&#20266;&#36896;&#25915;&#20987;&#38450;&#25252;</h3><p><strong>&#36328;&#31449;&#35831;&#27714;&#20266;&#36896;</strong>&#65288;Cross Site Request Forgery&#65289;&#34987;&#31616;&#31216;&#20026; CSRF &#25110; XSRF&#65292;&#36825;&#31181;&#25915;&#20987;&#36890;&#24120;&#25351;&#36890;&#36807;&#26576;&#31181;&#25163;&#27573;&#22312;&#29992;&#25143;&#24050;&#30331;&#24405;&#30340; Web &#31243;&#24207;&#19978;&#25191;&#34892;&#19981;&#26159;&#29992;&#25143;&#26412;&#24847;&#30340;&#25805;&#20316;&#12290;&#32500;&#22522;&#30334;&#31185;&#20013;&#26377;&#19968;&#20010;&#23450;&#20041;&#65306;</p><blockquote>
<p>CSRF &#26159;&#23545; Web &#31449;&#28857;&#30340;&#19968;&#31181;&#24694;&#24847;&#25915;&#20987;&#65292;&#25915;&#20987;&#32773;&#36890;&#36807; Web &#31449;&#28857;&#20449;&#20219;&#30340;&#29992;&#25143;&#21457;&#20986;&#20102;&#26410;&#32463;&#25480;&#26435;&#30340;&#35831;&#27714;&#12290;</p>
</blockquote><p>&#20030;&#20010;&#20363;&#23376;&#65292;&#20551;&#35774; A &#38134;&#34892;&#26377;&#20010;&#36716;&#36134;&#30340; URL &#26159; <code>/transfer</code>&#65292;&#25509;&#25910; HTTP <code>POST</code> &#35831;&#27714;&#65292;&#35831;&#27714;&#21442;&#25968;&#20013;&#21253;&#21547;&#20102;&#36716;&#20986;&#21345;&#21495;&#21644;&#30446;&#26631;&#36716;&#20837;&#21345;&#21495;&#12290;&#25509;&#25910;&#35831;&#27714;&#21518;&#65292;&#31995;&#32479;&#20250;&#21028;&#26029;&#24403;&#21069;&#30331;&#24405;&#30340;&#36134;&#25143;&#20013;&#26159;&#21542;&#21253;&#21547;&#20102;&#36716;&#20986;&#21345;&#21495;&#65292;&#22914;&#26524;&#26377;&#65292;&#23601;&#20195;&#34920;&#20102;&#26159;&#24403;&#21069;&#36134;&#25143;&#24819;&#20174;&#33258;&#24049;&#30340;&#38134;&#34892;&#21345;&#36716;&#38065;&#21040;&#20182;&#20154;&#30340;&#38134;&#34892;&#21345;&#12290;&#24352;&#19977; 1 &#20998;&#38047;&#21069;&#21018;&#30331;&#24405;&#20102; A &#38134;&#34892;&#30340;&#32593;&#38134;&#65292;&#25915;&#20987;&#32773;&#21457;&#32473;&#20102;&#20182;&#19968;&#20010; X &#32593;&#31449;&#30340; URL&#65292;&#35828;&#26159;&#26377;&#20419;&#38144;&#27963;&#21160;&#65292;&#35825;&#23548;&#24352;&#19977;&#25171;&#24320;&#20102;&#36825;&#20010;&#32593;&#39029;&#65292;&#22312;&#32593;&#39029;&#37324;&#23884;&#20102;&#19968;&#27573;&#29992;&#25143;&#19981;&#21487;&#35265;&#30340; JavaScript &#20195;&#30721;&#65292;&#23601;&#26159;&#36890;&#36807; AJAX &#21521; A &#38134;&#34892;&#30340; <code>/transfer</code> &#22320;&#22336;&#21457;&#36215; <code>POST</code> &#35831;&#27714;&#65292;&#32473;&#25915;&#20987;&#32773;&#36716; 1000 &#20803;&#12290;&#36825;&#26102;&#30001;&#20110;&#24352;&#19977;&#22312; A &#38134;&#34892;&#32593;&#38134;&#30340; Cookies &#36824;&#26410;&#22833;&#25928;&#65292;&#25152;&#20197;&#32593;&#38134;&#20250;&#35748;&#20026;&#36825;&#23601;&#26159;&#24352;&#19977;&#33258;&#24049;&#21457;&#20986;&#30340;&#35831;&#27714;&#65292;&#25191;&#34892;&#20102;&#36716;&#36134;&#30340;&#25351;&#20196;&#12290;</p><p>&#24403;&#28982;&#65292;&#25105;&#20204;&#24517;&#39035;&#35201;&#35828;&#26126;&#19968;&#19979;&#65292;&#36825;&#37324;&#30340;&#20363;&#23376;&#21482;&#26159;&#35774;&#24819;&#20986;&#26469;&#30340;&#65292;&#30495;&#23454;&#30340;&#38134;&#34892;&#31995;&#32479;&#21487;&#27604;&#36825;&#35201;&#22797;&#26434;&#24471;&#22810;&#65292;&#26377;&#30528;&#22810;&#37325;&#26657;&#39564;&#21644;&#23433;&#20840;&#20445;&#25252;&#65292;&#19981;&#26159;&#36825;&#20040;&#33030;&#24369;&#30340;&#12290;&#20294;&#36825;&#20010;&#20363;&#23376;&#24212;&#35813;&#33021;&#22815;&#35828;&#26126;&#25972;&#20010; CSRF &#30340;&#25915;&#20987;&#21407;&#29702;&#20102;&#65292;&#37027;&#20040;&#25105;&#20204;&#35813;&#22914;&#20309;&#23545;&#25932;&#21602;&#65311;</p><p>&#39318;&#20808;&#24819;&#21040;&#30340;&#24212;&#35813;&#23601;&#26159;&#38024;&#23545;&#37325;&#35201;&#30340;&#39029;&#38754;&#21644;&#25509;&#21475;&#65292;&#21482;&#20449;&#20219;&#33258;&#24049;&#31449;&#28857;&#21457;&#26469;&#30340;&#35831;&#27714;&#12290;&#22238;&#21040;&#19978;&#38754;&#30340;&#20363;&#23376;&#65292;&#23601;&#26159; <code>/transfer</code> &#21482;&#25509;&#25910;&#26469;&#33258; A &#38134;&#34892;&#32593;&#39029;&#39029;&#38754;&#21457;&#36215;&#30340;&#35831;&#27714;&#65292;X &#32593;&#31449;&#21457;&#26469;&#30340;&#23601;&#19981;&#34892;&#12290;HTTP &#21327;&#35758;&#20013;&#30340; <code>Referer</code> &#22836;&#23601;&#26159;&#29992;&#26469;&#26631;&#26126;&#35831;&#27714;&#26469;&#28304;&#30340;&#65292;&#36890;&#36807;&#36825;&#20010; <code>Referer</code> &#21487;&#20197;&#35782;&#21035;&#21738;&#20123;&#35831;&#27714;&#26159;&#21487;&#20197;&#20449;&#20219;&#30340;&#12290;&#20294;&#23545;&#20110;&#25915;&#20987;&#32773;&#32780;&#35328;&#65292;<code>Referer</code> &#30340;&#20869;&#23481;&#22826;&#23481;&#26131;&#20266;&#36896;&#20102;&#65292;&#22522;&#26412;&#23601;&#21644;&#25913;&#35831;&#27714;&#30340; <code>Agent</code> &#27809;&#20160;&#20040;&#21306;&#21035;&#65292;&#25152;&#20197;&#36825;&#31181;&#26041;&#24335;&#30340;&#38450;&#24481;&#25928;&#26524;&#24182;&#19981;&#29702;&#24819;&#12290;</p><p>&#35201;&#31105;&#27490;&#20182;&#20154;&#20266;&#36896;&#35831;&#27714;&#65292;&#21487;&#20197;&#32473;&#19968;&#20010;&#19968;&#27425;&#24615;&#20351;&#29992;&#30340;&#20196;&#29260;&#65292;&#35831;&#27714;&#36807;&#26469;&#19968;&#27425;&#23601;&#26680;&#38144;&#25481;&#65292;&#19981;&#33021;&#20108;&#27425;&#20351;&#29992;&#65292;&#36825;&#26679;&#21363;&#20351;&#25915;&#20987;&#32773;&#25343;&#21040;&#20102;&#20043;&#21069;&#30340;&#20196;&#29260;&#20063;&#19981;&#33021;&#37325;&#22797;&#21457;&#36215;&#35831;&#27714;&#12290;&#20196;&#29260;&#26412;&#36523;&#20063;&#38656;&#35201;&#26377;&#36807;&#26399;&#26102;&#38388;&#65292;&#19975;&#19968;&#27809;&#34987;&#20351;&#29992;&#36807;&#65292;&#23601;&#34987;&#25915;&#20987;&#32773;&#33719;&#21462;&#20102;&#65292;&#26377;&#20010;&#36739;&#30701;&#30340;&#36807;&#26399;&#26102;&#38388;&#20063;&#33021;&#35268;&#36991;&#19968;&#23450;&#39118;&#38505;&#12290;&#25152;&#20197;&#65292;<strong>&#25105;&#20204;&#21487;&#20197;&#32771;&#34385;&#22312;&#37325;&#35201;&#30340;&#35831;&#27714;&#37324;&#24102;&#19978;&#19968;&#20010; CSRF &#20196;&#29260;</strong>&#12290;</p><p>Spring Security &#20013;&#24050;&#32463;&#20869;&#32622;&#20102;&#23545; CSRF &#20196;&#29260;&#30340;&#25903;&#25345;&#65292;&#20043;&#21069;&#36523;&#20221;&#35748;&#35777;&#30340;&#20363;&#23376;&#20013;&#20854;&#23454;&#24050;&#32463;&#29992;&#21040;&#20102; CSRF &#20196;&#29260;&#65292;&#21482;&#26159;&#24403;&#26102;&#27809;&#26377;&#23637;&#24320;&#12290;&#21487;&#20197;&#36890;&#36807; <code>HttpSecurity</code> &#30340; <code>csrf()</code> &#26041;&#27861;&#23545;&#21508;&#31181;&#38656;&#35201;&#25110;&#32773;&#19981;&#38656;&#35201; CSRF &#38450;&#25252;&#30340; URL &#36827;&#34892;&#35774;&#32622;&#65292;&#34920; 10-11 &#20013;&#21015;&#20986;&#20102;&#20960;&#20010;&#24120;&#29992;&#30340;&#37197;&#32622;&#26041;&#27861;&#12290;</p><p><strong>&#34920; 10-11&#12288;&#24120;&#29992;&#30340; CSRF &#30456;&#20851;&#37197;&#32622;&#26041;&#27861;</strong></p><table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#37197;&#32622;&#26041;&#27861;</p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#35828;&#26126;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>disable()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#31105;&#29992; CSRF &#38450;&#25252;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>ignoringAntMatchers()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#35201;&#24573;&#30053; CSRF &#38450;&#25252;&#30340; URL &#35268;&#21017;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>requireCsrfProtectionMatcher()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#38656;&#35201; CSRF &#38450;&#25252;&#30340; <code>RequestMatcher</code>&#65292;<code>RequestMatcher</code> &#21487;&#20197;&#23545;&#35831;&#27714;&#20570;&#35814;&#32454;&#30340;&#35268;&#21017;&#21028;&#26029;&#65292;&#40664;&#35748;&#24573;&#30053; <code>GET</code>&#12289;<code>HEAD</code>&#12289;<code>TRACE</code> &#21644; <code>OPTIONS</code> &#30340;&#35831;&#27714;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>ignoringRequestMatchers()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#35201;&#24573;&#30053; CSRF &#38450;&#25252;&#30340; <code>RequestMatcher</code>&#65292;&#21363;&#20351;&#21629;&#20013; <code>requireCsrfProtectionMatcher()</code> &#30340;&#35268;&#21017;&#65292;&#20063;&#20250;&#24573;&#30053;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>csrfTokenRepository()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#20256;&#20837;&#29992;&#20110;&#23384;&#20648; CSRF &#20196;&#29260;&#30340; <code>CsrfTokenRepository</code>&#65292;&#20363;&#22914; <code>HttpSessionCsrfTokenRepository</code></p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>sessionAuthenticationStrategy()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#20256;&#20837;&#35748;&#35777;&#29992;&#30340; <code>HttpSession</code> &#30456;&#20851;&#31574;&#30053;&#65292;&#20363;&#22914; <code>CsrfAuthenticationStrategy</code> &#20250;&#31227;&#38500;&#24403;&#21069;&#20196;&#29260;&#65292;&#20877;&#37325;&#26032;&#29983;&#25104;&#19968;&#20010;&#26032;&#30340;&#25918;&#36827; <code>CsrfTokenRepository</code></p></td>
</tr>
</tbody>
</table><p>&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#20063;&#26377;&#19968;&#20123;&#39029;&#38754;&#23481;&#26131;&#21463;&#21040; CSRF &#25915;&#20987;&#30340;&#23041;&#32961;&#65292;&#20986;&#20110;&#23433;&#20840;&#32771;&#34385;&#65292;&#25105;&#20204;&#38656;&#35201;&#23545;&#23427;&#20204;&#36827;&#34892;&#21152;&#22266;&#12290;</p><blockquote>
<p><strong>&#38656;&#27714;&#25551;&#36848;</strong>&#12288;&#19979;&#21333;&#21518;&#65292;&#29992;&#25143;&#38656;&#35201;&#36827;&#34892;&#25903;&#20184;&#65292;&#38543;&#21518;&#25165;&#33021;&#24320;&#22987;&#39278;&#21697;&#21046;&#20316;&#31561;&#27493;&#39588;&#12290;&#25903;&#20184;&#36825;&#20010;&#21160;&#20316;&#28041;&#21450;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#30340;&#33829;&#25910;&#65292;&#38656;&#35201;&#20445;&#35777;&#39029;&#38754;&#19978;&#30340;&#25903;&#20184;&#25910;&#38134;&#25805;&#20316;&#30340;&#30830;&#26159;&#30001;&#24215;&#21592;&#25191;&#34892;&#30340;&#12290;</p>
</blockquote><p>&#22312;&#20462;&#25913;&#35746;&#21333;&#29366;&#24577;&#30340;&#34920;&#21333;&#20013;&#65292;&#25105;&#20204;&#21487;&#20197;&#36890;&#36807;&#24341;&#20837; CSRF &#20196;&#29260;&#26469;&#36991;&#20813;&#24694;&#24847;&#30340;&#25915;&#20987;&#12290;Spring Security &#30340; <code>CsrfFilter</code> &#20026;&#25105;&#20204;&#25552;&#20379;&#20102; CSRF &#20196;&#29260;&#30456;&#20851;&#30340;&#25903;&#25345;&#65292;&#22914;&#26524;&#35831;&#27714;&#20013;&#27809;&#26377;&#20196;&#29260;&#65292;&#21017;&#29983;&#25104;&#19968;&#20010;&#20196;&#29260;&#65292;&#25918;&#21040; <code>HttpServletRequest</code> &#20013;&#65292;&#40664;&#35748;&#20351;&#29992;&#30340;&#23646;&#24615;&#21517;&#26159; <code>_csrf</code>&#65288;&#22914;&#26524;&#26159;&#22312; HTTP &#22836;&#37324;&#21253;&#21547;&#20196;&#29260;&#65292;&#21017;&#40664;&#35748;&#29992;&#30340;&#22836;&#26159; <code>X-CSRF-TOKEN</code>&#65289;&#65292;&#36825;&#20010;&#23646;&#24615;&#21517;&#21487;&#20197;&#22312; <code>CsrfTokenRepository</code> &#20013;&#36827;&#34892;&#35843;&#25972;&#12290;&#25105;&#20204;&#21487;&#20197;&#20687;&#19979;&#38754;&#36825;&#26679;&#22312; HTML &#34920;&#21333;&#20013;&#24341;&#20837;&#19968;&#20010;&#21253;&#21547; CSRF &#20196;&#29260;&#30340;&#38544;&#34255;&#22495;&#12290;&#22914;&#26524;&#20351;&#29992; Thymeleaf &#27169;&#26495;&#65292;Thymeleaf &#20250;&#33258;&#21160;&#23558;&#35831;&#27714;&#20013;&#30340; CSRF &#20196;&#29260;&#24102;&#21040;&#34920;&#21333;&#20013;&#65292;&#30465;&#21435;&#20102;&#33258;&#24049;&#35774;&#32622;&#30340;&#40635;&#28902;&#12290;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&lt;input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}"/&gt;</code></pre><p>&#25105;&#20204;&#38656;&#35201;&#22312;&#35746;&#21333;&#30340;&#25511;&#21046;&#22120;&#20013;&#22686;&#21152;&#19968;&#20010;&#20462;&#25913;&#35746;&#21333;&#29366;&#24577;&#30340;&#26041;&#27861;&#65292;HTTP &#30340; <code>PUT</code> &#26041;&#27861;&#26159;&#29992;&#26469;&#20462;&#25913;&#36164;&#28304;&#30340;&#65292;&#25105;&#20204;&#23601;&#29992; <code>@PutMapping</code> &#26469;&#22768;&#26126;&#19968;&#20010; <code>/order</code> &#30340; <code>PUT</code> &#26041;&#27861;&#65292;&#25552;&#20132;&#30340;&#20869;&#23481;&#20013;&#21253;&#21547;&#35201;&#25913;&#20026;&#24050;&#25903;&#20184;&#29366;&#24577;&#30340;&#35746;&#21333;&#32534;&#21495;&#65292;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-34 &#25152;&#31034;&#65292;&#36825;&#27573;&#20195;&#30721;&#23558;&#35831;&#27714;&#20869;&#30340;&#21442;&#25968;&#36716;&#25442;&#20026;&#25351;&#23450;&#30340;&#24418;&#24335;&#20256;&#32473;&#26381;&#21153;&#23618;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">22</span></p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">22</span>&#36825;&#20010;&#20363;&#23376;&#25918;&#22312;&#20102; ch10/binarytea-csrf &#39033;&#30446;&#20013;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-34</strong>&#12288;&#22686;&#21152;&#20102;&#20462;&#25913;&#35746;&#21333;&#20026;&#24050;&#25903;&#20184;&#29366;&#24577;&#30340; <code>OrderController</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Controller
@RequestMapping("/order")
@Slf4j
public class OrderController {
    @PutMapping
    public String modifyOrdersToPaid(@RequestParam("id") String id, ModelMap modelMap) {
        int successCount = 0;
        if (StringUtils.isNotBlank(id)) {
            List&lt;Long&gt; orderIdList = Arrays.stream(id.split(","))
                .map(s -&gt; NumberUtils.toLong(s, -1))
                .filter(l -&gt; l &gt; 0)
                .collect(Collectors.toList());
            successCount = orderService.modifyOrdersState(orderIdList, OrderStatus.ORDERED, OrderStatus.PAID);
        }
        modelMap.addAttribute(new NewOrderForm());
        modelMap.addAttribute("success_count", successCount);
        modelMap.addAttribute("orders", orderService.getAllOrders());
        return "order";
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#20195;&#30721;&#31034;&#20363; 10-35 &#30340;&#26041;&#27861;&#36127;&#36131;&#23558;&#25351;&#23450;&#35746;&#21333;&#21462;&#20986;&#65292;&#21516;&#26102;&#22686;&#21152;&#20102;&#26465;&#20214;&#65292;&#21462;&#20986;&#30340;&#35746;&#21333;&#24517;&#39035;&#26159;&#25351;&#23450;&#21407;&#22987;&#29366;&#24577;&#30340;&#65292;&#36825;&#26679;&#23601;&#36807;&#28388;&#20102;&#20854;&#20182;&#29366;&#24577;&#30340;&#35746;&#21333;&#65292;&#20877;&#20026;&#23427;&#20204;&#35774;&#32622;&#26032;&#30340;&#29366;&#24577;&#20445;&#23384;&#36215;&#26469;&#12290;<code>WebSecurityConfiguration</code> &#20013;&#25105;&#20204;&#21482;&#23545; <code>GET</code> &#21644; <code>POST</code> &#30340; HTTP &#26041;&#27861;&#35774;&#32622;&#20102;&#26435;&#38480;&#65292;&#21487;&#20197;&#32771;&#34385;&#20026; <code>PUT</code> &#26041;&#27861;&#20063;&#22686;&#21152;&#26435;&#38480;&#25511;&#21046;&#65292;&#22312;&#31034;&#20363;&#20013;&#25105;&#20204;&#36873;&#25321;&#20102;&#22312;&#20855;&#20307;&#30340;&#26381;&#21153;&#23618;&#26041;&#27861;&#19978;&#22686;&#21152; <code>@RolesAllowed</code> &#27880;&#35299;&#26469;&#25511;&#21046;&#25191;&#34892;&#30340;&#26435;&#38480;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-35</strong>&#12288;&#23558;&#35746;&#21333;&#20174;&#19968;&#20010;&#29366;&#24577;&#21464;&#20026;&#21478;&#19968;&#20010;&#29366;&#24577;&#30340; <code>modifyOrdersState()</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Service
@Transactional
public class OrderService {
    @RolesAllowed({ "MANAGER", "TEA_MAKER" })
    public int modifyOrdersState(List&lt;Long&gt; idList, OrderStatus oldState, OrderStatus newState) {
        List&lt;Order&gt; orders = orderRepository.findByStatusEqualsAndIdInOrderById(oldState, idList);
        orders.forEach(o -&gt; o.setStatus(newState));
        return orderRepository.saveAll(orders).size();
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#30001;&#20110;&#20351;&#29992;&#20102; Spring Data JPA&#65292;&#25105;&#20204;&#26080;&#39035;&#25552;&#20379;&#20855;&#20307;&#30340;&#23454;&#29616;&#65292;&#21482;&#38656;&#35201;&#22312; <code>OrderRepository</code> &#20013;&#23450;&#20041;&#22914;&#19979;&#30340;&#26041;&#27861;&#23601;&#34892;&#20102;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>List&lt;Order&gt; findByStatusEqualsAndIdInOrderById(OrderStatus status, List&lt;Long&gt; idList);</code></pre><p>&#21518;&#21488;&#30340;&#26041;&#27861;&#20934;&#22791;&#23601;&#32490;&#20102;&#65292;&#20877;&#26469;&#30475;&#30475;&#21069;&#21488;&#30340;&#39029;&#38754;&#27169;&#26495;&#12290;&#25105;&#20204;&#22312;&#35746;&#21333;&#39029;&#38754; order.html &#20013;&#20570;&#19968;&#20123;&#31616;&#21333;&#30340;&#20462;&#25913;&#65292;&#22312;&#39029;&#38754;&#19979;&#21322;&#37096;&#20998;&#30340;&#35746;&#21333;&#34920;&#26684;&#22806;&#38754;&#21152;&#19968;&#23618; <code>&lt;form /&gt;</code> &#34920;&#21333;&#65292;&#34920;&#26684;&#31532;&#19968;&#21015;&#22686;&#21152;&#19968;&#20010;&#22797;&#36873;&#26694;&#65292;&#19968;&#27425;&#21487;&#20197;&#36873;&#20013;&#22810;&#20010;&#35746;&#21333;&#65292;&#28857;&#20987;&#25353;&#38062;&#25552;&#20132;&#12290;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-36 &#25152;&#31034;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-36</strong>&#12288;&#22686;&#21152;&#20102;&#20462;&#25913;&#35746;&#21333;&#20026;&#8220;&#24050;&#20184;&#27454;&#8221;&#29366;&#24577;&#30340; Thymeleaf &#27169;&#26495;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&lt;h2&gt;&#35746;&#21333;&lt;/h2&gt;
&lt;div&gt;
    &lt;form action="#" th:action="@{/order}" method="post"&gt;
        &lt;p th:if="${success_count != null}"&gt;&#26356;&#26032;&#20102;&lt;span th:text="${success_count}"&gt;N&lt;/span&gt;&#26465;&#35760;&#24405;&lt;/p&gt;
        &lt;p&gt;
            &lt;table border="1px"&gt;
                &lt;thead&gt;
                &lt;tr&gt;
                    &lt;th&gt;&#36873;&#25321;&lt;/th&gt;
                    &lt;th&gt;&#35746;&#21333;&#32534;&#21495;&lt;/th&gt;
                    &lt;th&gt;&#24635;&#20215;&lt;/th&gt;
                    &lt;th&gt;&#23454;&#20184;&lt;/th&gt;
                    &lt;th&gt;&#29366;&#24577;&lt;/th&gt;
                    &lt;th&gt;&#20869;&#23481;&lt;/th&gt;
                &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                &lt;tr th:each="order : ${orders}"&gt;
                    &lt;td&gt;&lt;input name="id" type="checkbox" th:value="${order.id}" value="1"/&gt;&lt;/td&gt;
                    &lt;td th:text="${order.id}"&gt;1&lt;/td&gt;
                    &lt;td th:text="${order.amount.totalAmount}"&gt;CNY 12.0&lt;/td&gt;
                    &lt;td th:text="${order.amount.payAmount}"&gt;CNY 12.0&lt;/td&gt;
                    &lt;td th:text="${order.status}"&gt;ORDERED&lt;/td&gt;
                    &lt;td&gt;
                        &lt;div th:each="item : ${order.items}"&gt;
                            &lt;label th:text="${item.name}"&gt;Java&#21654;&#21857;&lt;/label&gt;-
                            &lt;label th:text="${item.size}"&gt;MEDIUM&lt;/label&gt;&lt;br/&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
        &lt;/p&gt;
        &lt;p&gt;
            &lt;input type="submit" value="&#24050;&#20184;&#27454;" /&gt;
            &lt;input type="hidden" name="_method" value="put" /&gt;
        &lt;/p&gt;
    &lt;/form&gt;
&lt;/div&gt;</code></pre><p>&#30001;&#20110;&#27983;&#35272;&#22120;&#21482;&#33021;&#21457;&#36215; <code>GET</code> &#21644; <code>POST</code> &#26041;&#27861;&#65292;&#25152;&#20197; Spring MVC &#20026;&#25105;&#20204;&#25552;&#20379;&#20102;&#27169;&#25311;&#20854;&#20182; HTTP &#26041;&#27861;&#30340;&#26041;&#26696;&#65292;&#19978;&#38754;&#20195;&#30721;&#26368;&#21518;&#30340; <code>_method</code> &#38544;&#34255;&#22495;&#23601;&#25552;&#31034;&#20102; Spring MVC &#23558;&#36825;&#20010; <code>POST</code> &#25552;&#20132;&#30340;&#35831;&#27714;&#35270;&#20026; <code>PUT</code>&#65292;&#25972;&#20010;&#36807;&#31243;&#26159;&#30001; <code>HiddenHttpMethodFilter</code> &#26469;&#23454;&#29616;&#30340;&#65292;Spring Boot &#40664;&#35748;&#19981;&#33258;&#21160;&#21019;&#24314;&#36825;&#20010; <code>Filter</code>&#65292;&#25105;&#20204;&#21487;&#20197;&#22312; <code>application.properties</code> &#20013;&#22686;&#21152;&#22914;&#19979;&#37197;&#32622;&#26469;&#24320;&#21551;&#30456;&#20851;&#25903;&#25345;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>spring.mvc.hiddenmethod.filter.enabled=true</code></pre><p>&#22240;&#20026; <code>_csrf</code> &#22826;&#23481;&#26131;&#29468;&#21040;&#20102;&#65292;&#25152;&#20197;&#25105;&#20204;&#24819;&#25442;&#20010;&#21442;&#25968;&#12290;&#22312; <code>WebSecurityConfiguration</code> &#37324;&#65292;&#25105;&#20204;&#33258;&#24049;&#23450;&#20041;&#19968;&#20010; <code>CsrfTokenRepository</code>&#65292;&#23601;&#20687;&#20195;&#30721;&#31034;&#20363; 10-37 &#37027;&#26679;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-37</strong>&#12288;&#22686;&#21152;&#20102; <code>CsrfTokenRepository</code> &#37197;&#32622;&#30340; <code>WebSecurityConfiguration</code></p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Configuration
@EnableWebSecurity
@EnableGlobalMethodSecurity(securedEnabled = true, prePostEnabled = true, jsr250Enabled = true)
public class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http// &#30465;&#30053;&#20854;&#20182;&#37197;&#32622;
            .csrf()
            .csrfTokenRepository(tokenRepository());
    }

    @Bean
    public CsrfTokenRepository tokenRepository() {
        HttpSessionCsrfTokenRepository tokenRepository = new HttpSessionCsrfTokenRepository();
        tokenRepository.setParameterName("_token");
        return tokenRepository;
    }
// &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><p>&#20877;&#26597;&#30475; Thymeleaf &#21576;&#29616;&#20986;&#30340; HTML &#28304;&#30721;&#26102;&#65292;&#25105;&#20204;&#23601;&#20250;&#30475;&#21040;&#38544;&#34255;&#22495;&#30340;&#21517;&#31216;&#24050;&#32463;&#25442;&#25104;&#20102; <code>_token</code>&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>&lt;input type="hidden" name="_token" value="893814bc-4123-4da0-95a9-332a05fbe3bc"/&gt;</code></pre><p>&#20026;&#20102;&#20445;&#35777;&#20195;&#30721;&#30340;&#27491;&#30830;&#24615;&#65292;&#25105;&#20204;&#20026; <code>modifyOrdersToPaid()</code> &#22686;&#21152;&#20960;&#20010;&#27979;&#35797;&#29992;&#20363;&#12290;&#20195;&#30721;&#31034;&#20363; 10-38 &#20013;&#21253;&#21547;&#20102;&#20004;&#20010;&#29992;&#20363;&#65292;&#31532;&#19968;&#20010;&#26159; CSRF &#39564;&#35777;&#22833;&#36133;&#30340;&#24773;&#20917;&#65292;&#21253;&#25324;&#26410;&#24102; CSRF &#20196;&#29260;&#21644;&#25552;&#20379;&#20102;&#26080;&#25928;&#30340;&#20196;&#29260;&#65307;&#31532;&#20108;&#20010;&#26159;&#27491;&#24120;&#25104;&#21151;&#30340;&#24773;&#20917;&#12290;</p><blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-38</strong>&#12288;&#38024;&#23545;&#35746;&#21333;&#25903;&#20184;&#30340;&#27979;&#35797;&#29992;&#20363;</p>
</blockquote><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@SpringBootTest
class OrderControllerTest {
    @Test
    void testModifyOrdersToPaidWithCsrfFail() throws Exception {
        mockMvc.perform(put("/order")
                .param("id", "1").with(userLiLei()))
                .andExpect(status().is4xxClientError());
        mockMvc.perform(put("/order")
                .param("id", "1").with(userLiLei())
                .with(csrf().useInvalidToken()))
                .andExpect(status().is4xxClientError());
    }

    @Test
    void testModifyOrdersToPaid() throws Exception {
        mockMvc.perform(put("/order").param("id", "1")
                .with(userLiLei()).with(csrf()))
                .andExpect(status().isOk())
                .andExpect(view().name("order"))
                .andExpect(model().attribute("success_count", 1));
    }

    private SecurityMockMvcRequestPostProcessors.UserRequestPostProcessor userLiLei() {
        return user("LiLei").authorities(AuthorityUtils.createAuthorityList("READ_ORDER", "ROLE_TEA_MAKER"));
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre><h3 id="nav_point_164">10.4.2&#12288;&#20250;&#35805;&#22266;&#23450;&#25915;&#20987;&#38450;&#25252;</h3><p>&#22914;&#26524;&#19968;&#20010;&#31995;&#32479;&#30340;&#20250;&#35805;&#26631;&#35782;&#31526;&#33021;&#34987;&#24456;&#36731;&#26494;&#22320;&#22266;&#23450;&#19979;&#26469;&#65288;&#25110;&#32773;&#26159;&#34987;&#20154;&#29468;&#20986;&#26469;&#65289;&#65292;&#37027;&#25915;&#20987;&#32773;&#23601;&#33021;&#23558;&#19968;&#20010;&#24050;&#30693;&#30340;&#20250;&#35805;&#21457;&#32473;&#21463;&#23475;&#32773;&#65292;&#35753;&#20182;&#29992;&#36825;&#20010;&#22266;&#23450;&#20250;&#35805;&#30331;&#24405;&#65292;&#20174;&#32780;&#33719;&#24471;&#35813;&#29992;&#25143;&#30340;&#26435;&#38480;&#65292;&#36825;&#23601;&#26159;<strong>&#20250;&#35805;&#22266;&#23450;&#25915;&#20987;</strong>&#65288;Session Fixation Attack&#65289;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">23</span> &#22312; Java Web &#31995;&#32479;&#37324;&#65292;&#36890;&#24120;&#20351;&#29992; <code>JSESSIONID</code> &#26469;&#20256;&#36882;&#20250;&#35805; ID&#65292;&#35831;&#27714;&#37324;&#24102;&#19978;&#36825;&#20010;&#23646;&#24615;&#24456;&#23481;&#26131;&#23601;&#33021;&#35201;&#27714;&#31995;&#32479;&#20351;&#29992;&#35813;&#20250;&#35805; ID&#12290;&#20551;&#35774;&#25915;&#20987;&#32773;&#19968;&#24320;&#22987;&#35775;&#38382;&#31995;&#32479;&#65292;&#25343;&#21040;&#20102;&#19968;&#20010; <code>JSESSIONID</code> &#20026; <code>12345</code> &#30340;&#20250;&#35805; ID&#65292;&#20182;&#36824;&#27809;&#26377;&#30331;&#24405;&#31995;&#32479;&#65292;&#38543;&#21518;&#20182;&#35825;&#23548;&#29992;&#25143;&#24352;&#19977;&#35775;&#38382;&#20102;&#32593;&#31449;&#30340; <code>login.html?JESSIONID=12345</code> &#39029;&#38754;&#65292;&#24352;&#19977;&#30331;&#24405;&#20102;&#65292;&#36825;&#26102;&#25915;&#20987;&#32773;&#20877;&#29992;&#30456;&#21516;&#30340;&#20250;&#35805; ID &#36827;&#34892;&#25805;&#20316;&#65292;&#20182;&#23601;&#26377;&#20102;&#24352;&#19977;&#30340;&#26435;&#38480;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">23</span>&#20320;&#20063;&#21487;&#20197;&#21442;&#32771;&#32500;&#22522;&#30334;&#31185;&#30340;&#23450;&#20041;&#12290;</p><p>&#22909;&#22312; Spring&#12288;Security &#20026;&#25105;&#20204;&#20869;&#32622;&#20102;&#35299;&#20915;&#26041;&#26696;&#65292;&#38024;&#23545;&#20250;&#35805;&#22266;&#23450;&#25915;&#20987;&#65292;&#26377;&#22235;&#31181;&#22788;&#29702;&#26041;&#24335;&#65292;&#20855;&#20307;&#35265;&#34920; 10-12&#12290;</p><p><strong>&#34920; 10-12&#12288;<code>SessionFixationConfigurer</code> &#20013;&#30340;&#37197;&#32622;&#26041;&#27861;</strong></p><table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#37197;&#32622;&#26041;&#27861;</p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#35828;&#26126;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>none()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#20160;&#20040;&#37117;&#19981;&#20570;&#65292;&#25915;&#20987;&#25104;&#21151;&#20102;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>newSession()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#21019;&#24314;&#19968;&#20010;&#26032;&#20250;&#35805;&#65292;&#24050;&#26377;&#20250;&#35805;&#20013;&#38500;&#20102; Spring Security &#30456;&#20851;&#30340;&#23646;&#24615;&#22806;&#37117;&#19981;&#20250;&#34987;&#22797;&#21046;&#36807;&#26469;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>migrateSession()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#21019;&#24314;&#19968;&#20010;&#26032;&#20250;&#35805;&#65292;&#23558;&#24050;&#26377;&#20250;&#35805;&#20013;&#30340;&#20869;&#23481;&#22797;&#21046;&#36807;&#26469;&#65292;&#36825;&#26159; Servlet 3.0 &#21450;&#26356;&#26089;&#20043;&#21069;&#30340;&#23481;&#22120;&#20013;&#30340;&#40664;&#35748;&#26041;&#26696;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>changeSessionId()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#24050;&#26377;&#20250;&#35805;&#21487;&#20197;&#32487;&#32493;&#20351;&#29992;&#65292;&#20294;&#26159;&#20250;&#35805; ID &#20250;&#21464;&#65292;&#24182;&#36890;&#30693; <code>HttpSessionIdListener</code>&#65292;&#25915;&#20987;&#32773;&#25163;&#19978;&#30340;&#20250;&#35805; ID &#23601;&#27809;&#29992;&#20102;&#65292;&#36825;&#26159; Servlet 3.1 &#23481;&#22120;&#24320;&#22987;&#30340;&#40664;&#35748;&#26041;&#26696;</p></td>
</tr>
</tbody>
</table><p>&#20363;&#22914;&#65292;&#22312;&#25193;&#23637;&#20102; <code>WebSecurityConfigurerAdapter</code> &#30340;&#37197;&#32622;&#31867;&#37324;&#65292;&#21487;&#20197;&#36825;&#26679;&#36827;&#34892;&#35774;&#32622;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>protected void configure(HttpSecurity http) throws Exception {
    http.sessionManagement().sessionFixation().migrateSession();
        .and(); // &#30465;&#30053;&#21518;&#32493;&#30340;&#20854;&#20182;&#37197;&#32622;
}</code></pre><p>Spring Security &#22312;&#20250;&#35805;&#30340;&#31649;&#29702;&#26041;&#38754;&#36824;&#26377;&#24456;&#22810;&#20854;&#20182;&#37197;&#32622;&#26041;&#27861;&#65292;&#34920; 10-13 &#37324;&#23601;&#32599;&#21015;&#20102;&#19968;&#20123;&#12290;</p><p><strong>&#34920; 10-13&#12288;<code>SessionManagementConfigurer</code> &#20013;&#30340;&#37197;&#32622;&#26041;&#27861;</strong></p><table border="1" width="90%">
<thead>
<tr>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#37197;&#32622;&#26041;&#27861;</p></th>
<th><p class="&#34920;&#22836;&#21333;&#20803;&#26684;">&#35828;&#26126;</p></th>
</tr>
</thead>
<tbody>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>sessionCreationPolicy()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#20250;&#35805;&#21019;&#24314;&#31574;&#30053;&#65292;&#29992;&#30340;&#26159; <code>SessionCreationPolicy</code> &#26522;&#20030;&#65292;<code>ALWAYS</code> &#26159;&#22987;&#32456;&#21019;&#24314;&#65292;<code>NEVER</code> &#19981;&#21019;&#24314;&#20294;&#22914;&#26524;&#26377;&#20250;&#35805;&#23601;&#29992;&#65292;<code>IF_REQUIRED</code> &#26377;&#38656;&#35201;&#23601;&#24314;&#65292;<code>STATELESS</code> &#26080;&#29366;&#24577;&#65292;&#20063;&#19981;&#20250;&#29992;&#20250;&#35805;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>sessionFixation()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#26377;&#20851;&#20250;&#35805;&#22266;&#23450;&#25915;&#20987;&#30340;&#30456;&#20851;&#37197;&#32622;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>maximumSessions()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#20801;&#35768;&#30340;&#26368;&#22823;&#20250;&#35805;&#25968;</p></td>
</tr>
<tr>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;"><code>invalidSessionUrl()</code></p></td>
<td><p class="&#34920;&#26684;&#21333;&#20803;&#26684;">&#36935;&#21040;&#26080;&#25928;&#20250;&#35805; ID &#26102;&#65292;&#23558;&#29992;&#25143;&#37325;&#23450;&#21521;&#21040;&#25351;&#23450; URL</p></td>
</tr>
</tbody>
</table><h3 id="nav_point_165">10.4.3&#12288;&#36328;&#31449;&#33050;&#26412;&#25915;&#20987;&#38450;&#25252;</h3><p><strong>&#36328;&#31449;&#33050;&#26412;</strong>&#65288;Cross Site Scripting&#65292;&#31616;&#31216; XSS&#65289;<strong>&#25915;&#20987;</strong>&#26159;&#19968;&#31181;&#24120;&#35265;&#30340; Web &#23433;&#20840;&#28431;&#27934;&#65292;&#25915;&#20987;&#32773;&#36890;&#36807;&#32593;&#31449;&#30340;&#19968;&#20123;&#28431;&#27934;&#65292;&#22312;&#20854;&#39029;&#38754;&#19978;&#27880;&#20837;&#24694;&#24847;&#20195;&#30721;&#12290;&#36825;&#20123;&#20195;&#30721;&#36890;&#24120;&#37117;&#26159;&#38024;&#23545;&#29992;&#25143;&#27983;&#35272;&#22120;&#30340;&#33050;&#26412;&#65292;&#27983;&#35272;&#22120;&#26412;&#36523;&#24456;&#38590;&#20998;&#36776;&#27491;&#22312;&#25191;&#34892;&#30340;&#33050;&#26412;&#26159;&#32593;&#31449;&#26412;&#36523;&#30340;&#33050;&#26412;&#65292;&#36824;&#26159;&#25915;&#20987;&#32773;&#30340;&#24694;&#24847;&#33050;&#26412;&#12290;&#21482;&#35201;&#32593;&#31449;&#20801;&#35768;&#19978;&#20256;&#20869;&#23481;&#65292;&#22312;&#36755;&#20986;&#36825;&#20123;&#20869;&#23481;&#26102;&#21448;&#25226;&#20851;&#19981;&#20005;&#65292;&#23601;&#20250;&#32473;&#25915;&#20987;&#32773;&#30041;&#19979;&#21487;&#20056;&#20043;&#26426;&#65292;XSS &#25915;&#20987;&#27880;&#20837;&#30340;&#33050;&#26412;&#21487;&#20197;&#35835;&#21462;&#29992;&#25143;&#30340; Cookies&#12289;&#27491;&#22312;&#35775;&#38382;&#30340;&#39029;&#38754;&#19978;&#30340;&#25935;&#24863;&#20449;&#24687;&#65292;&#29978;&#33267;&#20462;&#25913;&#39029;&#38754;&#30340;&#20869;&#23481;&#65292;&#36896;&#25104;&#26356;&#20005;&#37325;&#30340;&#21361;&#23475;&#12290;</p><p>&#26080;&#35770;&#26159;&#21453;&#23556;&#22411;&#30340; XSS&#65292;&#36824;&#26159;&#25345;&#20037;&#22411;&#30340; XSS&#65292;&#38450;&#24481;&#30340;&#24605;&#36335;&#37117;&#24046;&#19981;&#22810;&#65292;&#35201;&#20040;&#23601;&#26159;&#22312;&#25910;&#21040;&#36755;&#20837;&#30340;&#20869;&#23481;&#26102;&#36827;&#34892;&#32534;&#30721;&#25110;&#32773;&#36807;&#28388;&#22788;&#29702;&#65292;&#35201;&#20040;&#23601;&#26159;&#22312;&#36755;&#20986;&#20869;&#23481;&#26102;&#36827;&#34892;&#22788;&#29702;&#65292;&#24635;&#20043;&#26159;&#35753;&#24694;&#24847;&#20195;&#30721;&#26080;&#27861;&#21457;&#25381;&#20316;&#29992;&#12290;OWASP &#25552;&#20379;&#20102;&#19968;&#20010;&#39640;&#25928;&#31616;&#21333;&#30340; Java Encoder&#65292;&#29992;&#31867;&#20284;&#19979;&#38754;&#30340;&#20195;&#30721;&#23601;&#33021;&#23454;&#29616;&#20869;&#23481;&#30340;&#22788;&#29702;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>String cleanHtml = Encode.forHtmlContent(rawHtml);
String cleanCss = Encode.forCssString(rawCss);
String cleanJs = Encode.forJavaScript(rawJs);</code></pre><p>&#29616;&#20195;&#30340;&#20027;&#27969;&#27983;&#35272;&#22120;&#20063;&#38024;&#23545; XSS &#25915;&#20987;&#25552;&#20379;&#20102;&#19968;&#20123;&#38450;&#25252;&#65292;&#29978;&#33267;&#21487;&#20197;&#30452;&#25509;&#38459;&#26029;&#25915;&#20987;&#65292;Spring Security &#23601;&#25552;&#20379;&#20102;&#35774;&#32622; <code>X-XSS-Protection</code> &#22836;&#30340;&#26426;&#21046;&#12290;&#22312;&#25193;&#23637;&#20102; <code>WebSecurityConfigurerAdapter</code> &#30340;&#37197;&#32622;&#31867;&#37324;&#65292;&#21487;&#20197;&#20687;&#19979;&#38754;&#36825;&#26679;&#35774;&#32622; <code>XXssProtectionHeaderWriter</code>&#65292;&#40664;&#35748;&#23601;&#26159;&#24320;&#21551;&#20445;&#25252;&#65292;&#38459;&#26029;&#25915;&#20987;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>protected void configure(HttpSecurity http) throws Exception {
    http.headers().xssProtection().xssProtectionEnabled(true)
        .block(true).and(); // &#30465;&#30053;&#21518;&#32493;&#30340;&#20854;&#20182;&#37197;&#32622;
}</code></pre><p>&#36825;&#27573;&#37197;&#32622;&#20250;&#22312; HTTP &#21709;&#24212;&#37324;&#24102;&#19978; <code>X-XSS-Protection</code> &#22836;&#65292;&#31867;&#20284;&#19979;&#38754;&#36825;&#26679;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>X-XSS-Protection: 1; mode=block</code></pre><p>&#19978;&#38754;&#30340;&#37197;&#32622;&#26159;&#40664;&#35748;&#24320;&#21551;&#30340;&#65292;Spring Security &#36824;&#26377;&#19968;&#20010;&#40664;&#35748;&#19981;&#24320;&#21551;&#30340; CSP&#65288;Content Security Policy&#65292;&#20869;&#23481;&#23433;&#20840;&#31574;&#30053;&#65289;<span class="&#27880;&#37322;&#32534;&#21495;">24</span>&#65292;&#20063;&#23601;&#26159; HTTP &#30340; <code>Content-Security-Policy</code> &#22836;&#37197;&#32622;&#65292;&#38656;&#35201;&#24320;&#21457;&#32773;&#26681;&#25454;&#23454;&#38469;&#24773;&#20917;&#36827;&#34892;&#37197;&#32622;&#12290;CSP &#30456;&#24403;&#20110;&#19968;&#20010;&#30333;&#21517;&#21333;&#65292;&#21578;&#35785;&#27983;&#35272;&#22120;&#26576;&#19968;&#31867;&#22411;&#30340;&#36164;&#28304;&#26377;&#21738;&#20123;&#26159;&#33021;&#21152;&#36733;&#30340;&#65292;&#38500;&#27492;&#20197;&#22806;&#30340;&#19968;&#27010;&#19981;&#33021;&#21152;&#36733;&#65292;&#36825;&#22312;&#19968;&#23450;&#31243;&#24230;&#19978;&#25552;&#39640;&#20102;&#27880;&#20837;&#24694;&#24847;&#20869;&#23481;&#30340;&#38376;&#27099;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">24</span>&#38446;&#19968;&#23792;&#22312; 2016 &#24180;&#20889;&#36807;&#19968;&#31687;&#20851;&#20110; Content Security Policy &#30340;&#25991;&#31456;&#65292;&#23545;&#20854;&#20013;&#30340;&#31574;&#30053;&#20171;&#32461;&#24471;&#27604;&#36739;&#35814;&#32454;&#12290;</p><p>&#21516;&#26679;&#26159;&#37197;&#32622; HTTP &#30340;&#22836;&#65292;&#22312;&#25193;&#23637;&#20102; <code>WebSecurityConfigurerAdapter</code> &#30340;&#37197;&#32622;&#31867;&#37324;&#28155;&#21152;&#19979;&#38754;&#36825;&#26679;&#30340;&#20195;&#30721;&#65292;&#35753;&#27983;&#35272;&#22120;&#21482;&#33021;&#20174;&#24403;&#21069;&#22495;&#21517;&#21152;&#36733;&#33050;&#26412;&#65292;&#19981;&#21152;&#36733;&#20219;&#20309; <code>&lt;object/&gt;</code> &#26631;&#31614;&#30340;&#36164;&#28304;&#65292;&#25226;&#27880;&#20837;&#34892;&#20026;&#25253;&#21578;&#32473; <code>/csp-report-endpoint/</code> &#36825;&#20010;&#22320;&#22336;&#12290;&#30001;&#20110;&#36824;&#21152;&#20102; <code>reportOnly()</code>&#65292;&#25152;&#20197;&#22312;&#21457;&#29983;&#25915;&#20987;&#26102;&#65292;&#21482;&#20250;&#19978;&#25253;&#23041;&#32961;&#65292;&#24182;&#19981;&#23454;&#38469;&#38459;&#26029;&#25915;&#20987;&#65292;&#36825;&#30456;&#24403;&#20110;&#22312;&#21709;&#24212;&#37324;&#28155;&#21152;&#20102; <code>Content-Security-Policy-Report-Only</code> &#22836;&#12290;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>protected void configure(HttpSecurity http) throws Exception {
    http.headers()
        .contentSecurityPolicy("script-src 'self'; object-src 'none'; report-uri /csp-report-endpoint/")
        .reportOnly()
        .and(); // &#30465;&#30053;&#21518;&#32493;&#30340;&#20854;&#20182;&#37197;&#32622;
}</code></pre><h3 id="nav_point_166">10.4.4&#12288;&#28857;&#20987;&#21163;&#25345;&#25915;&#20987;&#38450;&#25252;</h3><p><strong>&#28857;&#20987;&#21163;&#25345;</strong>&#65288;Clickjacking&#65289;<strong>&#25915;&#20987;</strong>&#26159;&#25351;&#25915;&#20987;&#32773;&#36890;&#36807;&#26576;&#20123;&#26041;&#24335;&#65292;&#23558;&#24694;&#24847;&#20195;&#30721;&#20266;&#35013;&#36215;&#26469;&#65292;&#35825;&#23548;&#29992;&#25143;&#22312;&#19981;&#30693;&#24773;&#30340;&#24773;&#20917;&#19979;&#28857;&#20987;&#35302;&#21457;&#24694;&#24847;&#30340;&#21629;&#20196;&#12290;&#36890;&#24120;&#30340;&#20570;&#27861;&#21487;&#20197;&#26159;&#23558;&#26576;&#20010;&#27491;&#24120;&#32593;&#39029;&#29992; iframe &#23884;&#20837;&#36827;&#26469;&#65292;&#19978;&#38754;&#35206;&#30422;&#19968;&#20010;&#36879;&#26126;&#30340;&#23618;&#65288;&#20063;&#21487;&#20197;&#26159;&#21478;&#19968;&#20010; iframe&#65289;&#65292;&#29992;&#25143;&#20197;&#20026;&#33258;&#24049;&#22312;&#25805;&#20316;&#27491;&#24120;&#32593;&#39029;&#65292;&#20854;&#23454;&#28857;&#20987;&#30340;&#37117;&#26159;&#36879;&#26126;&#23618;&#37324;&#30340;&#19996;&#35199;&#12290;&#26681;&#25454;&#20854;&#25915;&#20987;&#30340;&#25163;&#27573;&#65292;&#20063;&#26377;&#20154;&#23558;&#20854;&#31216;&#20026;<strong>&#30028;&#38754;&#20266;&#35013;&#25915;&#20987;</strong>&#65288;UI redress attack&#65289;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">25</span></p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">25</span>&#21487;&#20197;&#21442;&#32771; OWASP &#23448;&#32593;&#20851;&#20110;&#28857;&#20987;&#21163;&#25345;&#30340;&#20855;&#20307;&#35828;&#26126;&#12290;</p><p>&#26082;&#28982;&#25915;&#20987;&#32773;&#22312;&#24694;&#24847;&#20266;&#35013;&#30340;&#39029;&#38754;&#37324;&#20250;&#29992; iframe &#23884;&#20837;&#27491;&#24120;&#39029;&#38754;&#65292;&#37027;&#25105;&#20204;&#22312;&#38450;&#24481;&#26102;&#23601;&#20250;&#24819;&#21040;&#19981;&#35753;&#33258;&#24049;&#30340;&#32593;&#39029;&#34987;&#23884;&#20837;&#24694;&#24847;&#39029;&#38754;&#20013;&#12290;2008 &#24180;&#28857;&#20987;&#21163;&#25345;&#25915;&#20987;&#34987;&#27491;&#24335;&#25552;&#20986;&#21518;&#65292;2009 &#24180; Internet Explorer 8 &#20013;&#23601;&#22686;&#21152;&#20102;&#19968;&#20010; <code>X-Frame-Options</code> &#22836;&#65292;&#21518;&#26469;&#20854;&#20182;&#20027;&#27969;&#27983;&#35272;&#22120;&#20063;&#32439;&#32439;&#36319;&#36827;&#12290;&#36825;&#20010; HTTP &#22836;&#21487;&#20197;&#21462;&#22914;&#19979;&#20960;&#20010;&#20540;&#65306;</p><ul>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><code>DENY</code>&#65292;&#25298;&#32477;&#34987;&#20219;&#20309;&#32593;&#39029;&#29992; iframe &#23884;&#20837;&#65307;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><code>SAMEORGIN</code>&#65292;&#21482;&#20801;&#35768;&#21516;&#28304;&#32593;&#39029;&#23884;&#20837;&#65307;</li>
<li class="&#31532;1&#32423;&#26080;&#24207;&#21015;&#34920;"><code>ALLOW-FROM</code> &#20855;&#20307; <code>URI</code>&#65292;&#20801;&#35768;&#29305;&#23450; URI &#39029;&#38754;&#23884;&#20837;&#65288;&#26377;&#20123;&#26694;&#26550;&#19981;&#25552;&#20379;&#36825;&#20010;&#36873;&#39033;&#65292;&#20363;&#22914; Spring Security&#65289;&#12290;</li>
</ul><p>&#25105;&#20204;&#21487;&#20197;&#22312;&#36127;&#36733;&#22343;&#34913;&#23618;&#32479;&#19968;&#22686;&#21152; <code>X-Frame-Options</code>&#65292;&#20063;&#21487;&#20197;&#20132;&#32473; Java &#24212;&#29992;&#26469;&#23454;&#29616;&#65292;&#27604;&#22914;&#65292;&#22312; Spring Security &#37324;&#23601;&#21487;&#20197;&#36825;&#20040;&#26469;&#37197;&#32622;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>protected void configure(HttpSecurity http) throws Exception {
    http.headers().frameOptions().sameOrigin()
        .and(); // &#30465;&#30053;&#21518;&#32493;&#30340;&#20854;&#20182;&#37197;&#32622;
}</code></pre><h3 id="nav_point_167">10.4.5&#12288;&#24341;&#23548;&#20351;&#29992; HTTPS</h3><p>&#26089;&#26399;&#30340;&#32593;&#31449;&#22522;&#26412;&#37117;&#26159; HTTP &#30340;&#65292;&#22823;&#22810;&#36890;&#36807;&#26126;&#25991;&#22312;&#32593;&#32476;&#19978;&#36827;&#34892;&#20256;&#36755;&#65292;&#38543;&#30528;&#22823;&#23478;&#23545;&#38544;&#31169;&#20445;&#25252;&#12289;&#25935;&#24863;&#20449;&#24687;&#31561;&#26041;&#38754;&#30340;&#37325;&#35270;&#31243;&#24230;&#30340;&#25552;&#39640;&#65292;&#36234;&#26469;&#36234;&#22810;&#30340;&#32593;&#31449;&#24320;&#22987;&#25903;&#25345; HTTPS &#21327;&#35758;&#65292;&#23588;&#20854;&#26159;&#28041;&#21450;&#36164;&#37329;&#30340;&#32593;&#38134;&#12289;&#31532;&#19977;&#26041;&#25903;&#20184;&#24179;&#21488;&#31561;&#31995;&#32479;&#65292;&#26356;&#26159;&#24212;&#35813;&#24378;&#21046;&#20351;&#29992; HTTPS&#12290;</p><p>&#22823;&#22810;&#25968;&#32593;&#31449;&#37117;&#20250;&#21516;&#26102;&#25903;&#25345; HTTP &#21644; HTTPS&#65292;&#20551;&#35774;&#29992;&#25143;&#22987;&#32456;&#22312;&#20351;&#29992; HTTP &#35775;&#38382;&#35813;&#32593;&#31449;&#65288;&#23454;&#38469;&#19978;&#22823;&#22810;&#25968;&#20154;&#22312;&#27983;&#35272;&#22120;&#20013;&#36755;&#20837;&#22320;&#22336;&#26102;&#20063;&#19981;&#20250;&#36755;&#21327;&#35758; <code>https://</code>&#65289;&#65292;&#37027; HTTPS &#30340;&#25903;&#25345;&#20063;&#23601;&#24418;&#21516;&#34394;&#35774;&#12290;2012 &#24180;&#21457;&#24067;&#30340; HTTP &#20005;&#26684;&#20256;&#36755;&#23433;&#20840;&#21327;&#35758;&#65288;HTTP Strict Transport Security&#65292;&#31616;&#31216; HSTS&#65289;&#27491;&#26159;&#29992;&#26469;&#24341;&#23548;&#27983;&#35272;&#22120;&#24378;&#21046;&#20351;&#29992; HTTPS &#30340;&#12290;&#28155;&#21152;&#20102; <code>Strict-Transport-Security</code> &#22836;&#21518;&#65292;&#27983;&#35272;&#22120;&#22312;&#39318;&#27425;&#35775;&#38382;&#26102;&#20250;&#29992; HTTP &#35831;&#27714;&#65292;&#22312;&#21709;&#24212;&#37324;&#21457;&#29616;&#20102;&#36825;&#20010;&#22836;&#65292;&#21518;&#32493;&#23601;&#20250;&#24378;&#21046;&#36716;&#20026;&#20351;&#29992; HTTPS&#12290;&#27492;&#22806;&#65292;&#20351;&#29992;&#20102; HSTS &#21518;&#65292;&#38024;&#23545;&#35777;&#20070;&#26657;&#39564;&#19981;&#36890;&#36807;&#31561;&#24773;&#20917;&#65292;&#21407;&#26412;&#29992;&#25143;&#21487;&#20197;&#36873;&#25321;&#24573;&#30053;&#25253;&#38169;&#65292;&#29616;&#22312;&#23601;&#19981;&#20877;&#33021;&#22815;&#24573;&#30053;&#36825;&#31181;&#38169;&#35823;&#65292;&#21448;&#36827;&#19968;&#27493;&#25552;&#21319;&#20102;&#23433;&#20840;&#24615;&#12290;</p><p>&#20363;&#22914;&#19979;&#38754;&#36825;&#20010;&#22836;&#23601;&#35201;&#27714;&#27983;&#35272;&#22120;&#22312;&#26410;&#26469;&#30340; 1 &#24180;&#37324;&#65292;&#23545;&#20110;&#24403;&#21069;&#32593;&#31449;&#21450;&#20854;&#23376;&#22495;&#21517;&#37117;&#30452;&#25509;&#20351;&#29992; HTTPS &#26469;&#36827;&#34892;&#35775;&#38382;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code></pre><p>&#22312; Spring Security &#37324;&#21487;&#20197;&#36825;&#26679;&#26469;&#20570;&#37197;&#32622;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>protected void configure(HttpSecurity http) throws Exception {
    http.headers().httpStrictTransportSecurity()
        .maxAgeInSeconds(365*24*3600).includeSubDomains(true);
        .and(); // &#30465;&#30053;&#21518;&#32493;&#30340;&#20854;&#20182;&#37197;&#32622;
}</code></pre><p>&#38024;&#23545;&#30693;&#21517;&#30340;&#32593;&#31449;&#65292;&#20027;&#27969;&#27983;&#35272;&#22120;&#65288;&#20363;&#22914; Chrome&#65289;&#36824;&#20869;&#32622;&#20102;&#19968;&#20221; HSTS &#30340;&#39044;&#21152;&#36733;&#28165;&#21333;&#65292;&#35760;&#24405;&#20102;&#21738;&#20123;&#32593;&#31449;&#30452;&#25509;&#23601;&#20351;&#29992; HTTPS&#12290;&#38024;&#23545;&#36825;&#31181;&#28155;&#21152;&#36827;&#28165;&#21333;&#30340;&#24773;&#20917;&#65292;<code>Strict-Transport-Security</code> &#22836;&#30340;&#20540;&#37324;&#20250;&#21152;&#19978; <code>preload</code>&#12290;</p><p>&#21478;&#22806;&#65292;&#25105;&#20204;&#20063;&#21487;&#20197;&#22312;&#20195;&#30721;&#37324;&#35201;&#27714;&#29305;&#23450;&#30340; HTTP &#35831;&#27714;&#24517;&#39035;&#36716;&#20026; HTTPS&#65292;&#21487;&#20197;&#20687;&#19979;&#38754;&#36825;&#26679;&#35201;&#27714;&#25152;&#26377;&#35831;&#27714;&#37117;&#20351;&#29992; HTTPS&#65292;&#20063;&#21487;&#20197;&#29992; <code>antMatchers()</code> &#25351;&#23450;&#29305;&#23450;&#30340;&#35831;&#27714;&#36208; HTTPS&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>protected void configure(HttpSecurity http) throws Exception {
    http.requiresChannel().anyRequest().requiresSecure()
        .and(); // &#30465;&#30053;&#21518;&#32493;&#30340;&#20854;&#20182;&#37197;&#32622;
}</code></pre><h2 id="nav_point_168">10.5&#12288;&#23458;&#25143;&#31471;&#31243;&#24207;&#30340;&#35748;&#35777;</h2><p>&#21069;&#38754;&#30340;&#20960;&#33410;&#65292;&#25105;&#20204;&#32842;&#30340;&#22823;&#22810;&#26159;&#38024;&#23545;&#20154;&#22312;&#25805;&#20316; Web &#30028;&#38754;&#26102;&#30340;&#35748;&#35777;&#65292;&#21363;&#36890;&#36807;&#30331;&#24405;&#30028;&#38754;&#36827;&#34892;&#30331;&#24405;&#65292;&#25343;&#21040;&#25152;&#30331;&#24405;&#29992;&#25143;&#30340;&#26435;&#38480;&#21518;&#20877;&#36827;&#34892;&#21518;&#32493;&#30340;&#25805;&#20316;&#12290;&#22312;&#23454;&#38469;&#24037;&#20316;&#20013;&#65292;&#31995;&#32479;&#20869;&#37096;&#36824;&#26377;&#24456;&#22810;&#25805;&#20316;&#37117;&#26159;&#36890;&#36807; API &#30340;&#26041;&#24335;&#36827;&#34892;&#30340;&#12290;&#22312;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#30340;&#20363;&#23376;&#37324;&#65292;&#25105;&#20204;&#20063;&#20889;&#20102;&#20195;&#34920;&#23458;&#25143;&#31471;&#30340;&#31243;&#24207;&#65292;&#23427;&#23601;&#26159;&#36890;&#36807; REST &#26381;&#21153;&#19982;&#22902;&#33590;&#24215;&#20132;&#20114;&#30340;&#12290;&#22240;&#27492;&#65292;&#22312;&#26412;&#31456;&#30340;&#26368;&#21518;&#65292;&#25105;&#20204;&#35201;&#19968;&#36215;&#26469;&#30475;&#19968;&#19979;&#23458;&#25143;&#31471;&#31243;&#24207;&#35813;&#22914;&#20309;&#36827;&#34892;&#36523;&#20221;&#35748;&#35777;&#12290;</p><h3 id="nav_point_169">10.5.1&#12288;&#20960;&#31181;&#24120;&#35265;&#30340;&#35748;&#35777;&#26041;&#24335;</h3><p>&#22312; HTTP &#21327;&#35758;&#37324;&#30452;&#25509;&#23450;&#20041;&#20102;&#19968;&#20123;&#35748;&#35777;&#30340;&#26041;&#24335;&#65292;&#27604;&#22914; <code>Authorization</code> &#36825;&#20010; HTTP &#22836;&#23601;&#26159;&#19987;&#38376;&#29992;&#26469;&#20570;&#35748;&#35777;&#30340;&#12290;&#20854;&#20013;&#26368;&#22522;&#26412;&#65292;&#20063;&#26159;&#26368;&#31616;&#21333;&#30340;&#23601;&#26159; <strong>HTTP Basic &#35748;&#35777;</strong>&#65292;&#30452;&#25509;&#23558;&#29992;&#25143;&#21517;&#21644;&#23494;&#30721;&#29992; BASE64 &#32534;&#30721;&#21518;&#25918;&#22312;&#35831;&#27714;&#22836;&#37324;&#65292;&#27599;&#20010;&#35831;&#27714;&#37117;&#24102;&#30528;&#36825;&#20123;&#20449;&#24687;&#65292;&#30465;&#21435;&#20102;&#30331;&#24405;&#39029;&#12289;Cookies&#12289;Session &#31561;&#40635;&#28902;&#65292;&#23601;&#20687;&#19979;&#38754;&#36825;&#26679;&#12290;&#20294;&#19982;&#20043;&#30456;&#20276;&#30340;&#23433;&#20840;&#38382;&#39064;&#20063;&#26174;&#32780;&#26131;&#35265;&#65292;&#36825;&#37324;&#30340;&#36523;&#20221;&#20449;&#24687;&#20960;&#20046;&#23601;&#26159;&#29992;&#26126;&#25991;&#25918;&#22312;&#32593;&#19978;&#20256;&#36755;&#30340;&#65292;&#24456;&#23481;&#26131;&#23601;&#33021;&#34987;&#20154;&#25130;&#33719;&#65292;&#25152;&#20197;&#33267;&#23569;&#24212;&#35813;&#20351;&#29992; HTTPS &#23545;&#25972;&#20010;&#36890;&#20449;&#36807;&#31243;&#36827;&#34892;&#21152;&#23494;&#12290;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>Authorization: Basic &lt;BASE64&#32534;&#30721;&#20540;&gt;</code></pre><p>&#21478;&#19968;&#31181;&#26041;&#24335;&#26159;<strong>&#22522;&#20110;&#20196;&#29260;&#30340;&#35748;&#35777;</strong>&#65292;&#20063;&#21487;&#20197;&#31216;&#20026; Bearer &#35748;&#35777;&#65292;&#21363;&#21578;&#35785;&#31995;&#32479;&#21487;&#20197;&#25226;&#26435;&#38480;&#36171;&#20104;&#36825;&#20010;&#20196;&#29260;&#30340;&#25658;&#24102;&#32773;&#12290;&#23427;&#21516;&#26679;&#20063;&#26159;&#32467;&#21512; <code>Authorization</code> &#36825;&#20010; HTTP &#26469;&#20351;&#29992;&#30340;&#65292;&#20687;&#19979;&#38754;&#36825;&#26679;&#12290;&#23427;&#26368;&#26089;&#26159;&#22312; RFC 6750 &#37324;&#25552;&#20986;&#30340;&#65292;&#20316;&#20026; OAuth 2.0 &#30340;&#19968;&#37096;&#20998;&#65292;&#20294;&#29616;&#22312;&#20063;&#32463;&#24120;&#21333;&#29420;&#20351;&#29992;&#12290;JWT &#23601;&#26159;&#30446;&#21069;&#36739;&#20026;&#24120;&#35265;&#30340;&#20196;&#29260;&#65292;&#25105;&#20204;&#22312;&#31245;&#21518;&#30340;&#20363;&#23376;&#37324;&#20063;&#20250;&#29992;&#21040;&#12290;&#34429;&#28982;&#20196;&#29260;&#37324;&#19968;&#33324;&#27809;&#26377;&#23494;&#30721;&#36825;&#26679;&#30340;&#25935;&#24863;&#20449;&#24687;&#65292;&#20294;&#34987;&#25130;&#33719;&#19979;&#26469;&#20063;&#33021;&#22312;&#20196;&#29260;&#26377;&#25928;&#26399;&#20869;&#34987;&#25915;&#20987;&#32773;&#21033;&#29992;&#65292;&#25152;&#20197;&#20063;&#24314;&#35758;&#25645;&#37197; HTTPS &#19968;&#36215;&#26469;&#29992;&#12290;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>Authorization: Bearer &lt;&#20196;&#29260;&gt;</code></pre><p>&#29616;&#22312;&#30340;&#20960;&#23478;&#20844;&#26377;&#20113;&#26381;&#21153;&#21378;&#21830;&#65292;&#20687;&#20122;&#39532;&#36874;&#20113;&#12289;&#38463;&#37324;&#20113;&#12289;&#33150;&#35759;&#20113;&#31561;&#20844;&#26377;&#20113;&#37117;&#26080;&#19968;&#20363;&#22806;&#22320;&#25552;&#20379;&#20102; API &#23494;&#38053;&#30340;&#26041;&#24335;&#26469;&#35753;&#29992;&#25143;&#35775;&#38382;&#33258;&#24049;&#30340;&#26381;&#21153;&#12290;&#22312;&#23454;&#36341;&#20013; API &#23494;&#38053;&#21487;&#20197;&#25918;&#22312; HTTP &#22836;&#37324;&#65288;<code>Authorization</code> &#23601;&#24456;&#21512;&#36866;&#65289;&#65292;&#20063;&#21487;&#20197;&#25918;&#22312; URL &#25110;&#32773;&#35831;&#27714;&#27491;&#25991;&#37324;&#12290;&#33150;&#35759;&#20113;&#36873;&#25321;&#30340;&#26159;&#21069;&#32773;&#65292;&#22312; <code>Authorization</code> &#22836;&#20013;&#30340; <code>Credential</code> &#37324;&#23601;&#21253;&#21547;&#20102; <code>SecretId</code>&#65292;&#19979;&#38754;&#30340;&#31034;&#20363;&#23601;&#26159;&#33150;&#35759;&#20113;&#25991;&#26723;&#20013;&#30340;&#19968;&#20010; <code>POST</code> &#35831;&#27714;&#26679;&#20363;&#65292;&#35843;&#29992;&#20102; CVM &#30340;&#25509;&#21475;&#12290;&#38463;&#37324;&#20113;&#36873;&#25321;&#20102;&#21518;&#32773;&#65292;&#22312; Query String &#37324;&#25658;&#24102; <code>AccessKeyId</code>&#12290;&#27492;&#22806;&#65292;&#20026;&#20102;&#20445;&#35777;&#35831;&#27714;&#30340;&#23433;&#20840;&#24615;&#65292;&#36824;&#20250;&#23545;&#35831;&#27714;&#22836;&#21644;&#27491;&#25991;&#36827;&#34892;&#31614;&#21517;&#65292;&#38450;&#27490;&#35831;&#27714;&#34987;&#31713;&#25913;&#65292;&#35831;&#27714;&#20013;&#30340;&#26102;&#38388;&#25139;&#38500;&#20102;&#26631;&#35760;&#35831;&#27714;&#21457;&#36215;&#30340;&#26102;&#38388;&#65292;&#36824;&#21487;&#20197;&#22312;&#36935;&#21040;&#37325;&#25918;&#26102;&#36215;&#21040;&#19968;&#23450;&#30340;&#38450;&#24481;&#20316;&#29992;&#65288;&#36825;&#26102;&#22914;&#26524;&#35831;&#27714;&#37324;&#24102;&#20102;&#21807;&#19968;&#30340;&#38543;&#26426;&#25968;&#25928;&#26524;&#20250;&#26356;&#22909;&#65289;&#12290;&#19981;&#36807;&#22312;&#23454;&#38469;&#20351;&#29992;&#26102;&#65292;&#25105;&#20204;&#19968;&#33324;&#24182;&#19981;&#20250;&#33258;&#24049;&#26469;&#25340;&#35013;&#35831;&#27714;&#25253;&#25991;&#65292;&#32780;&#26159;&#20250;&#20351;&#29992;&#20113;&#26381;&#21153;&#21378;&#21830;&#25552;&#20379;&#30340; SDK&#12290;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>https://cvm.tencentcloudapi.com/

Authorization: TC3-HMAC-SHA256 Credential=AKID********EXAMPLE/2018-05-30/cvm/tc3_request,
SignedHeaders=content-type;host, Signature=582c400e06b5924a6f2b5d7d672d79c15b13162d9279b0855cfba6789a8edb4c
Content-Type: application/json
Host: cvm.tencentcloudapi.com
X-TC-Action: DescribeInstances
X-TC-Version: 2017-03-12
X-TC-Timestamp: 1527672334
X-TC-Region: ap-guangzhou

{"Offset":0,"Limit":10}</code></pre><p>&#38500;&#27492;&#20043;&#22806;&#65292;OAuth 2.0<span class="&#27880;&#37322;&#32534;&#21495;">26</span> &#21644; SAML 2.0&#65288;&#23433;&#20840;&#26029;&#35328;&#26631;&#35760;&#35821;&#35328; 2.0&#65289;&#36825;&#20004;&#31181;&#24320;&#25918;&#26631;&#20934;&#22312;&#29983;&#20135;&#29615;&#22659;&#20013;&#20063;&#26377;&#38750;&#24120;&#24191;&#27867;&#30340;&#20351;&#29992;&#65292;&#22914;&#26524;&#24050;&#32463;&#26377;&#30456;&#24212;&#30340;&#35748;&#35777;&#26426;&#21046;&#65292;&#21487;&#20197;&#32771;&#34385;&#25509;&#20837;&#36827;&#21435;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">26</span>OAuth 2.0 &#26159;&#36523;&#20221;&#35748;&#35777;&#30340;&#34892;&#19994;&#26631;&#20934;&#21327;&#35758;&#12290;</p><h3 id="nav_point_170">10.5.2&#12288;&#29992; <code>RestTemplate</code> &#23454;&#29616;&#31616;&#21333;&#30340;&#35748;&#35777;</h3><p>&#26082;&#28982;&#26159;&#21457;&#36865; HTTP &#35831;&#27714;&#65292;&#35843;&#29992; <code>REST</code> &#25509;&#21475;&#65292;&#33258;&#28982;&#23601;&#20250;&#32852;&#24819;&#21040;&#20351;&#29992;&#25105;&#20204;&#22312;&#19978;&#19968;&#31456;&#37324;&#23398;&#21040;&#30340; <code>RestTemplate</code>&#65292;&#32780;&#19988; Spring Boot &#26089;&#23601;&#20026;&#23427;&#20934;&#22791;&#22909;&#20102;&#36741;&#21161;&#31867;&#65292;&#21487;&#20197;&#35753;&#25105;&#20204;&#26041;&#20415;&#22320;&#25805;&#20316; <code>Authorization</code> &#22836;&#12290;&#19979;&#38754;&#23601;&#35753;&#25105;&#20204;&#31616;&#21333;&#22320;&#30475;&#19968;&#19979;&#65292;&#22914;&#20309;&#22312; Spring Boot &#24037;&#31243;&#37324;&#20351;&#29992; <code>RestTemplate</code> &#23436;&#25104; HTTP Basic &#35748;&#35777;&#21644;&#22522;&#20110; JWT &#30340;&#35748;&#35777;&#12290;</p><blockquote>
<p><strong>&#38656;&#27714;&#25551;&#36848;</strong>&#12288;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#30340;&#39038;&#23458;&#21487;&#20197;&#20351;&#29992;&#23458;&#25143;&#31471;&#31243;&#24207;&#26469;&#26597;&#35810;&#33756;&#21333;&#24182;&#19979;&#21333;&#65292;&#20294;&#24456;&#22810;&#25805;&#20316;&#37117;&#38656;&#35201;&#23454;&#29616;&#35748;&#35777;&#65292;&#37027;&#20040;&#23458;&#25143;&#31471;&#31243;&#24207;&#35813;&#22914;&#20309;&#26469;&#23436;&#25104;&#35831;&#27714;&#30340;&#35748;&#35777;&#21602;&#65311;</p>
</blockquote><p>&#22240;&#20026;&#35831;&#27714;&#26159;&#30452;&#25509;&#30001;&#23458;&#25143;&#31471;&#31243;&#24207;&#21457;&#36215;&#30340;&#65292;&#25152;&#20197;&#26381;&#21153;&#25552;&#20379;&#26041;&#38656;&#35201;&#20851;&#38381; CSRF &#38450;&#25252;&#65292;&#23601;&#20687;&#19979;&#38754;&#36825;&#26679;&#65292;&#26412;&#20070;&#21518;&#38754;&#30340; BinaryTea &#24037;&#31243;&#20013;&#37117;&#35201;&#20851;&#38381; CSRF &#38450;&#25252;&#65306;</p><pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>protected void configure(HttpSecurity http) throws Exception {
    http.csrf().disable().and(); // &#30465;&#30053;&#21518;&#32493;&#30340;&#20854;&#20182;&#37197;&#32622;
}</code></pre><ol>
<li><p><strong>HTTP Basic &#35748;&#35777;</strong></p>
<p>&#20808;&#26469;&#30475;&#30475;&#26368;&#22522;&#26412;&#30340; HTTP Basic &#35748;&#35777;&#65292;&#36825;&#37324;&#36890;&#36807; <code>RestTemplateBuilder.basicAuthentication()</code> &#26041;&#27861;&#35774;&#32622;&#20102;&#29992;&#25143;&#21517;&#19982;&#23494;&#30721;&#12290;&#20854;&#26412;&#36136;&#26159;&#21019;&#24314;&#19968;&#20010; <code>RestTemplateBuilderClientHttpRequestInitializer</code> &#23454;&#20363;&#65292;&#23558;&#23427;&#28155;&#21152;&#21040; <code>RestTemplate</code> &#30340; <code>clientHttpRequestInitializers</code> &#38598;&#21512;&#37324;&#12290;&#22312;&#21019;&#24314; <code>ClientHttpRequest</code> &#26102;&#65292;&#20250;&#25191;&#34892;&#38598;&#21512;&#37324;&#30340; <code>ClientHttpRequestInitializer</code> &#23545;&#35831;&#27714;&#20570;&#21021;&#22987;&#21270;&#12290;&#22312;&#35831;&#27714;&#37324;&#19981;&#21253;&#21547; <code>Authorization</code> &#22836;&#26102;&#65292;<code>RestTemplate</code> &#20250;&#33258;&#21160;&#26681;&#25454;&#35774;&#32622;&#28155;&#21152;&#30456;&#24212;&#30340;&#35748;&#35777;&#20449;&#24687;&#12290;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-39 &#25152;&#31034;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">27</span></p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-39</strong>&#12288;&#28155;&#21152;&#20102; HTTP Basic &#35748;&#35777;&#30340; <code>RestTemplate</code> &#21021;&#22987;&#21270;&#20195;&#30721;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Bean
public RestTemplate restTemplate(RestTemplateBuilder builder) {
    return builder.requestFactory(this::requestFactory)
                   .setConnectTimeout(Duration.ofSeconds(1)) // &#36830;&#25509;&#36229;&#26102;
                   .setReadTimeout(Duration.ofSeconds(5)) // &#35835;&#21462;&#36229;&#26102;
                   .basicAuthentication("LiLei", "binarytea") // HTTP Basic&#35748;&#35777;&#20449;&#24687;
                   .build();
}</code></pre>
<p>BinaryTea &#24037;&#31243;&#20063;&#35201;&#31245;&#20316;&#20462;&#25913;&#65292;<code>OrderController</code> &#35201;&#21516;&#26102;&#33021;&#22815;&#22788;&#29702;&#34920;&#21333;&#25552;&#20132;&#19982; <code>REST</code> &#25509;&#21475;&#35843;&#29992;&#65292;&#20004;&#20010; <code>createNewOrder()</code> &#26041;&#27861;&#25509;&#21463;&#30340;&#35831;&#27714;&#20869;&#23481;&#31867;&#22411;&#19981;&#21516;&#65292;&#25509;&#21463;&#34920;&#21333;&#30340;&#36820;&#22238; Thymeleaf &#35270;&#22270;&#65292;&#32780;&#25509;&#21463; JSON &#30340;&#36820;&#22238;&#20540;&#20063;&#26159; JSON&#65292;&#23427;&#20204;&#21487;&#20197;&#20849;&#20139;&#35746;&#21333;&#21019;&#24314;&#30340;&#26041;&#27861;&#12290;&#20855;&#20307;&#22914;&#20195;&#30721;&#31034;&#20363; 10-40 &#25152;&#31034;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">28</span></p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-40</strong>&#12288;&#21516;&#26102;&#22788;&#29702;&#34920;&#21333;&#19982; <code>REST</code> &#35831;&#27714;&#30340; <code>OrderController</code></p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Controller
@RequestMapping("/order")
@Slf4j
public class OrderController {
    @PostMapping(consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)
    public String createNewOrder(@Valid NewOrderForm form, BindingResult result, ModelMap modelMap) {
        // &#30465;&#30053;&#20195;&#30721;
    }

    @ResponseBody
    @PostMapping(consumes = MediaType.APPLICATION_JSON_VALUE,
                  produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity&lt;Order&gt; createNewOrder(@RequestBody @Valid NewOrderForm form, BindingResult result) {
        if (result.hasErrors()) {
            return ResponseEntity.badRequest().body(null);
        }
        Order order = createOrder(form);
        URI uri = ServletUriComponentsBuilder.fromCurrentRequestUri().build().toUri();
        return ResponseEntity.created(uri).body(order);
    }

    private Order createOrder(NewOrderForm form) {
        List&lt;MenuItem&gt; itemList = form.getItemIdList().stream()
            .map(i -&gt; NumberUtils.toLong(i))
            .collect(Collectors.collectingAndThen(Collectors.toList(), list -&gt; menuService.getByIdList(list)));
        Order order = orderService.createOrder(itemList, form.getDiscount());
        log.info("&#21019;&#24314;&#26032;&#35746;&#21333;&#65292;Order={}", order);
        return order;
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#160;</p>
</li>
<li><p><strong>&#22522;&#20110; JWT &#30340;&#35748;&#35777;</strong></p>
<p>&#22312; 10.2.4 &#33410;&#20013;&#65292;&#25105;&#20204;&#24320;&#21457;&#22909;&#20102;&#19968;&#20010;&#20351;&#29992; JWT &#35748;&#35777;&#30340;&#26381;&#21153;&#31471;&#31243;&#24207;&#65292;&#37027;&#23458;&#25143;&#31471;&#21448;&#35813;&#22914;&#20309;&#26469;&#33719;&#21462; JWT &#20196;&#29260;&#65292;&#22312;&#35831;&#27714;&#20013;&#24102;&#19978;&#20196;&#29260;&#20570;&#35748;&#35777;&#21602;&#65311;<code>RestTemplate</code> &#30340; HTTP Basic &#35748;&#35777;&#26159;&#33258;&#21160;&#22312;&#27599;&#20010;&#35831;&#27714;&#37324;&#28155;&#21152; <code>Authorization</code> &#22836;&#65292;&#25105;&#20204;&#21487;&#20197;&#20889;&#19968;&#20010;&#33258;&#24049;&#30340; <code>RestTemplateRequestCustomizer</code> &#23454;&#29616;&#31867;&#20284;&#30340;&#21151;&#33021;&#65292;&#22914;&#20195;&#30721;&#31034;&#20363; 10-41 &#25152;&#31034;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">29</span></p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-41</strong>&#12288;&#33719;&#21462; JWT &#20196;&#29260;&#24182;&#35774;&#32622;&#21040;&#35831;&#27714;&#20013;&#30340; <code>JwtClientHttpRequestInitializer</code></p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@Slf4j
public class JwtClientHttpRequestInitializer implements RestTemplateRequestCustomizer {
    @Autowired
    private ClientHttpRequestFactory requestFactory;
    @Value("${jwt.username}")
    private String username;
    @Value("${jwt.password}")
    private String password;
    @Value("${binarytea.url}")
    private String binarytea;
    private String token;

    @PostConstruct
    public void initToken() {
        ResponseEntity&lt;TokenResponse&gt; entity = acquireToken();
        if (HttpStatus.OK == entity.getStatusCode() &amp;&amp; entity.getBody() != null) {
            token = entity.getBody().getToken();
            log.info("&#33719;&#24471;Token&#65306;{}", token);
        } else {
            log.warn("&#33719;&#21462;Token&#22833;&#36133;&#65292;&#21407;&#22240;&#65306;{}", entity.getBody());
        }
    }

    @Override
    public void customize(ClientHttpRequest request) {
        if (StringUtils.isBlank(token)) {
            initToken();
        }
        if (StringUtils.isNotBlank(token) &amp;&amp;!request.getHeaders()
            .containsKey(HttpHeaders.AUTHORIZATION)) {
            request.getHeaders().setBearerAuth(token);
        }
    }

    private ResponseEntity&lt;TokenResponse&gt; acquireToken() {
        return new RestTemplate(requestFactory) // &#29992;&#20010;&#31616;&#21333;&#30340;RestTemplate&#26469;&#33719;&#21462;Token
                    .postForEntity(binarytea + "/token",
                    new TokenRequest(username, password),
                    TokenResponse.class);
    }
}</code></pre>
<p>&#19978;&#38754;&#30340;&#20195;&#30721;&#20027;&#35201;&#20570;&#20102;&#20004;&#20214;&#20107;&#65306;&#19968;&#20214;&#26159; <code>initToken()</code> &#20351;&#29992;&#29992;&#25143;&#21517;&#19982;&#23494;&#30721;&#26469;&#33719;&#24471;&#20196;&#29260;&#65292;&#19978;&#38754;&#28155;&#21152;&#20102; <code>@PostConstruct</code>&#65292;&#22312;&#23436;&#25104;&#20381;&#36182;&#27880;&#20837;&#21518;&#33258;&#21160;&#36816;&#34892;&#35813;&#26041;&#27861;&#65292;&#22312;&#31532;&#19968;&#26102;&#38388;&#33719;&#24471;&#20196;&#29260;&#65292;&#22914;&#26524;&#21021;&#22987;&#21270;&#22833;&#36133;&#65292;&#21518;&#32493;&#22312;&#20351;&#29992;&#26102;&#36824;&#20250;&#20877;&#23581;&#35797;&#33719;&#21462;&#65307;&#21478;&#19968;&#20214;&#26159; <code>customize()</code> &#24448;&#27599;&#20010;&#35831;&#27714;&#30340; HTTP &#22836;&#37324;&#22622;&#19968;&#20010; <code>Authorization</code> &#22836;&#65292;&#37324;&#38754;&#26159; <code>Bearer</code> &#21152;&#20196;&#29260;&#12290;&#20197;&#19978;&#23545;&#24212;&#30340;&#37197;&#32622;&#20195;&#30721;&#22914;&#20195;&#30721;&#31034;&#20363; 10-42 &#25152;&#31034;&#12290;<span class="&#27880;&#37322;&#32534;&#21495;">30</span></p>
<blockquote>
<p><strong>&#20195;&#30721;&#31034;&#20363; 10-42</strong>&#12288;JWT &#20196;&#29260;&#23545;&#24212;&#30340;&#37197;&#32622;&#20195;&#30721;</p>
</blockquote>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>@SpringBootApplication
@Slf4j
public class CustomerApplication {
    @Bean
    public RestTemplate restTemplate(RestTemplateBuilder builder) {
        return builder
                .requestFactory(this::requestFactory)
                .setConnectTimeout(Duration.ofSeconds(1)) // &#36830;&#25509;&#36229;&#26102;
                .setReadTimeout(Duration.ofSeconds(5)) // &#35835;&#21462;&#36229;&#26102;
                .additionalRequestCustomizers(jwtClientHttpRequestInitializer())
                .build();
    }

    @Bean
    public JwtClientHttpRequestInitializer jwtClientHttpRequestInitializer() {
        return new JwtClientHttpRequestInitializer();
    }
    // &#30465;&#30053;&#20854;&#20182;&#20195;&#30721;
}</code></pre>
<p>&#25105;&#20204;&#22312; <code>application.properties</code> &#37324;&#28155;&#21152;&#19979;&#38754;&#30340;&#37197;&#32622;&#65292;&#29992;&#29992;&#25143;&#21517; <code>LiLei</code> &#30331;&#24405;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>binarytea.url=http://localhost:8080
jwt.username=LiLei
jwt.password=binarytea</code></pre>
<p>&#36816;&#34892;&#31243;&#24207;&#21518;&#20250;&#30475;&#21040;&#31867;&#20284;&#19979;&#38754;&#36825;&#26679;&#30340;&#36755;&#20986;&#65292;&#36824;&#26377;&#21478;&#22806;&#30340;&#19968;&#20123;&#26085;&#24535;&#65306;</p>
<pre class="&#20195;&#30721;&#26080;&#34892;&#21495;"><code>2021-02-11 22:19:01.219 INFO 83964 --- [main] l.s.c.JwtClientHttpRequestInitializer : &#33719;&#24471;Token&#65306;
eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJMaUxlaSIsImlzcyI6IkJpbmFyeVRlYSIsImlhdCI6MTYxMzA1MzE0MSwiZXhwIjoxNjEzMDU2
NzQxfQ.stQWgDPW1dx8Z8kuH_jX-fD1iphashp1uf8QHTW_4DzWA0SwRQAmhxORTq8uLNQnwGUX_cHbM95F0nEvoTn-9A</code></pre>
<p>&#22914;&#26524;&#25226;&#29992;&#25143;&#21517;&#25442;&#25104; <code>ZhangSan</code>&#65292;&#37027;&#25191;&#34892;&#21518;&#20250;&#25253;&#38169;&#65292;&#22240;&#20026;&#20182;&#27809;&#26377;&#35843;&#29992; <code>/order</code> &#30340;&#26435;&#38480;&#65292;&#35775;&#38382;&#20250;&#36820;&#22238; <code>403 Forbidden</code>&#12290;</p>
</li>
</ol><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">27</span>&#36825;&#27573;&#31034;&#20363;&#22312; ch10/customer-basic-auth &#39033;&#30446;&#37324;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">28</span>&#36825;&#27573;&#31034;&#20363;&#22312; ch10/binarytea-jwt-auth &#39033;&#30446;&#37324;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">29</span>&#36825;&#27573;&#31034;&#20363;&#22312; ch10/customer-jwt-auth &#39033;&#30446;&#37324;&#12290;</p><p class="&#27880;&#37322;&#20869;&#23481;"><span class="&#27880;&#37322;&#32534;&#21495;&#19979;">30</span>&#36825;&#37324;&#21482;&#32771;&#34385;&#20102;&#21551;&#21160;&#26102;&#33719;&#21462;&#20196;&#29260;&#30340;&#24773;&#20917;&#65292;&#22312;&#19968;&#20010;&#38271;&#26102;&#38388;&#36816;&#34892;&#30340;&#31995;&#32479;&#37324;&#65292;&#36824;&#38656;&#35201;&#32771;&#34385;&#20196;&#29260;&#30340;&#36807;&#26399;&#65292;&#38656;&#35201;&#23450;&#26399;&#26356;&#26032;&#20196;&#29260;&#12290;&#21487;&#20197;&#22686;&#21152;&#19968;&#20010;&#23450;&#26102;&#20219;&#21153;&#26356;&#26032;&#20196;&#29260;&#65292;&#21478;&#22806;&#65292;&#22312;&#36935;&#21040;&#20196;&#29260;&#36807;&#26399;&#30340;&#25253;&#38169;&#26102;&#20877;&#20027;&#21160;&#36827;&#34892;&#20196;&#29260;&#26356;&#26032;&#12290;</p><h2 id="nav_point_171">10.6&#12288;&#23567;&#32467;</h2><p>&#26412;&#31456;&#25105;&#20204;&#19968;&#36215;&#23398;&#20064;&#20102; Spring Security &#30456;&#20851;&#30340;&#20869;&#23481;&#12290;Spring Security &#26159;&#19968;&#27454;&#24378;&#22823;&#30340;&#23433;&#20840;&#26694;&#26550;&#65292;&#33021;&#22815;&#24110;&#21161;&#22823;&#23478;&#26356;&#26041;&#20415;&#22320;&#22788;&#29702;&#19968;&#20123;&#24120;&#35265;&#30340;&#23433;&#20840;&#20107;&#23452;&#65292;&#20363;&#22914;&#65292;&#36827;&#34892;&#35775;&#38382;&#32773;&#30340;&#36523;&#20221;&#35748;&#35777;&#21644;&#26435;&#38480;&#26657;&#39564;&#12290;&#26080;&#35770;&#26159; HTTP Basic &#35748;&#35777;&#65292;&#36824;&#26159;&#34920;&#21333;&#30331;&#24405;&#65292;&#29978;&#33267;&#26159;&#8220;&#35760;&#20303;&#25105;&#8221;&#65292;Spring Security &#37117;&#21487;&#20197;&#23436;&#32654;&#32988;&#20219;&#12290;&#22312;&#26435;&#38480;&#26657;&#39564;&#26041;&#38754;&#65292;&#22522;&#20110;&#35831;&#27714;&#26041;&#27861;&#21644; URL&#65292;&#25105;&#20204;&#21487;&#20197;&#35774;&#32622;&#26435;&#38480;&#65292;&#20063;&#21487;&#20197;&#35774;&#32622;&#35282;&#33394;&#65292;&#26435;&#38480;&#26657;&#39564;&#26082;&#25903;&#25345; XML &#21644; Java &#37197;&#32622;&#31867;&#65292;&#20063;&#25903;&#25345;&#30452;&#25509;&#20351;&#29992;&#27880;&#35299;&#65292;&#30456;&#24403;&#28789;&#27963;&#12290;</p><p>&#38500;&#27492;&#20043;&#22806;&#65292;Spring Security &#36824;&#38024;&#23545;&#20960;&#31181;&#24120;&#35265;&#30340;&#23041;&#32961;&#25552;&#20379;&#20102;&#20869;&#32622;&#38450;&#25252;&#25514;&#26045;&#65292;&#20687; CSRF&#12289;XSS &#36825;&#20123;&#25915;&#20987;&#37117;&#24050;&#26377;&#25104;&#29087;&#30340;&#35299;&#20915;&#26041;&#26696;&#65292;&#22312;&#23454;&#36341;&#20013;&#36824;&#21487;&#20197;&#32467;&#21512;&#21508;&#31181;&#31532;&#19977;&#26041;&#30340;&#24037;&#20855;&#65292;&#20363;&#22914; OWASP &#30340;&#24037;&#20855;&#65292;&#36215;&#21040;&#26356;&#22909;&#30340;&#25928;&#26524;&#12290;&#23433;&#20840;&#26159;&#19968;&#39033;&#38656;&#35201;&#38271;&#26399;&#25237;&#20837;&#30340;&#24037;&#20316;&#65292;&#22312;&#19981;&#26029;&#30340;&#25915;&#38450;&#36807;&#31243;&#20013;&#19981;&#26029;&#25913;&#36827;&#65292;&#32780;&#36873;&#25321;&#19968;&#27454;&#22909;&#30340;&#26694;&#26550;&#12289;&#24314;&#31435;&#19968;&#22871;&#22909;&#30340;&#26426;&#21046;&#37117;&#33021;&#22312;&#26085;&#21518;&#30340;&#24037;&#20316;&#20013;&#24110;&#21040;&#22823;&#23478;&#12290;</p><p>&#19979;&#19968;&#31456;&#65292;&#25105;&#20204;&#20250;&#32842;&#19968;&#20123; Web &#24320;&#21457;&#36807;&#31243;&#20013;&#21487;&#33021;&#20250;&#29992;&#21040;&#30340;&#36827;&#38454;&#30693;&#35782;&#28857;&#65292;&#20363;&#22914;&#65292;&#22914;&#20309;&#22312; Web &#24037;&#31243;&#37324;&#36816;&#29992; AOP&#65292;&#22914;&#20309;&#24320;&#21457;&#21709;&#24212;&#24335;&#30340; Web &#26381;&#21153;&#65292;&#22914;&#20309;&#25903;&#25345; HTTP 2.0 &#31561;&#12290;</p><blockquote>
<p style="text-align: center"><strong>&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#39033;&#30446;&#24320;&#21457;&#23567;&#32467;</strong></p>
<p>&#26412;&#31456;&#20013;&#65292;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215; Web &#30028;&#38754;&#32456;&#20110;&#26377;&#20102;&#33258;&#24049;&#30340;&#36523;&#20221;&#35748;&#35777;&#21644;&#26435;&#38480;&#25511;&#21046;&#21151;&#33021;&#12290;&#36523;&#20221;&#35748;&#35777;&#26041;&#38754;&#23454;&#29616;&#20102;&#22522;&#20110; HTTP Basic&#12289;&#34920;&#21333;&#21644; JWT &#30340;&#35748;&#35777;&#12290;&#38024;&#23545;&#19981;&#21516;&#30340; URL &#36824;&#35774;&#32622;&#20102;&#19981;&#21516;&#30340;&#26435;&#38480;&#21644;&#35282;&#33394;&#65292;&#20063;&#23601;&#26159;&#35828;&#26681;&#25454;&#30331;&#24405;&#36523;&#20221;&#30340;&#19981;&#21516;&#65292;&#31995;&#32479;&#20250;&#26377;&#19981;&#21516;&#30340;&#21709;&#24212;&#12290;&#27492;&#22806;&#65292;&#20026;&#20102;&#38450;&#24481;&#24120;&#35265;&#30340;&#25915;&#20987;&#65292;&#25105;&#20204;&#36824;&#22312;&#26381;&#21153;&#31471;&#22686;&#21152;&#20102; CSRF &#25915;&#20987;&#30340;&#23545;&#24212;&#38450;&#25252;&#25514;&#26045;&#12290;</p>
<p>&#22312;&#23458;&#25143;&#31471;&#26041;&#38754;&#65292;&#20026;&#20102;&#37197;&#21512;&#26381;&#21153;&#31471;&#30340;&#25913;&#21160;&#65292;&#20063;&#22686;&#21152;&#20102; HTTP Basic &#26041;&#24335;&#21644; JWT &#26041;&#24335;&#30340;&#36523;&#20221;&#35748;&#35777;&#21151;&#33021;&#65292;&#29992;&#25143;&#33021;&#22815;&#20197;&#29305;&#23450;&#30340;&#36523;&#20221;&#26469;&#35775;&#38382;&#20108;&#36827;&#21046;&#22902;&#33590;&#24215;&#30340; REST &#26381;&#21153;&#12290;</p>
</blockquote><br style="page-break-after:always"/><div style="page-break-after:always"></div>